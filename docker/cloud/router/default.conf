server {
    listen       80;
    server_name  localhost;

    access_log /usr/local/openresty/nginx/logs/$host;


    # gzip
    include  /etc/nginx/confs/gzip.conf;

    # index.html
    location = / {
      include  /etc/nginx/confs/index.conf;
    }   

    # app.js
    location /apps/app.js {
        include  /etc/nginx/confs/app-js.conf;
    }  

  # Purge from cache - need to make it fully work. Flock will ensure only one at a time.
   location /purge {
      content_by_lua_block {
       os.execute("flock -n /var/lock/myjob.lock /manohar/cache.sh")
     } 
  }

  # Catch all requests
  # See if it matches our cloud etc.
  # Find Local DNS if it is running
   # cloudid-appid-version.appup.cloud
   location / {

      # Set cloud id etc
      set $target '';
      include  /etc/nginx/confs/cloud-vars.conf;
      access_by_lua_file lua/forward.lua;

      if ($target ~ "a^$") {
          content_by_lua_block{
            ngx.header.content_type = 'text/plain';
            ngx.say(ngx.var.cloudid);
            ngx.say(ngx.var.appid);
            ngx.say(ngx.var.version);
            ngx.say(ngx.var.target);
            
            ngx.say('cannot make it to work');
            ngx.exit(403);
          }
      }

      # Get service from SRV - version.cloud.app.{{appup.local}}
     #set $proxy_dst "http://$target/$path_rest";
     proxy_pass http://$target;
    }

  # Get access logs
  location ~ (_appup_logs)$  {
          
          include  /etc/nginx/confs/cloud-vars.conf;

          # Get the target from the SRV 
          content_by_lua_file lua/last-access.lua;
    }

    location = /dns {
          set $target '';

          # Get the target from the SRV 
          access_by_lua_file lua/srv.lua;
          proxy_pass http://$target;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}