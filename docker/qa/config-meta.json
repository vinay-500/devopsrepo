{
  "workflows": [
    {
      "id": 142195,
      "name": "trash",
      "trigger": "rest",
      "expression": "/trash/{table_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXRx1hLv0svH"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": " <#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\n\r\nupdate <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} set  <#if app.trash??> <#assign trash=app.trash?eval> \r\n <#if trash['${request.path.table_name}']??>${trash['${request.path.table_name}']}=0 </#if> </#if>,<#if app.delete_date??> <#assign delete_date=app.delete_date?eval> \r\n <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']}=now() </#if> </#if>\r\n\r\n where id in (${request.params.id})\r\n<#if check==1> and\r\n ${app.id_type}=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBXPICGe0pXtW",
          "next": {
            "success": "PBX9UFTGyhHxR",
            "failure": "PBXE6fcVBGgxL"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlehmFUgOUt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "abc",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5mZnEZ4FB6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "abc",
          "value": "Trash Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXE6fcVBGgxL",
          "next": {
            "success": "PBX5mZnEZ4FB6",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXRx1hLv0svH",
          "next": {
            "success": "PBXcv5Ac9TWeE",
            "failure": "PBXHHIMlnqXzo"
          }
        },
        {
          "name": "a",
          "value": "  <#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  update <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} set  <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??>${trash['${request.path.table_name}']}=0 </#if> </#if>,<#if app.delete_date??> <#assign delete_date=app.delete_date?eval>   <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']}=now() </#if> </#if>   where id in (${request.params.id}) <#if check==1> and  ${app.id_type}=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXcv5Ac9TWeE",
          "next": {
            "success": "PBXVcty7tSKzm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXVcty7tSKzm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXDZ3WRzF9TK",
          "next": {
            "success": "hangup",
            "failure": "PBXNskap2V9fI"
          }
        },
        {
          "name": "activity_test1",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXHHIMlnqXzo",
          "next": {
            "success": "PBXPICGe0pXtW",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "{{activity_test1}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX9UFTGyhHxR",
          "next": {
            "success": "PBXZkTu5gQN7X",
            "failure": "PBXlehmFUgOUt"
          }
        },
        {
          "name": "parent_table",
          "value": "<#compress> <#assign i=\"\"> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=k?keep_after(\".\")> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZkTu5gQN7X",
          "next": {
            "success": "PBX2CSqWpo5v1",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": " <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\nINSERT INTO `activity` (entity,entity_id,action,activity,created_by\r\n<#if check==1>,${app.id_type}</#if>,sub_entity_id) \r\n\r\nselect <#if parent_table != request.path.table_name> '${request.path.table_name}' <#else> ${parent_table} </#if>,<#if parent_table != request.path.table_name> ${parent_table}_id <#else> id </#if>,\r\n'${request.path.table_name}-delete',<#list app as k,v>  <#if k?keep_before(\".\") == 'columns'&& k?keep_after(\".\") == request.path.table_name>\r\n\r\n\r\n\r\nconcat( '{',<#list v?split(',') as v1> '\"${v1}\":\"',${v1},'\"<#sep>,',</#sep> </#list>}')\r\n\r\n </#if> </#list>,${user_id}\r\n<#if check==1>,${domain_id}</#if>, <#if request.path.table_name != parent_table> id <#else> null </#if> from ${request.path.table_name}\r\n\r\nwhere <#if request.params.id??>id in (${request.params.id})</#if>\r\n\r\n<#if request.params.id?? && request.params.where??> and</#if>\r\n\r\n<#if request.params.where??> ${request.params.where} </#if> \r\n\r\n\r\n<#if check==1>\r\n<#if request.params.id?? || request.params.where??>\r\nand</#if>\r\n${app.id_type}=${domain_id}</#if>",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-insert",
          "id": "PBX2CSqWpo5v1",
          "next": {
            "success": "PBXryy31DPAQJ",
            "failure": "PBXvqE9GNa5Vl"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXryy31DPAQJ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "res",
          "value": "insert failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXvqE9GNa5Vl",
          "next": {
            "success": "PBX5du6Ua6box",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "res",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5du6Ua6box",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "status",
          "value": "Select Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXNskap2V9fI",
          "next": {
            "success": "PBXNs7RfFc39C",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "status",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNs7RfFc39C",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142196,
      "name": "restore",
      "trigger": "rest",
      "expression": "/restore/{table_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXRx1hLv0svH"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": " <#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\n\r\nupdate <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} set  <#if app.trash??> <#assign trash=app.trash?eval> \r\n <#if trash['${request.path.table_name}']??>${trash['${request.path.table_name}']}=1 </#if> </#if>,<#if app.delete_date??> <#assign delete_date=app.delete_date?eval> \r\n <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']}=null </#if> </#if>\r\n where id in (${request.params.id})\r\n<#if check==1> and\r\n ${app.id_type}=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBXPICGe0pXtW",
          "next": {
            "success": "PBXmavcKdZOo2",
            "failure": "PBXE6fcVBGgxL"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlehmFUgOUt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "abc",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5mZnEZ4FB6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "abc",
          "value": "Update Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXE6fcVBGgxL",
          "next": {
            "success": "PBX5mZnEZ4FB6",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXRx1hLv0svH",
          "next": {
            "success": "PBXcv5Ac9TWeE",
            "failure": "PBXDynKSBtioG"
          }
        },
        {
          "name": "a",
          "value": " <#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  update <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} set  <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??>${trash['${request.path.table_name}']}=1 </#if> </#if>,<#if app.delete_date??> <#assign delete_date=app.delete_date?eval>   <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']}=null </#if> </#if>  where id in (${request.params.id}) <#if check==1> and  ${app.id_type}=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXcv5Ac9TWeE",
          "next": {
            "success": "PBXVcty7tSKzm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXVcty7tSKzm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXfU6pTgm0ie",
          "next": {
            "success": "hangup",
            "failure": "PBXXJw1sVobTe"
          }
        },
        {
          "name": "activity_test1",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXDynKSBtioG",
          "next": {
            "success": "PBXPICGe0pXtW",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "{{activity_test1}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXmavcKdZOo2",
          "next": {
            "success": "PBXl2lgAN5TgT",
            "failure": "PBXSPPoFIfUH6"
          }
        },
        {
          "name": "parent_table",
          "value": "<#compress> <#assign i=\"\"> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=k?keep_after(\".\")> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXl2lgAN5TgT",
          "next": {
            "success": "PBXJC7f9SfqKF",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign check=1>\r\n<#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\n\r\nINSERT INTO `activity` (entity,entity_id,action,activity,created_by\r\n<#if check==1>,${app.id_type}</#if>,sub_entity_id) \r\nselect <#if parent_table != request.path.table_name> '${request.path.table_name}' <#else> ${parent_table} </#if>,<#if parent_table != request.path.table_name> ${parent_table}_id <#else> id </#if>,\r\n'${request.path.table_name}-restore',<#list app as k,v>  <#if k?keep_before(\".\") == 'columns'&& k?keep_after(\".\") == request.path.table_name>\r\n\r\nconcat( '{',<#list v?split(',') as v1> '\"${v1}\":\"',${v1},'\"<#sep>,',</#sep> </#list>}')\r\n\r\n </#if> </#list>,${user_id}\r\n<#if check==1>,${domain_id}</#if>, <#if request.path.table_name != parent_table> id <#else> null </#if> from ${request.path.table_name}\r\n\r\nwhere <#if request.params.id??>id in (${request.params.id})</#if>\r\n\r\n<#if request.params.id?? && request.params.where??> and</#if>\r\n\r\n<#if request.params.where??> ${request.params.where} </#if> \r\n\r\n<#if check==1>\r\n<#if request.params.id?? || request.params.where??>\r\nand</#if>\r\n${app.id_type}=${domain_id}</#if>\r\n",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-insert",
          "id": "PBXJC7f9SfqKF",
          "next": {
            "success": "PBXlehmFUgOUt",
            "failure": "PBXSI6Um9HCuk"
          }
        },
        {
          "name": "res",
          "value": "insert failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXSI6Um9HCuk",
          "next": {
            "success": "PBXWAyAOsRVkF",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "res",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWAyAOsRVkF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXSPPoFIfUH6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "status",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXJw1sVobTe",
          "next": {
            "success": "PBXF1BwsnOiGU",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "status",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXF1BwsnOiGU",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142197,
      "name": "permanent_delete",
      "trigger": "rest",
      "expression": "/delete/{table_name}",
      "method": "DELETE",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXRx1hLv0svH"
          }
        },
        {
          "variable_name": "delete",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlehmFUgOUt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "abc",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5mZnEZ4FB6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "abc",
          "value": "Delete Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXE6fcVBGgxL",
          "next": {
            "success": "PBX5mZnEZ4FB6",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXRx1hLv0svH",
          "next": {
            "success": "PBXcv5Ac9TWeE",
            "failure": "PBXoqZ5W5ToNK"
          }
        },
        {
          "name": "a",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  delete from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} where <#assign delete_date=app.delete_date?eval>   <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']} </#if> <=now()-interval ${app.days} day <#if check==1> and  ${app.id_type}=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXcv5Ac9TWeE",
          "next": {
            "success": "PBXVcty7tSKzm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXVcty7tSKzm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\n\r\ndelete from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} where <#assign delete_date=app.delete_date?eval> \r\n <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']} </#if> <=now()-interval ${app.days} day\r\n<#if check==1> and\r\n ${app.id_type}=${domain_id}</#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "delete",
          "type": "sql-delete",
          "id": "PBXoqZ5W5ToNK",
          "next": {
            "success": "PBXlehmFUgOUt",
            "failure": "PBXE6fcVBGgxL"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXWLzfBiNten",
          "next": {
            "success": "hangup",
            "failure": "PBXWrzqLSCZXO"
          }
        },
        {
          "name": "status",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWrzqLSCZXO",
          "next": {
            "success": "PBXsOpMqHCuUT",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "status",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXsOpMqHCuUT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142197,
      "name": "permanent_delete",
      "trigger": "daemon",
      "expression": "0 0 0 * * ?",
      "execute_continues": "false",
      "sleep_interval": null,
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXRx1hLv0svH"
          }
        },
        {
          "variable_name": "delete",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlehmFUgOUt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "abc",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5mZnEZ4FB6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "abc",
          "value": "Delete Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXE6fcVBGgxL",
          "next": {
            "success": "PBX5mZnEZ4FB6",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXRx1hLv0svH",
          "next": {
            "success": "PBXcv5Ac9TWeE",
            "failure": "PBXoqZ5W5ToNK"
          }
        },
        {
          "name": "a",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  delete from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} where <#assign delete_date=app.delete_date?eval>   <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']} </#if> <=now()-interval ${app.days} day <#if check==1> and  ${app.id_type}=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXcv5Ac9TWeE",
          "next": {
            "success": "PBXVcty7tSKzm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXVcty7tSKzm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\n\r\ndelete from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} where <#assign delete_date=app.delete_date?eval> \r\n <#if delete_date['${request.path.table_name}']??>${delete_date['${request.path.table_name}']} </#if> <=now()-interval ${app.days} day\r\n<#if check==1> and\r\n ${app.id_type}=${domain_id}</#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "delete",
          "type": "sql-delete",
          "id": "PBXoqZ5W5ToNK",
          "next": {
            "success": "PBXlehmFUgOUt",
            "failure": "PBXE6fcVBGgxL"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXWLzfBiNten",
          "next": {
            "success": "hangup",
            "failure": "PBXWrzqLSCZXO"
          }
        },
        {
          "name": "status",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWrzqLSCZXO",
          "next": {
            "success": "PBXsOpMqHCuUT",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "status",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXsOpMqHCuUT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142198,
      "name": "MULTI_COUNT",
      "trigger": "rest",
      "expression": "/m/multi-count",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX2nIfByl2lW"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}> \r\n</#list> </#if>\r\n<#compress><#list 0..request.body.tables?size-1 as i>select convert(concat('{\"${request.body.tables[i]}\"',':',count(*),'}')using utf8) as name from <#if testreferer??> `${testreferer}`.</#if>`${request.body.tables[i]}`  <#if !tables_tenant['${request.body.tables[i]}']??>\r\nwhere <#if testreferer??> `${testreferer}`.</#if>`${request.body.tables[i]}`.`domain_id`=${domain_id}</#if><#sep> union </#sep></#list>;</#compress>",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql",
          "id": "PBXrw09XTAuUz",
          "next": {
            "success": "PBXXDadTke65v",
            "failure": "PBXrXclaXKfEb"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX4mX8fFxKit",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXrXclaXKfEb",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "[<#list result as i>${i.name}<#sep> ,${'\\n'} </#sep></#list>]",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXDadTke65v",
          "next": {
            "success": "PBX4mX8fFxKit",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{{request.params.preview}}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX2nIfByl2lW",
          "next": {
            "success": "PBXMIhTG3WfB9",
            "failure": "PBXrw09XTAuUz"
          }
        },
        {
          "name": "b",
          "value": "<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#compress><#list 0..request.body.tables?size-1 as i>select convert(concat('{\"${request.body.tables[i]}\"',':',count(*),'}')using utf8) as name from <#if testreferer??> `${testreferer}`.</#if>`${request.body.tables[i]}`  <#if !tables_tenant['${request.body.tables[i]}']??> where <#if testreferer??> `${testreferer}`.</#if>`${request.body.tables[i]}`.`domain_id`=${domain_id}</#if><#sep> union </#sep></#list>;</#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXMIhTG3WfB9",
          "next": {
            "success": "PBXtRwP5MPJki",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "b",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXtRwP5MPJki",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142149,
      "name": "delete",
      "trigger": "rest",
      "expression": "/{table_name}",
      "method": "DELETE",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX6tcFf73X98"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> \r\n<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\ndelete from  <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` where <#if check==1>\r\ndomain_id=${domain_id} and </#if>\r\n\r\n<#if request.params.id??>id in (${request.params.id})</#if>\r\n\r\n<#if request.params.id?? &&  request.params.w??> and</#if>\r\n\r\n<#if request.params.w??> ${request.params.w} </#if> \r\n</#compress> ",
          "value_type": "ftl",
          "output_variable": "bulk_delete",
          "type": "sql-delete",
          "id": "PBX8vSCDTbJb5",
          "next": {
            "success": "PBXpgh79oKcCF",
            "failure": "PBXysm86HdRGn"
          }
        },
        {
          "name": "bulk_delete1",
          "value": "Delete Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXysm86HdRGn",
          "next": {
            "success": "PBX2ypXNhUSe8",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "bulk_delete",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXpgh79oKcCF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "bulk_delete1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX2ypXNhUSe8",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "activity_test",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXCx8yU32ecT",
          "next": {
            "success": "PBXu69rObPZ3x",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "<#if app.activity??><#assign act=app.activity?eval><#if act['${request.path.table_name}']??>1<#else>0</#if><#else>0</#if>",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXu69rObPZ3x",
          "next": {
            "success": "PBXd9zlA1t7W7",
            "failure": "PBX8vSCDTbJb5"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXWGcBtiKIWv",
          "next": {
            "success": "PBXoUiB2nAKOy",
            "failure": "PBXCx8yU32ecT"
          }
        },
        {
          "name": "bulk_delete_preview",
          "value": "<#compress>  <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> delete from  <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` where <#if check==1> domain_id=${domain_id} and </#if>  <#if request.params.id??>id in (${request.params.id})</#if>  <#if request.params.id?? &&  request.params.w??> and</#if>  <#if request.params.w??> ${request.params.w} </#if>  </#compress> ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXoUiB2nAKOy",
          "next": {
            "success": "PBXBpWIKFc26d",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "bulk_delete_preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXBpWIKFc26d",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141423",
          "type": "execute-workflows",
          "id": "PBXDkWVBrkaCd",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXPLDXncKgge",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "test",
          "value": "0",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXd9zlA1t7W7",
          "next": {
            "success": "PBXDkWVBrkaCd",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "app",
          "if_type": "value",
          "variable1": "{{app_tables}}",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXBXuLR0rTJo",
          "next": {
            "success": "PBXWGcBtiKIWv",
            "failure": "PBXysm86HdRGn"
          }
        },
        {
          "name": "app_tables",
          "value": "<#list app.tablename?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX6tcFf73X98",
          "next": {
            "success": "PBXBXuLR0rTJo",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142151,
      "name": "upsert",
      "trigger": "rest",
      "expression": "/upsert/{table_name}",
      "method": "PATCH",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXlcISV1P40E"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT concat('{',group_concat(concat('\"', COLUMN_NAME,'\":\"0\"')),'}') as json\r\nFROM\r\nINFORMATION_SCHEMA.KEY_COLUMN_USAGE\r\nWHERE REFERENCED_COLUMN_NAME is null and REFERENCED_TABLE_NAME is null and TABLE_NAME ='${request.path.table_name}' ;",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXlcISV1P40E",
          "next": {
            "success": "PBXxTVtcTuifD",
            "failure": "PBXEopKWPar1p"
          }
        },
        {
          "variable_name": "result_keys",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXbnxvvhT5Q5",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXH5ObedgcU7",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> \r\nINSERT INTO <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name}(<#if check==1>domain_id,created_by,</#if><#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES\r\n<#list request.body.data as k1>(<#if check==1>${domain_id},${user_id},</#if><#list k1?values as v><#if k1?counter == request.body.data?size><#if v?counter == k1?size>'${v}')<#else>'${v}',</#if><#elseif v?counter == k1?size>'${v}'),<#else>'${v}',</#if></#list></#list> on duplicate key \r\nupdate\r\n<#assign temp1= '['+output[0].json+']' output=temp1?eval>\r\n<#assign u=\"\" l=output?size output1=output[0] c=\"\" v1=\"#$vk$#=if(#$uk$#,'#$vv$#',#$vk$#)\" data=\"\">\r\n<#if check==1>\r\n<#if output1['created_by']??> <#assign v1=v1?replace('#$uk$#','#$uk$# and created_by=${user_id}')> </#if>\r\n<#if output1['${app.id_type}']??> <#assign v1=v1?replace('#$uk$#','#$uk$# and ${app.id_type}=${domain_id}')> </#if>\r\n</#if>\r\n\r\n\r\n<#list request.body.data as i>\r\n<#assign c=\"\" data=\"\">\r\n<#list i as k,v> \r\n<#if output1['${k}']??><#assign c+= \" ${k}='${v}' and\"> <#else> <#assign data += v1?replace('#$vv$#',v)?replace('#$vk$#',k)+','> </#if> \r\n</#list> \r\n<#assign temp=\"${c?keep_before_last('and')}\" data=data?replace('#$uk$#','${temp}')> ${data?keep_before_last(',')}<#sep>,</#sep>\r\n</#list>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-insert",
          "id": "PBXhV7M8qsC5i",
          "next": {
            "success": "PBXbnxvvhT5Q5",
            "failure": "PBXlF7K0wJuiM"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXA3TbLRABa1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXxTVtcTuifD",
          "next": {
            "success": "PBXm4ban85GxD",
            "failure": "PBXhV7M8qsC5i"
          }
        },
        {
          "name": "b",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  INSERT INTO <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name}(<#if check==1>domain_id,created_by,</#if><#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES <#list request.body.data as k1>(<#if check==1>${domain_id},${user_id},</#if><#list k1?values as v><#if k1?counter == request.body.data?size><#if v?counter == k1?size>'${v}')<#else>'${v}',</#if><#elseif v?counter == k1?size>'${v}'),<#else>'${v}',</#if></#list></#list> on duplicate key  update <#assign temp1= '['+output[0].json+']' output=temp1?eval> <#assign u=\"\" l=output?size output1=output[0] c=\"\" v1=\"#$vk$#=if(#$uk$#,'#$vv$#',#$vk$#)\" data=\"\"> <#if check==1> <#if output1['created_by']??> <#assign v1=v1?replace('#$uk$#','#$uk$# and created_by=${user_id}')> </#if> <#if output1['${app.id_type}']??> <#assign v1=v1?replace('#$uk$#','#$uk$# and ${app.id_type}=${domain_id}')> </#if> </#if>   <#list request.body.data as i> <#assign c=\"\" data=\"\"> <#list i as k,v>  <#if output1['${k}']??><#assign c+= \" ${k}='${v}' and\"> <#else> <#assign data += v1?replace('#$vv$#',v)?replace('#$vk$#',k)+','> </#if>  </#list>  <#assign temp=\"${c?keep_before_last('and')}\" data=data?replace('#$uk$#','${temp}')> ${data?keep_before_last(',')}<#sep>,</#sep> </#list> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXm4ban85GxD",
          "next": {
            "success": "PBX5ybJXHHHJo",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "b",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5ybJXHHHJo",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "result",
          "value": "failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXlF7K0wJuiM",
          "next": {
            "success": "PBXA3TbLRABa1",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXEopKWPar1p",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "SELECT concat('{',group_concat(concat('\"', COLUMN_NAME,'\":\"0\"')),'}') as json FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE REFERENCED_COLUMN_NAME is null and REFERENCED_TABLE_NAME is null and TABLE_NAME ='${request.path.table_name}' ;",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXTbWou25NIs",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXoFUhoDvIiv",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142155,
      "name": "insert",
      "trigger": "rest",
      "expression": "/{table_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXPMWTub5Hpg"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign a=op[0].json?eval>\r\n\r\n\r\n\r\n<#assign tables_tenant={}>\r\n<#list 0..result_set?size-1 as i>\r\n<#assign str = result_set[i].tables >\r\n<#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>\r\n</#list>\r\n\r\nINSERT INTO `${request.path.table_name}`(<#if tables_tenant['${request.path.table_name}']??>\r\n${app.id_type},</#if>created_by,<#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES\r\n<#list request.body.data as k1>(<#if tables_tenant['${request.path.table_name}']??>${domain_id},</#if>${user_id},<#list k1 as k,v>\r\n<#if a[0]['${k}']??>\r\n<#if k1?counter == request.body.data?size><#if v?counter == k1?size>  aes_encrypt('${v?replace(\"'\",\"''\")}','${request.params.key_name}'))<#else>  aes_encrypt('${v?replace(\"'\",\"''\")}','${request.params.key_name}'),</#if>  <#elseif v?counter == k1?size> aes_encrypt('${v?replace(\"'\",\"''\")}','${request.params.key_name}'), <#else>  aes_encrypt('${v?replace(\"'\",\"''\")}','${request.params.key_name}'),</#if>\r\n\r\n<#else>\r\n\r\n<#if k1?counter == request.body.data?size><#if v?counter == k1?size>  '${v?replace(\"'\",\"''\")}')<#else>'${v?replace(\"'\",\"''\")}',</#if><#elseif v?counter == k1?size>'${v?replace(\"'\",\"''\")}'), <#else>'${v?replace(\"'\",\"''\")}',</#if>\r\n\r\n</#if>  \r\n</#list></#list>\r\n",
          "value_type": "ftl",
          "output_variable": "insert",
          "type": "sql-insert",
          "id": "PBXAbG6eznNf4",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX9PMcyNC3Gl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "insert1",
          "value": "Insert Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXtHBbZzRBTL",
          "next": {
            "success": "PBXlQTTqRt0Ul",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlQTTqRt0Ul",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "<#if app.activity??><#assign act=app.activity?eval><#if act['${request.path.table_name}']??>1<#else>0</#if><#else>0</#if>",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXPOQds8TxE6",
          "next": {
            "success": "PBXyIzzbyNxl8",
            "failure": "PBX1bumf1s3dd"
          }
        },
        {
          "name": "activity_test",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXDVzV2mfFxs",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b1",
          "if_type": "value",
          "variable1": "{{version_test1}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXTVmPvoKb57",
          "next": {
            "success": "PBXeenZ9qgFoV",
            "failure": "PBXN9pd0KTCkE"
          }
        },
        {
          "name": "version_test1",
          "value": "<#list app.version_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXoOTQXMuwDC",
          "next": {
            "success": "PBXTVmPvoKb57",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{version_test2}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXVC2VUyqBt9",
          "next": {
            "success": "PBXVAZ3wcNdXh",
            "failure": "PBXN9pd0KTCkE"
          }
        },
        {
          "name": "version_test2",
          "value": "<#list app.version_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX1bumf1s3dd",
          "next": {
            "success": "PBXVC2VUyqBt9",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXvPtBGzbTuc",
          "next": {
            "success": "PBX8e61zxdw8d",
            "failure": "PBXyClDtLSySr"
          }
        },
        {
          "name": "a1",
          "value": "<#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> INSERT INTO <#if app.case??><#if app.case='uppercase'> <#assign t='${request.path.table_name?upper_case}'>  <#else> <#assign t='${request.path.table_name}'>  </#if><#else><#assign t='${request.path.table_name}'></#if>  <#if testreferer??> `${testreferer}`.</#if>`${t}`(<#if check==1> domain_id,created_by,</#if><#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES <#list request.body.data as k1>(<#if check==1>${domain_id},${user_id},</#if><#list k1?values as v> <#if k1?counter == request.body.data?size><#if v?counter == k1?size>'${v?replace(\"'\",\"''\")}')<#else>'${v?replace(\"'\",\"''\")}',</#if><#elseif v?counter == k1?size>'${v?replace(\"'\",\"''\")}'), <#else>'${v?replace(\"'\",\"''\")}',</#if> </#list></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX8e61zxdw8d",
          "next": {
            "success": "PBXJkP2he3SgS",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJkP2he3SgS",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141421",
          "type": "execute-workflows",
          "id": "PBXyIzzbyNxl8",
          "next": {
            "success": "PBXoOTQXMuwDC",
            "failure": "PBXx7MHFC4zxb"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141427",
          "type": "execute-workflows",
          "id": "PBXeenZ9qgFoV",
          "next": {
            "success": "PBXN9pd0KTCkE",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141427",
          "type": "execute-workflows",
          "id": "PBXVAZ3wcNdXh",
          "next": {
            "success": "PBXN9pd0KTCkE",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXU2mGA7u5KO",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "test",
          "value": "0",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXAxEDTqfZkW",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{app_tables}}",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXUmHVQMcufQ",
          "next": {
            "success": "PBXvPtBGzbTuc",
            "failure": "PBXg8u8F6exmT"
          }
        },
        {
          "name": "app_tables",
          "value": "<#list app.tablename?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXPMWTub5Hpg",
          "next": {
            "success": "PBXUmHVQMcufQ",
            "failure": "hangup"
          }
        },
        {
          "name": "insert1",
          "value": "Insert Failed check",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXg8u8F6exmT",
          "next": {
            "success": "PBXTSqZK8XCRD",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXTSqZK8XCRD",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params}}",
          "comparator": "contains",
          "variable2": "key_name",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXEGvRUdeVZq",
          "next": {
            "success": "PBXAbG6eznNf4",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\nINSERT INTO <#if app.case??><#if app.case='uppercase'> <#assign t='${request.path.table_name?upper_case}'>  <#else> <#assign t='${request.path.table_name}'>  </#if><#else><#assign t='${request.path.table_name}'></#if>  <#if testreferer??> `${testreferer}`.</#if>`${t}`(<#if check==1> domain_id,created_by,</#if><#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES <#list request.body.data as k1>(<#if check==1>${domain_id},${user_id},</#if><#list k1?values as v> <#if k1?counter == request.body.data?size><#if v?counter == k1?size>'${v?replace(\"'\",\"''\")}')<#else>'${v?replace(\"'\",\"''\")}',</#if><#elseif v?counter == k1?size>'${v?replace(\"'\",\"''\")}'), <#else>'${v?replace(\"'\",\"''\")}',</#if> </#list></#list>",
          "value_type": "ftl",
          "output_variable": "insert",
          "type": "sql-insert",
          "id": "PBXyClDtLSySr",
          "next": {
            "success": "PBXPOQds8TxE6",
            "failure": "PBXtHBbZzRBTL"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "select concat('[{',group_concat(concat('\"',column_name,'\"',':','\"0\"')),'}]') 'json' from information_schema.columns \r\nwhere table_name='${request.path.table_name}' and table_schema=schema() and data_type not like '%int%';",
          "value_type": "ftl",
          "output_variable": "op",
          "type": "sql",
          "id": "PBXWcI9pfnFiF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "g_check",
          "if_type": "value",
          "variable1": "<#if request.params.g?? && request.params.g=='true'> 1 <#else> 0 </#if>",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXN9pd0KTCkE",
          "next": {
            "success": "PBXKFJHiAaWw2",
            "failure": "PBXiG2Zd31p4v"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT * \r\nFROM ${request.path.table_name}\r\nwhere id in \r\n(<#list insert_keys as k1> <#list k1 as k2,v2> ${v2?c}  </#list> <#sep> ,</#sep>  </#list>);",
          "value_type": "ftl",
          "output_variable": "gresult",
          "type": "sql",
          "id": "PBXKFJHiAaWw2",
          "next": {
            "success": "PBXscfNK4vCAT",
            "failure": "PBXE7Zsi4gTTw"
          }
        },
        {
          "variable_name": "insert_keys",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXiG2Zd31p4v",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "gresult",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXscfNK4vCAT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXE7Zsi4gTTw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "g_check",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXPrgbWugcUN",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXx7MHFC4zxb",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142150,
      "name": "update",
      "trigger": "rest",
      "expression": "/{table_name}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXTyKaE9eUF1"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": " <#compress><#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>   UPDATE <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name}  <#assign kv = \"\">SET <#list request.body as key,value> <#if key!=\"id\"  && key!=\"where\">  <#if value=='NULL'>  <#assign kv=kv+ key +'='+value?replace(\"'\",\"''\")+','> <#else><#assign kv=kv+ key +\"='\"+value?replace(\"'\",\"''\")+\"',\"> </#if> </#if></#list> ${kv?keep_before_last(\",\")}    where <#if request.body.id??>id in (${request.body.id})</#if>  <#if request.body.id?? && request.body.where??> and</#if>  <#if request.body.where??> ${request.body.where} </#if>     <#if check==1> <#if request.body.id?? || request.body.where??> and</#if> domain_id=${domain_id}</#if></#compress>",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBX5RCfDRqu5l",
          "next": {
            "success": "PBXktC2lGKMpi",
            "failure": "PBXKLe7TPbUrx"
          }
        },
        {
          "name": "update1",
          "value": "Update Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXAyuFVcxqhv",
          "next": {
            "success": "PBXuRzL6EeFCM",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXawzGhKKnIi",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update1",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXuRzL6EeFCM",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "<#if app.activity??><#assign act=app.activity?eval><#if act['${request.path.table_name}']??>1<#else>0</#if><#else>0</#if>",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXI6Nh9fepmT",
          "next": {
            "success": "PBXT1FtiicLUB",
            "failure": "PBX5RCfDRqu5l"
          }
        },
        {
          "name": "activity_test",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXdFbcOTudAd",
          "next": {
            "success": "PBXI6Nh9fepmT",
            "failure": "hangup"
          }
        },
        {
          "name": "version_test1",
          "value": "<#list app.version_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX9TKVy8ikrV",
          "next": {
            "success": "PBXnxCF9coWMp",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{version_test1}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXnxCF9coWMp",
          "next": {
            "success": "PBXEyMQcXDowt",
            "failure": "PBXULeullcLgv"
          }
        },
        {
          "name": "version_test2",
          "value": "<#if app.version_tables??><#list app.version_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list></#if>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXktC2lGKMpi",
          "next": {
            "success": "PBXNi89UqyZGq",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{version_test2}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXNi89UqyZGq",
          "next": {
            "success": "PBXVQFbe7rKEd",
            "failure": "PBXawzGhKKnIi"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXaMbDGLadmn",
          "next": {
            "success": "PBXaXmAhsvsnO",
            "failure": "PBXdFbcOTudAd"
          }
        },
        {
          "name": "a1",
          "value": " <#compress><#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>   UPDATE <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name}  <#assign kv = \"\">SET <#list request.body as key,value> <#if key!=\"id\"  && key!=\"where\">  <#if value=='NULL'>  <#assign kv=kv+ key +'='+value?replace(\"'\",\"''\")+','> <#else><#assign kv=kv+ key +\"='\"+value?replace(\"'\",\"''\")+\"',\"> </#if> </#if></#list> ${kv?keep_before_last(\",\")}    where <#if request.body.id??>id in (${request.body.id})</#if>  <#if request.body.id?? && request.body.where??> and</#if>  <#if request.body.where??> ${request.body.where} </#if>     <#if check==1> <#if request.body.id?? || request.body.where??> and</#if> domain_id=${domain_id}</#if></#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXaXmAhsvsnO",
          "next": {
            "success": "PBXskxVAy7twT",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXskxVAy7twT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141424",
          "type": "execute-workflows",
          "id": "PBXT1FtiicLUB",
          "next": {
            "success": "PBX9TKVy8ikrV",
            "failure": "PBX2ShQ51HwfD"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141428",
          "type": "execute-workflows",
          "id": "PBXEyMQcXDowt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "141428",
          "type": "execute-workflows",
          "id": "PBXVQFbe7rKEd",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXSTvRDBuQWR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "app",
          "if_type": "value",
          "variable1": "{{app_tables}}",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX1uKwmOcaOK",
          "next": {
            "success": "PBX4i620NBx3x",
            "failure": "PBXAyuFVcxqhv"
          }
        },
        {
          "name": "app_tables",
          "value": "<#list app.tablename?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXTyKaE9eUF1",
          "next": {
            "success": "PBX1uKwmOcaOK",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "condition",
          "if_type": "value",
          "variable1": "<#if request.body.id?? || request.body.where??>1</#if>",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBX4i620NBx3x",
          "next": {
            "success": "PBXaMbDGLadmn",
            "failure": "PBXAyuFVcxqhv"
          }
        },
        {
          "name": "update failed",
          "value": "Failed at update",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXKLe7TPbUrx",
          "next": {
            "success": "PBX5EEKRKhB1G",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update failed",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5EEKRKhB1G",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "a3",
          "value": " <#compress><#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>   UPDATE ${request.path.table_name}  <#assign kv = \"\">SET <#list request.body as key,value> <#if key!=\"id\"  && key!=\"where\">  <#if value=='NULL'>  <#assign kv=kv+ key +'='+value?replace(\"'\",\"''\")+','> <#else><#assign kv=kv+ key +\"='\"+value?replace(\"'\",\"''\")+\"',\"> </#if> </#if></#list> ${kv?keep_before_last(\",\")}    where <#if request.body.id??>id in (${request.body.id})</#if>  <#if request.body.id?? && request.body.where??> and</#if>  <#if request.body.where??> ${request.body.where} </#if>     <#if check==1> <#if request.body.id?? || request.body.where??> and</#if> ${app.id_type}=${domain_id}</#if></#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXuEkWwvFfMJ",
          "next": {
            "success": "PBXqqPlexkFWV",
            "failure": "PBXqqPlexkFWV"
          }
        },
        {
          "variable_name": "a3",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXqqPlexkFWV",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "failed1",
          "value": "Failed at act execute",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX2ShQ51HwfD",
          "next": {
            "success": "PBXOmn8RoR8k6",
            "failure": "hangup"
          }
        },
        {
          "name": "pass",
          "value": "pass at act execute",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWL4SVp7NBE",
          "next": {
            "success": "PBX6wkR7DRKNM",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX6wkR7DRKNM",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "failed1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXOmn8RoR8k6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "ver_fail",
          "value": "Failed at ver execute",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXULeullcLgv",
          "next": {
            "success": "PBXtdfZZbf0P0",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "ver_fail",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXtdfZZbf0P0",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142154,
      "name": "update_bulk",
      "trigger": "rest",
      "expression": "/multi/{table_name}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXyqRioiSFds"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "select  concat('{',group_concat(concat('\"',column_name,'\":\"0\"')),'}')  json from information_schema.columns where table_name = '${request.path.table_name}'  and column_name in('tenant_id','domain_id');",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBX0JHUpAtrAJ",
          "next": {
            "success": "hangup",
            "failure": "PBXM3eFECGawD"
          }
        },
        {
          "variable_name": "output2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXMJSPNEs8Uq",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXM3eFECGawD",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> update <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name} set <#assign u=\"\" id=\"\" c=\"\" w=\"\" v1=\"#$vk$#=if(#$uk$#,'#$vv$#',#$vk$#)\" data=\"\"> <#list request.body.data as i> <#assign c=\"\" data=\"\"> <#list i as k,v>  <#if k?lower_case=='id'><#assign c+= \" ${k}='${v}' and\" id=\"${k}\" w+='${v},'> <#else> <#assign data +=v1?replace('#$vv$#',v)?replace('#$vk$#',k)+','> </#if>  </#list>  <#assign temp=\"${c?keep_before_last('and')}\" data=data?replace('#$uk$#','${temp}')> ${data?keep_before_last(',')}<#sep>,</#sep> </#list> where ${id} in(${w?keep_before_last(',')}) <#if check==1>and domain_id = ${domain_id} </#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "output1",
          "type": "sql-update",
          "id": "PBXanBUI3Qf5v",
          "next": {
            "success": "PBXAN85RwylMW",
            "failure": "PBXklzLXEkn7I"
          }
        },
        {
          "name": "output2",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> update <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name} set <#assign u=\"\" id=\"\" c=\"\" w=\"\" v1=\"#$vk$#=if(#$uk$#,'#$vv$#',#$vk$#)\" data=\"\"> <#list request.body.data as i> <#assign c=\"\" data=\"\"> <#list i as k,v>  <#if k?lower_case=='id'><#assign c+= \" ${k}='${v}' and\" id=\"${k}\" w+='${v},'> <#else> <#assign data +=v1?replace('#$vv$#',v)?replace('#$vk$#',k)+','> </#if>  </#list>  <#assign temp=\"${c?keep_before_last('and')}\" data=data?replace('#$uk$#','${temp}')> ${data?keep_before_last(',')}<#sep>,</#sep> </#list> where ${id} in(${w?keep_before_last(',')}) <#if check==1>and domain_id = ${domain_id} </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZUTh6kUzHl",
          "next": {
            "success": "PBXMJSPNEs8Uq",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXklzLXEkn7I",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXyqRioiSFds",
          "next": {
            "success": "PBXZUTh6kUzHl",
            "failure": "PBXg3XGh68iXR"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "bulk_update_activity",
          "type": "execute-workflows",
          "id": "PBXSoG2snfqre",
          "next": {
            "success": "PBXQuUpw3qzno",
            "failure": "hangup"
          }
        },
        {
          "name": "activity_test",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXg3XGh68iXR",
          "next": {
            "success": "PBXSytNkVTpZu",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "<#if app.activity??><#assign act=app.activity?eval><#if act['${request.path.table_name}']??>1<#else>0</#if><#else>0</#if>",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXSytNkVTpZu",
          "next": {
            "success": "PBXSoG2snfqre",
            "failure": "PBXanBUI3Qf5v"
          }
        },
        {
          "name": "output1",
          "value": "success",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXAN85RwylMW",
          "next": {
            "success": "PBXxlFIpK7xO8",
            "failure": "hangup"
          }
        },
        {
          "name": "version_test1",
          "value": "<#list app.version_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXQuUpw3qzno",
          "next": {
            "success": "PBXKHzDXOW0OA",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{version_test1}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXKHzDXOW0OA",
          "next": {
            "success": "PBXMdMT2o4hZR",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "version_bulk_update",
          "type": "execute-workflows",
          "id": "PBXMdMT2o4hZR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{version_test2}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXxlFIpK7xO8",
          "next": {
            "success": "PBXwqNt6uKh7N",
            "failure": "PBXzKyxTwD7O7"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "version_bulk_update",
          "type": "execute-workflows",
          "id": "PBXwqNt6uKh7N",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXzKyxTwD7O7",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142152,
      "name": "multi_delete",
      "trigger": "rest",
      "expression": "/multi",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXDLqmXPvEbH"
          }
        },
        {
          "name": "joins_preview",
          "value": "<#compress> Delete <#list request.body.data.table_name as t1> <#list t1?values as t2> ${t2}  </#list><#sep>, </#sep></#list>  from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>     <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>`${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`     <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if>      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1> </#if>  <#if request.body.data.where?? && c==1> and ${request.body.data.where}   </#if> <#if request.body.data.where?? && c==0> where ${request.body.data.where} </#if>      </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXPyTK6I4gyV",
          "next": {
            "success": "PBXuOZ2qEBuVl",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins_preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXuOZ2qEBuVl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXx8aK3d9Gl2",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "join_delete",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXL0T3sUoHc1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXDLqmXPvEbH",
          "next": {
            "success": "PBXPyTK6I4gyV",
            "failure": "PBXU5i9lTBrPc"
          }
        },
        {
          "name": "joins2",
          "value": "Delete Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZLZ4KR6g14",
          "next": {
            "success": "PBXNbPvOwhxCK",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNbPvOwhxCK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> Delete\r\n<#list request.body.data.table_name as t1>\r\n<#list t1?values as t2> ${t2} \r\n</#list><#sep>, </#sep></#list>\r\n from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>     <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>`${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`     <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if>      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1> </#if>  <#if request.body.data.where?? && c==1> and ${request.body.data.where}   </#if> <#if request.body.data.where?? && c==0> where ${request.body.data.where} </#if>      </#compress>",
          "value_type": "ftl",
          "output_variable": "join_delete",
          "type": "sql-delete",
          "id": "PBXU5i9lTBrPc",
          "next": {
            "success": "PBXL0T3sUoHc1",
            "failure": "PBXZLZ4KR6g14"
          }
        },
        {
          "name": "joins3",
          "value": "<#compress> Delete from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>     <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`     <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`${app.id_type}`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.tables[0]?keys[0]} ${request.body.data.tables[0]?values[0]} </#if>      <#assign c=0> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??> where  `${request.body.data.tables[0]? values[0]}`.`${app.id_type}` =${domain_id} <#assign c=1> </#if>  <#if request.body.data.where?? && c==1> and ${request.body.data.where}   </#if> <#if request.body.data.where?? && c==0> where ${request.body.data.where} </#if>      </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXp0cQg0NLV",
          "next": {
            "success": "PBXCBtxD4LfwQ",
            "failure": "PBXCBtxD4LfwQ"
          }
        },
        {
          "variable_name": "joins3",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCBtxD4LfwQ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142153,
      "name": "read_single",
      "trigger": "rest",
      "expression": "/{table_name}/{entity_id}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXGVmJKy5Vm6"
          }
        },
        {
          "variable_name": "read1",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXeD9UdfxK6F",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "read3",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from <#if testreferer??>`${testreferer}`.</#if>`${request.path.table_name}` where id=${request.path.entity_id} <#if check==1> and  domain_id=${domain_id} </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXT0e8BzAVGP",
          "next": {
            "success": "PBXJmq52v6A6i",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "read3",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJmq52v6A6i",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXGVmJKy5Vm6",
          "next": {
            "success": "PBXT0e8BzAVGP",
            "failure": "PBXkfbAiGIGhH"
          }
        },
        {
          "variable_name": "read2",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXFNkKxUHSF6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>\r\n<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\nselect <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from <#if testreferer??>`${testreferer}`.</#if>`${request.path.table_name}`\r\nwhere id=${request.path.entity_id} <#if check==1>\r\nand  domain_id=${domain_id} </#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "read1",
          "type": "sql",
          "id": "PBXAnWmcw71QJ",
          "next": {
            "success": "PBXeD9UdfxK6F",
            "failure": "PBXTGeUaOFJZ1"
          }
        },
        {
          "name": "read2",
          "value": "Select Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXTGeUaOFJZ1",
          "next": {
            "success": "PBXFNkKxUHSF6",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBX7Te1tbFtv0",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXkfbAiGIGhH",
          "next": {
            "success": "PBXr8sEkihGyT",
            "failure": "PBXAnWmcw71QJ"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from <#if testreferer??>`${testreferer}`.</#if>`${request.path.table_name}` where id=${request.path.entity_id} <#if check==1> and  domain_id=${domain_id} </#if> </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXr8sEkihGyT",
          "next": {
            "success": "PBXX2eIaAwP54",
            "failure": "PBXeUg0TOefSy"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXeUg0TOefSy",
          "next": {
            "success": "PBXKANWinV24a",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXXx8eefpx9i",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXKANWinV24a",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXX2eIaAwP54",
          "next": {
            "success": "PBXXx8eefpx9i",
            "failure": "PBXzJHECit6fv"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXzJHECit6fv",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142156,
      "name": "insert_select",
      "trigger": "rest",
      "expression": "/insert_select",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXmHKuh4MnsA"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>  <#assign a = ''>  insert into ${request.body.destination.table_name}(${request.body.destination.fields}) <#assign o=' '> <#assign z=' '> SELECT ${request.body.source.fields} FROM  <#list request.body.source.table_name as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.source.join??> <#list request.body.source.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value> <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.source.table_name as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.source.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.source.table_name as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> <#list request.body.source.table_name as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#if z==' 1' || request.body.source.where??> <#assign a+=\" where\"> <#if z==' 1'> <#assign a+=o> <#if request.body.source.where??> <#assign a+=\" and\"> </#if> </#if> <#if request.body.source.where??> <#assign a+=\" \"+request.body.source.where> </#if> </#if>  <#if request.body.source.group_by??><#assign a += \" group by \" + request.body.source.group_by +\" \"> </#if> <#if request.body.source.having??><#assign a += \" having \" + request.body.source.having +\" \"> </#if> <#if request.body.source.order_by??><#assign a += \" order by \" + request.body.source.order_by +\" \"> </#if> <#if request.body.source.order_by_type??><#assign a += request.body.source.order_by_type></#if><#if request.body.source.limit??><#assign a += \" limit \" + request.body.source.limit+\" \"> </#if> <#if request.body.source.offset??><#assign a += \" offset \" + request.body.source.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql-insert",
          "id": "PBXA0XQJ7JSPq",
          "next": {
            "success": "PBXyC8h30naf5",
            "failure": "PBXeU4wKHmH2U"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXyC8h30naf5",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBX04VPJLQ39o",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXmHKuh4MnsA",
          "next": {
            "success": "PBXXDVSgvt8Um",
            "failure": "PBXAqK2QFTyS6"
          }
        },
        {
          "name": "output",
          "value": "<#compress>  <#assign a = ''>  insert into ${request.body.destination.table_name}(${request.body.destination.fields}) <#assign o=' '> <#assign z=' '> SELECT ${request.body.source.fields} FROM  <#list request.body.source.table_name as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.source.join??> <#list request.body.source.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value> <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.source.table_name as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.source.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.source.table_name as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> <#list request.body.source.table_name as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#if z==' 1' || request.body.source.where??> <#assign a+=\" where\"> <#if z==' 1'> <#assign a+=o> <#if request.body.source.where??> <#assign a+=\" and\"> </#if> </#if> <#if request.body.source.where??> <#assign a+=\" \"+request.body.source.where> </#if> </#if>  <#if request.body.source.group_by??><#assign a += \" group by \" + request.body.source.group_by +\" \"> </#if> <#if request.body.source.having??><#assign a += \" having \" + request.body.source.having +\" \"> </#if> <#if request.body.source.order_by??><#assign a += \" order by \" + request.body.source.order_by +\" \"> </#if> <#if request.body.source.order_by_type??><#assign a += request.body.source.order_by_type></#if><#if request.body.source.limit??><#assign a += \" limit \" + request.body.source.limit+\" \"> </#if> <#if request.body.source.offset??><#assign a += \" offset \" + request.body.source.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXrx0RTSuqEH",
          "next": {
            "success": "PBX1JvhnKutbp",
            "failure": "PBXUaRhWS1srX"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXXDVSgvt8Um",
          "next": {
            "success": "PBXrx0RTSuqEH",
            "failure": "PBXA0XQJ7JSPq"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBX1JvhnKutbp",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output1",
          "value": "inserted",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOS3FGuyolM",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output1",
          "value": "Failed ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXeU4wKHmH2U",
          "next": {
            "success": "PBX04VPJLQ39o",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXUaRhWS1srX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result_set",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXAqK2QFTyS6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142157,
      "name": "tagtesting",
      "trigger": "rest",
      "expression": "/tagtesting/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXZcD7cgImPD"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select * from `${app.schema}`.`${request.path.table_name}`",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXZcD7cgImPD",
          "next": {
            "success": "PBXXLvXGMGwH3",
            "failure": "PBXE0xpACZuXI"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXXLvXGMGwH3",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "op",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlz6ruGV7Mx",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "op",
          "value": "select * from `${app.schema}`.`${request.path.table_name}`",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXE0xpACZuXI",
          "next": {
            "success": "PBXlz6ruGV7Mx",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142158,
      "name": "select",
      "trigger": "rest",
      "expression": "/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX0sAdBbM9sl"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>  <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from `${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> <#if request.params.limit??> limit ${request.params.limit}<#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.params.offset??> offset ${request.params.offset} </#if>   </#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBX7Akg8VVnwF",
          "next": {
            "success": "PBXk2AJRN5tvE",
            "failure": "PBXky7eRoCZxA"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNJXXTZxTrS",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "select",
          "value": "<#compress>  <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from `${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> <#if request.params.limit??> limit ${request.params.limit}<#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.params.offset??> offset ${request.params.offset} </#if>   </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXy4O2h0DyJm",
          "next": {
            "success": "PBXrMKL2TxRH0",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXrMKL2TxRH0",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "select2",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXsik8Ayzulv",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "check_c",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkTQpMn3vAW",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXCFWIn7or2O",
          "next": {
            "success": "PBXy4O2h0DyJm",
            "failure": "PBXB2PdEdBTWa"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXB2PdEdBTWa",
          "next": {
            "success": "PBXZvmdMuXp9Q",
            "failure": "PBX7Akg8VVnwF"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress>  <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from <#if testreferer??>`${testreferer}`.</#if>`${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> <#if request.params.limit??> limit ${request.params.limit}<#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.params.offset??> offset ${request.params.offset} </#if>   </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "exp",
          "type": "sql-s3-export",
          "id": "PBXZvmdMuXp9Q",
          "next": {
            "success": "PBXIeqPJJg8pq",
            "failure": "PBXJvV9CPVrmo"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX0XM6L51i9C",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "exp",
          "value": "export failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXJvV9CPVrmo",
          "next": {
            "success": "PBXv7N1OQBdZu",
            "failure": "PBXlbu0BqigtC"
          }
        },
        {
          "variable_name": "exp",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXv7N1OQBdZu",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "c",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX3RanITK9fS",
          "next": {
            "success": "PBXTibZB3v84g",
            "failure": "PBXNJXXTZxTrS"
          }
        },
        {
          "output_variable": "app",
          "if_type": "value",
          "variable1": "{{app_tables}}",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXALcKElGRmP",
          "next": {
            "success": "PBXCFWIn7or2O",
            "failure": "PBXsik8Ayzulv"
          }
        },
        {
          "name": "select2",
          "value": " {\"count\" :\" ${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXTibZB3v84g",
          "next": {
            "success": "PBXO00capqqeI",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXO00capqqeI",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "app_tables",
          "value": "<#list app.tablename?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX0sAdBbM9sl",
          "next": {
            "success": "PBXALcKElGRmP",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXIeqPJJg8pq",
          "next": {
            "success": "PBX0XM6L51i9C",
            "failure": "PBX2MgvnhM9M1"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX2MgvnhM9M1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "failed",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXLLmD4BZ8OC",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "<#if request.params.c?? && request.params.c=='true'> 1 <#else> 0 </#if>",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXk2AJRN5tvE",
          "next": {
            "success": "PBX0ohairJV5R",
            "failure": "PBX3RanITK9fS"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select Results.`count`,<#if request.params.fields??> ${request.params.fields} <#else> `${request.path.table_name}`.*  </#if> from `${request.path.table_name}`    LEFT JOIN (select count(*) as `count` from (SELECT id AS Totals from `${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> ) as a ) Results ON 1 = 1 <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> <#if request.params.limit??> limit ${request.params.limit}<#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.params.offset??> offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "output_c",
          "type": "sql",
          "id": "PBXCLxl4m11o8",
          "next": {
            "success": "PBXgWVlebn3Uc",
            "failure": "PBX3n0mbX7s4H"
          }
        },
        {
          "variable_name": "exp",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlbu0BqigtC",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "exp12",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select Results.`count`,<#if request.params.fields??> ${request.params.fields} <#else> `${request.path.table_name}`.*  </#if> from `${request.path.table_name}`    LEFT JOIN (select count(*) as `count` from (SELECT id AS Totals from `${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> ) as a ) Results ON 1 = 1 <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> <#if request.params.order_by??> order by ${request.params.order_by} </#if> <#if request.params.order_by_type??>  ${request.params.order_by_type} </#if> <#if request.params.limit??> limit ${request.params.limit}<#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.params.offset??> offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXx3xoTLxXVO",
          "next": {
            "success": "PBX0QwVBPem81",
            "failure": "PBX0QwVBPem81"
          }
        },
        {
          "name": "failed",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXky7eRoCZxA",
          "next": {
            "success": "PBXLLmD4BZ8OC",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output_c",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXgWVlebn3Uc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output_c",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX3n0mbX7s4H",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "exp12",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX0QwVBPem81",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "count_test",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select count(id) as `count` from `${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXggtVHh9MhD",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "check_result",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXziNtbFEvbT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select count(id) as `count` from `${request.path.table_name}` <#if check==1> where  domain_id=${domain_id} </#if> <#if check==1 &&  request.params.where??> and ${request.params.where} <#elseif request.params.where??> where ${request.params.where}</#if>    <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.path.table_name}']??> <#if check==1 || request.params.where??>  and <#else> where </#if>    ${trash['${request.path.table_name}']}=1 </#if> </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "check_c",
          "type": "sql",
          "id": "PBX0ohairJV5R",
          "next": {
            "success": "PBXu04CD9s2Ve",
            "failure": "PBXkTQpMn3vAW"
          }
        },
        {
          "json_is": "true",
          "json_name": "check_result",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "result",
              "value": "{{{output}}}"
            },
            {
              "key": "count",
              "value": "{{{check_c.[0].count}}}"
            }
          ],
          "type": "set-var-multi",
          "id": "PBXu04CD9s2Ve",
          "next": {
            "success": "PBXziNtbFEvbT",
            "failure": "PBXziNtbFEvbT"
          }
        }
      ]
    },
    {
      "id": 142162,
      "name": "joins",
      "trigger": "rest",
      "expression": "/s/joins",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXDLqmXPvEbH"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> select ${request.body.data.fields} from \r\n\r\n<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}> \r\n</#list> </#if>\r\n\r\n\r\n    <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> \r\n<#if testreferer??> `${testreferer}`.</#if>`${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   \r\n\r\n\r\n\r\n <#if app.trash??> <#assign trash=app.trash?eval> \r\n <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if>\r\n\r\n </#if>  \r\n\r\n\r\n<#if !tables_tenant['${t?keys[0]}']??> and\r\n`${t?values[0]}`.`domain_id`=${domain_id}  </#if>  \r\n\r\n\r\n</#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>    <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if> \r\n\r\n<#if app.trash??> <#assign trash=app.trash?eval> \r\n <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>\r\nand <#else> where </#if>\r\n\r\n`${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 </#if> </#if>\r\n\r\n\r\n<#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.table_name[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if> \r\n \r\n  <#assign a += request.body.data.where +\" \"> </#if> \r\n\r\n\r\n\r\n\r\n\r\n\r\n <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXhMFDmDkmJe",
          "next": {
            "success": "PBX9lHJPczlE2",
            "failure": "PBXZLZ4KR6g14"
          }
        },
        {
          "name": "joins_preview",
          "value": "<#compress> select ${request.body.data.fields} from   <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>       <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t>  <#if testreferer??> `${testreferer}`.</#if>`${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`        <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if>   </#if>     <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>     </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>    <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> and <#else> where </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 </#if> </#if>   <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.table_name[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>      <#assign a += request.body.data.where +\" \"> </#if>         <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXPyTK6I4gyV",
          "next": {
            "success": "PBXuOZ2qEBuVl",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins_preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXuOZ2qEBuVl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXx8aK3d9Gl2",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXL0T3sUoHc1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXDLqmXPvEbH",
          "next": {
            "success": "PBXPyTK6I4gyV",
            "failure": "PBXNct3Trlye0"
          }
        },
        {
          "name": "joins2",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZLZ4KR6g14",
          "next": {
            "success": "PBXNbPvOwhxCK",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNbPvOwhxCK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXNct3Trlye0",
          "next": {
            "success": "PBX2b7AUcTtgh",
            "failure": "PBXDI8yM1LvkR"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> select ${request.body.data.fields} from   <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>       <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t>  <#if testreferer??> `${testreferer}`.</#if>`${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`        <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if>   </#if>     <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>     </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>    <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if app.trash??> <#assign trash=app.trash?eval>   <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> and <#else> where </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 </#if> </#if>   <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.table_name[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>      <#assign a += request.body.data.where +\" \"> </#if>         <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBX2b7AUcTtgh",
          "next": {
            "success": "PBXIRtzGPaXhV",
            "failure": "PBXoS4R3Satpw"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXnTa9wi1z9F",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXEwnW0J7mpD",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXoS4R3Satpw",
          "next": {
            "success": "PBXEwnW0J7mpD",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.delete_id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set2",
          "type": "sql",
          "id": "PBXw4976fpDtu",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX9lHJPczlE2",
          "next": {
            "success": "PBXAS5bR2wcTQ",
            "failure": "PBXL0T3sUoHc1"
          }
        },
        {
          "name": "joins2",
          "value": "{\"count\" :\"${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXAS5bR2wcTQ",
          "next": {
            "success": "PBXSHkFiIr1Jt",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXSHkFiIr1Jt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXIRtzGPaXhV",
          "next": {
            "success": "PBXnTa9wi1z9F",
            "failure": "PBXmfcDAy8W5n"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXmfcDAy8W5n",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "c_check",
          "if_type": "value",
          "variable1": "<#if request.params.c?? && request.params.c=='true'> 1 <#else> 0 </#if>",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXDI8yM1LvkR",
          "next": {
            "success": "PBXtGdTaW6VXc",
            "failure": "PBXhMFDmDkmJe"
          }
        },
        {
          "variable_name": "c",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXrGwPO7JPOT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "c",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXcJHHAiyIJV",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> select  Results.`count`,${request.body.data.fields} from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>\r\n`${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if></#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>  LEFT JOIN (select count(*) as `count` from         (select  ${request.body.data.fields} from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}` <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if></#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>  <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>  <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> and <#else> where </#if> `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 </#if> </#if> <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.table_name[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>  <#assign a += request.body.data.where +\" \"> </#if>   <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if>  <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if>  <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if> ${a}) as a) Results on 1=1      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> and <#else> where </#if> `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 </#if> </#if>   <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.table_name[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>   </#if> <#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if>  ${a} </#compress>",
          "value_type": "ftl",
          "output_variable": "c",
          "type": "sql",
          "id": "PBXtGdTaW6VXc",
          "next": {
            "success": "PBXrGwPO7JPOT",
            "failure": "PBXcJHHAiyIJV"
          }
        },
        {
          "name": "c",
          "value": "<#compress> select  Results.`count`,${request.body.data.fields} from  <#assign tables_tenant={}> <#list 0..result_set?size-1 as i> <#assign str = result_set[i].tables > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if></#if>   <#if tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`${app.id_type}`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>  LEFT JOIN (select count(*) as `count` from     (select  ${request.body.data.fields} from  <#assign tables_tenant={}> <#list 0..result_set?size-1 as i> <#assign str = result_set[i].tables > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}` <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if></#if>   <#if tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`${app.id_type}`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>  <#assign c=0> <#if tables_tenant['${request.body.data.tables[0]?keys[0]}']??> where `${request.body.data.tables[0]? values[0]}`.`${app.id_type}` =${domain_id} <#assign c=1></#if>  <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if tables_tenant['${request.body.data.tables[0]?keys[0]}']??> and <#else> where </#if> `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 </#if> </#if> <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.tables[0]?keys[0]}']??> and <#elseif tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if><#elseif tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if>  <#assign a += request.body.data.where +\" \"> </#if>   <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if>  <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if>  <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if> <#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if>   <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if>  ${a}) as a) Results on 1=1  <#assign c=0> <#if tables_tenant['${request.body.data.tables[0]?keys[0]}']??> where `${request.body.data.tables[0]? values[0]}`.`${app.id_type}` =${domain_id} <#assign c=1></#if>   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if tables_tenant['${request.body.data.tables[0]?keys[0]}']??> and <#else> where </#if> `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 </#if> </#if>   <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.tables[0]?keys[0]}']??> and <#elseif tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if><#elseif tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if>   </#if>   ${a} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOCxVCn2qWB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "c",
          "value": "<#compress> select  Results.`count`,${request.body.data.fields} from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if></#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>  LEFT JOIN (select count(*) as `count` from         (select  ${request.body.data.fields} from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}` <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??>   and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if></#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>  <#assign c=0> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??> where `${request.body.data.tables[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>  <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??> and <#else> where </#if> `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 </#if> </#if> <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.tables[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if>  <#assign a += request.body.data.where +\" \"> </#if>   <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if>  <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if>  <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if> ${a}) as a) Results on 1=1      <#assign c=0> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??> where `${request.body.data.tables[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??> and <#else> where </#if> `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 </#if> </#if>   <#if request.body.data.where??> <#if app.trash??> <#if trash['${request.body.data.tables[0]?keys[0]}']??> and <#elseif !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if><#elseif !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>and <#else>where </#if>   </#if> <#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if>  ${a} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXGFJPZkMbW4",
          "next": {
            "success": "PBX6nzFpEPpca",
            "failure": "PBX6nzFpEPpca"
          }
        },
        {
          "variable_name": "c",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX6nzFpEPpca",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142159,
      "name": "search",
      "trigger": "rest",
      "expression": "/s",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXZNtT34HGdJ"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}> \r\n</#list> </#if>\r\n<#compress>\r\n<#list 0..request.body.table_name?size-1 as i>\r\nselect concat('{\"${request.body.table_name[i]}\"',':',\r\nconcat('[',ifnull(convert(group_concat(name) using utf8),''),']')\r\n,'}') as name from (\r\nselect  ${request.body.fields[i]} as name from <#if testreferer??> `${testreferer}`.</#if>`${request.body.table_name[i]}` where <#if !tables_tenant['${request.body.table_name[i]}']??>\r\n<#if testreferer??> `${testreferer}`.</#if>`${request.body.table_name[i]}`.`domain_id`=${domain_id} and </#if>(${request.body.where[i].search_by?\r\nreplace(',',\" like '%${request.body.search}%' or \")} like '%${request.body.search}%') <#if request.body.limit??> limit ${request.body.limit} <#elseif app.limit??> limit ${app.limit} <#else> limit 100</#if>)a\r\n<#sep> union </#sep></#list></#compress>;\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXpRRHTezF6K",
          "next": {
            "success": "PBXzH5AM9VoR5",
            "failure": "PBXVmmuPf5Es0"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXOD72vHFd2F",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "Search Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXVmmuPf5Es0",
          "next": {
            "success": "PBXnmrvR2Izmm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXnmrvR2Izmm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "condition",
          "value": "<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#compress> <#list 0..request.body.table_name?size-1 as i> select concat('{\"${request.body.table_name[i]}\"',':', concat('[',ifnull(convert(group_concat(name) using utf8),''),']') ,'}') as name from ( select  ${request.body.fields[i]} as name from <#if testreferer??> `${testreferer}`.</#if>`${request.body.table_name[i]}` where <#if !tables_tenant['${request.body.table_name[i]}']??> <#if testreferer??> `${testreferer}`.</#if>`${request.body.table_name[i]}`.`domain_id`=${domain_id} and </#if>(${request.body.where[i].search_by? replace(',',\" like '%${request.body.search}%' or \")} like '%${request.body.search}%') <#if request.body.limit??> limit ${request.body.limit} <#elseif app.limit??> limit ${app.limit} <#else> limit 100</#if>)a <#sep> union </#sep></#list></#compress>;",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXrFhlTxUWPR",
          "next": {
            "success": "PBXwcWO2HiO0L",
            "failure": "hangup"
          }
        },
        {
          "name": "result",
          "value": "[<#list output as i>${i.name}<#sep> ,${'\\n'} </#sep></#list>]",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXzH5AM9VoR5",
          "next": {
            "success": "PBXOD72vHFd2F",
            "failure": "PBXMAcBwoNL2q"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXfIphLXXP4z",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "result",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXMAcBwoNL2q",
          "next": {
            "success": "PBXfIphLXXP4z",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "condition",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXZNtT34HGdJ",
          "next": {
            "success": "PBXrFhlTxUWPR",
            "failure": "PBXJDQ61pEe9y"
          }
        },
        {
          "variable_name": "condition",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXwcWO2HiO0L",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXJDQ61pEe9y",
          "next": {
            "success": "PBXlCm8qTouZO",
            "failure": "PBXpRRHTezF6K"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#compress> <#list 0..request.body.table_name?size-1 as i> select concat('{\"${request.body.table_name[i]}\"',':', concat('[',ifnull(convert(group_concat(name) using utf8),''),']') ,'}') as name from ( select  ${request.body.fields[i]} as name from <#if testreferer??> `${testreferer}`.</#if>`${request.body.table_name[i]}` where <#if !tables_tenant['${request.body.table_name[i]}']??> <#if testreferer??> `${testreferer}`.</#if>`${request.body.table_name[i]}`.`domain_id`=${domain_id} and </#if>(${request.body.where[i].search_by? replace(',',\" like '%${request.body.search}%' or \")} like '%${request.body.search}%') <#if request.body.limit??> limit ${request.body.limit} <#elseif app.limit??> limit ${app.limit} <#else> limit 100</#if>)a <#sep> union </#sep></#list></#compress>;",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXlCm8qTouZO",
          "next": {
            "success": "PBXB1qc07eMWZ",
            "failure": "PBXdCweLyPpiW"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXdCweLyPpiW",
          "next": {
            "success": "PBXoX3mLeXHoO",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXZQ0gONEHR9",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXoX3mLeXHoO",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXB1qc07eMWZ",
          "next": {
            "success": "PBXZQ0gONEHR9",
            "failure": "PBXLLmgTNaC6X"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXLLmgTNaC6X",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142160,
      "name": "filtering with tags",
      "trigger": "rest",
      "expression": "/s/filters/tags",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXgABTBV053T"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress><#assign a = ''>\r\n<#assign o=' '>\r\n<#assign z=' '>\r\nSELECT count(tag_id) as count FROM \r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if t?index==0>\r\n<#assign a+=\" \"+key+\" \">\r\n<#assign a+=\" \"+value+\" \">\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#if request.body.data.join??>\r\n<#list request.body.data.join as k2><#list k2 as key, value>\r\n<#if key==\"table1\">\r\n<#assign a+=\" ON \"+value>\r\n<#elseif key==\"join_column1\">\r\n<#assign a+=\".\"+value>\r\n<#elseif key==\"table2\">\r\n<#assign a+=\" = \"+value> \r\n<#elseif key==\"join_column2\">\r\n<#assign a+=\".\"+value> \r\n<#assign a+=\" and\">\r\n<#list result_set as a>\r\n<#list a?values as v>\r\n<#list request.body.data.tables as t>\r\n<#list t?keys as k>\r\n<#list t?values as g>\r\n<#if v==k>\r\n<#if k2?index+1==t?index>\r\n<#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\">\r\n<#assign a+=domain_id +\" \">\r\n<#assign a+=\"and\"+\" \">\r\n</#if>\r\n</#if>\r\n</#list></#list></#list></#list></#list>\r\n<#if a?trim?ends_with(\"and\")>\r\n<#assign a=a?substring(0,a?length-4)>\r\n</#if>\r\n<#elseif key?? && key==\"join_type\">\r\n<#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter>\r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if k3?counter==t?index>\r\n<#assign a+=\" \"+key>\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#assign a+=\" \"+value>\r\n</#if></#list></#list>\r\n</#if> \r\n</#list></#list>\r\n</#if>\r\n${a} \r\nWHERE  \r\n<#assign b = ''>\r\n<#list request.body.data.tables as tab>\r\n<#list tab?keys as k>\r\n<#list tab?values as v>\r\n<#if tab?index==0> \r\n<#list result_set as rs>\r\n<#list rs?values as rsv>\r\n<#if k==rsv>\r\n<#assign z+='1'>\r\n<#assign o=o+v>\r\n<#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id>\r\n</#if>\r\n</#list></#list></#if>\r\n</#list></#list></#list>\r\n<#assign b+=o>\r\n<#if z==' 1'>\r\n<#assign b+=\" \"+\"and\"+\" \">\r\n</#if>\r\n<#assign b+=\"(\">\r\n<#list request.body.data.filters as k1><#list k1 as key, value>\r\n<#if key==\"table_name\">\r\n<#assign b+=value>\r\n<#elseif key==\"field_name\">\r\n<#assign b+=\".\"+value>\r\n<#elseif key==\"operator\">\r\n<#if value == \"EQ\"> \r\n<#assign b+=\" \"+\"=\">\r\n<#elseif value == \"NE\"> \r\n<#assign b+=\" \"+\"!=\">\r\n<#elseif value == \"GT\"> \r\n<#assign b+=\" \"+\">\">\r\n<#elseif value == \"LT\"> \r\n<#assign b+=\" \"+\"<\">\r\n<#elseif value == \"GTE\"> \r\n<#assign b+=\" \"+\">=\">\r\n<#elseif value == \"LTE\"> \r\n<#assign b+=\" \"+\"<=\">\r\n<#elseif value == \"NULL\"> \r\n<#assign b+=\" \"+\"IS NULL\">\r\n<#elseif value == \"NOTNULL\"> \r\n<#assign b+=\" \"+\"IS NOT NULL\">\r\n<#elseif value == \"BW\"> \r\n<#assign b+=\" \"+\"BETWEEN\">\r\n<#elseif value == \"NBW\"> \r\n<#assign b+=\" \"+\"NOT BETWEEN\">\r\n<#elseif value == \"LIKE\"> \r\n<#assign b+=\" \"+\"LIKE '%\">\r\n<#elseif value == \"NOTLIKE\"> \r\n<#assign b+=\" \"+\"NOT LIKE '%\">\r\n<#elseif value == \"STARTSWITH\"> \r\n<#assign b+=\" \"+\"LIKE \">\r\n<#elseif value==\"IN\">\r\n<#assign b+=\" \"+\"IN\"+\"(\">\r\n<#elseif value==\"NOTIN\">\r\n<#assign b+=\" \"+\"NOT IN\"+\"(\">\r\n</#if>\r\n<#elseif key?? && key==\"value1\">\r\n<#if k1.operator==\"LIKE\" || k1.operator==\"NOTLIKE\" || k1.operator==\"STARTSWITH\">\r\n<#assign b+=\"\"+value +\"%'\">\r\n<#elseif k1.operator==\"IN\"|| k1.operator==\"NOTIN\">\r\n<#assign b+=\"\"+value+\")\">\r\n<#elseif k1.operator=\"NULL\" || k1.operator=\"NOTNULL\">\r\n<#else>\r\n<#assign b+=\" \"+\"'\"+value+\"'\" >\r\n</#if>\r\n <#elseif (k1.operator=\"BW\"||k1.operator=\"NBW\") && key=\"value2\">\r\n  <#assign b+=\" \"+\"and\"+\" \"+\"'\"+\" \"+value+\"'\">\r\n<#elseif key?? && key==\"filter_condition\">\r\n<#assign b+=\" \"+value+\" \">\r\n</#if> \r\n</#list></#list>\r\n<#assign b+=\")\">\r\n<#assign b+=\" \"+\"group by tag_id\">\r\n<#if request.body.data.order_by??><#assign b += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign b += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign b += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign b += \" offset \" + request.body.data.offset></#if>\r\n${b}</#compress>\r\n",
          "value_type": "ftl",
          "output_variable": "tag",
          "type": "sql",
          "id": "PBXxZZo0U1D8X",
          "next": {
            "success": "PBX9TT3u0sBoP",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "filter_tag",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWDphP2pfm6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXgABTBV053T",
          "next": {
            "success": "PBXyBXlaaElXT",
            "failure": "PBXaIJ1DqKxN5"
          }
        },
        {
          "name": "result_set_fail",
          "value": "failed at retrieving table names ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXaIJ1DqKxN5",
          "next": {
            "success": "PBXWnHR0RU0Qc",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result_set_fail",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWnHR0RU0Qc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "check",
          "if_type": "value",
          "variable1": "${tag?size}",
          "comparator": "equal_to",
          "variable2": "<#list request.body.data.filters as k1> <#assign i=\"[\"+k1.value1+\"]\"> <#assign l=i?eval> ${l?size}</#list>",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBX9TT3u0sBoP",
          "next": {
            "success": "PBXlcGatoaaTm",
            "failure": "PBXsPCNPChztN"
          }
        },
        {
          "name": "c",
          "value": "  ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXsPCNPChztN",
          "next": {
            "success": "PBXZWrPXlOqEm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "c",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXZWrPXlOqEm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress><#assign a = ''>\r\n<#assign o=' '>\r\n<#assign z=' '>\r\nSELECT ${request.body.data.fields} FROM \r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if t?index==0>\r\n<#assign a+=\" \"+key+\" \">\r\n<#assign a+=\" \"+value+\" \">\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#if request.body.data.join??>\r\n<#list request.body.data.join as k2><#list k2 as key, value>\r\n<#if key==\"table1\">\r\n<#assign a+=\" ON \"+value>\r\n<#elseif key==\"join_column1\">\r\n<#assign a+=\".\"+value>\r\n<#elseif key==\"table2\">\r\n<#assign a+=\" = \"+value> \r\n<#elseif key==\"join_column2\">\r\n<#assign a+=\".\"+value> \r\n<#assign a+=\" and\">\r\n<#list result_set as a>\r\n<#list a?values as v>\r\n<#list request.body.data.tables as t>\r\n<#list t?keys as k>\r\n<#list t?values as g>\r\n<#if v==k>\r\n<#if k2?index+1==t?index>\r\n<#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\">\r\n<#assign a+=domain_id +\" \">\r\n<#assign a+=\"and\"+\" \">\r\n</#if>\r\n</#if>\r\n</#list></#list></#list></#list></#list>\r\n<#if a?trim?ends_with(\"and\")>\r\n<#assign a=a?substring(0,a?length-4)>\r\n</#if>\r\n<#elseif key?? && key==\"join_type\">\r\n<#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter>\r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if k3?counter==t?index>\r\n<#assign a+=\" \"+key>\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#assign a+=\" \"+value>\r\n</#if></#list></#list>\r\n</#if> \r\n</#list></#list>\r\n</#if>\r\n${a} \r\nWHERE  \r\n<#assign b = ''>\r\n<#list request.body.data.tables as tab>\r\n<#list tab?keys as k>\r\n<#list tab?values as v>\r\n<#if tab?index==0> \r\n<#list result_set as rs>\r\n<#list rs?values as rsv>\r\n<#if k==rsv>\r\n<#assign z+='1'>\r\n<#assign o=o+v>\r\n<#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id>\r\n</#if>\r\n</#list></#list></#if>\r\n</#list></#list></#list>\r\n<#assign b+=o>\r\n<#if z==' 1'>\r\n<#assign b+=\" \"+\"and\"+\" \">\r\n</#if>\r\n<#assign b+=\"(\">\r\n<#list request.body.data.filters as k1><#list k1 as key, value>\r\n<#if key==\"table_name\">\r\n<#assign b+=value>\r\n<#elseif key==\"field_name\">\r\n<#assign b+=\".\"+value>\r\n<#elseif key==\"operator\">\r\n<#if value == \"EQ\"> \r\n<#assign b+=\" \"+\"=\">\r\n<#elseif value == \"NE\"> \r\n<#assign b+=\" \"+\"!=\">\r\n<#elseif value == \"GT\"> \r\n<#assign b+=\" \"+\">\">\r\n<#elseif value == \"LT\"> \r\n<#assign b+=\" \"+\"<\">\r\n<#elseif value == \"GTE\"> \r\n<#assign b+=\" \"+\">=\">\r\n<#elseif value == \"LTE\"> \r\n<#assign b+=\" \"+\"<=\">\r\n<#elseif value == \"NULL\"> \r\n<#assign b+=\" \"+\"IS NULL\">\r\n<#elseif value == \"NOTNULL\"> \r\n<#assign b+=\" \"+\"IS NOT NULL\">\r\n<#elseif value == \"BW\"> \r\n<#assign b+=\" \"+\"BETWEEN\">\r\n<#elseif value == \"NBW\"> \r\n<#assign b+=\" \"+\"NOT BETWEEN\">\r\n<#elseif value == \"LIKE\"> \r\n<#assign b+=\" \"+\"LIKE '%\">\r\n<#elseif value == \"NOTLIKE\"> \r\n<#assign b+=\" \"+\"NOT LIKE '%\">\r\n<#elseif value == \"STARTSWITH\"> \r\n<#assign b+=\" \"+\"LIKE \">\r\n<#elseif value==\"IN\">\r\n<#assign b+=\" \"+\"IN\"+\"(\">\r\n<#elseif value==\"NOTIN\">\r\n<#assign b+=\" \"+\"NOT IN\"+\"(\">\r\n</#if>\r\n<#elseif key?? && key==\"value1\">\r\n<#if k1.operator==\"LIKE\" || k1.operator==\"NOTLIKE\" || k1.operator==\"STARTSWITH\">\r\n<#assign b+=\"\"+value +\"%'\">\r\n<#elseif k1.operator==\"IN\"|| k1.operator==\"NOTIN\">\r\n<#assign b+=\"\"+value+\")\">\r\n<#elseif k1.operator=\"NULL\" || k1.operator=\"NOTNULL\">\r\n<#else>\r\n<#assign b+=\" \"+\"'\"+value+\"'\" >\r\n</#if>\r\n <#elseif (k1.operator=\"BW\"||k1.operator=\"NBW\") && key=\"value2\">\r\n  <#assign b+=\" \"+\"and\"+\" \"+\"'\"+\" \"+value+\"'\">\r\n<#elseif key?? && key==\"filter_condition\">\r\n<#assign b+=\" \"+value+\" \">\r\n</#if> \r\n</#list></#list>\r\n<#assign b+=\")\">\r\n<#if request.body.data.order_by??><#assign b += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign b += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign b += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign b += \" offset \" + request.body.data.offset></#if>\r\n${b}</#compress>",
          "value_type": "ftl",
          "output_variable": "filter_tag",
          "type": "sql",
          "id": "PBXlcGatoaaTm",
          "next": {
            "success": "PBXWDphP2pfm6",
            "failure": "PBXxhTwmLlOqM"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXyBXlaaElXT",
          "next": {
            "success": "PBX86XItW5NZL",
            "failure": "PBXblDfi0qqEp"
          }
        },
        {
          "name": "query",
          "value": "  <#compress><#assign a = ''> <#assign o=' '> <#assign z=' '> SELECT ${request.body.data.fields} FROM  <#list request.body.data.tables as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.data.join??> <#list request.body.data.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value>  <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.data.tables as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.data.tables as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> ${a}  WHERE   <#assign b = ''> <#list request.body.data.tables as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#assign b+=o> <#if z==' 1'> <#assign b+=\" \"+\"and\"+\" \"> </#if> <#assign b+=\"(\"> <#list request.body.data.filters as k1><#list k1 as key, value> <#if key==\"table_name\"> <#assign b+=value> <#elseif key==\"field_name\"> <#assign b+=\".\"+value> <#elseif key==\"operator\"> <#if value == \"EQ\">  <#assign b+=\" \"+\"=\"> <#elseif value == \"NE\">  <#assign b+=\" \"+\"!=\"> <#elseif value == \"GT\">  <#assign b+=\" \"+\">\"> <#elseif value == \"LT\">  <#assign b+=\" \"+\"<\"> <#elseif value == \"GTE\">  <#assign b+=\" \"+\">=\"> <#elseif value == \"LTE\">  <#assign b+=\" \"+\"<=\"> <#elseif value == \"NULL\">  <#assign b+=\" \"+\"IS NULL\"> <#elseif value == \"NOTNULL\">  <#assign b+=\" \"+\"IS NOT NULL\"> <#elseif value == \"BW\">  <#assign b+=\" \"+\"BETWEEN\"> <#elseif value == \"NBW\">  <#assign b+=\" \"+\"NOT BETWEEN\"> <#elseif value == \"LIKE\">  <#assign b+=\" \"+\"LIKE '%\"> <#elseif value == \"NOTLIKE\">  <#assign b+=\" \"+\"NOT LIKE '%\"> <#elseif value == \"STARTSWITH\">  <#assign b+=\" \"+\"LIKE \"> <#elseif value==\"IN\"> <#assign b+=\" \"+\"IN\"+\"(\"> <#elseif value==\"NOTIN\"> <#assign b+=\" \"+\"NOT IN\"+\"(\"> </#if> <#elseif key?? && key==\"value1\"> <#if k1.operator==\"LIKE\" || k1.operator==\"NOTLIKE\" || k1.operator==\"STARTSWITH\"> <#assign b+=\"\"+value +\"%'\"> <#elseif k1.operator==\"IN\"|| k1.operator==\"NOTIN\"> <#assign b+=\"\"+value+\")\"> <#elseif k1.operator=\"NULL\" || k1.operator=\"NOTNULL\"> <#else> <#assign b+=\" \"+\"'\"+value+\"'\" > </#if>  <#elseif (k1.operator=\"BW\"||k1.operator=\"NBW\") && key=\"value2\">   <#assign b+=\" \"+\"and\"+\" \"+\"'\"+\" \"+value+\"'\"> <#elseif key?? && key==\"filter_condition\"> <#assign b+=\" \"+value+\" \"> </#if>  </#list></#list> <#assign b+=\")\"> <#if request.body.data.order_by??><#assign b += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign b += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign b += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign b += \" offset \" + request.body.data.offset></#if> ${b}</#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX86XItW5NZL",
          "next": {
            "success": "PBX4zNGZ0J3a0",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "query",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX4zNGZ0J3a0",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "filters_fail",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXxhTwmLlOqM",
          "next": {
            "success": "PBXtbcD7o7ay6",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "filters_fail",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXtbcD7o7ay6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXblDfi0qqEp",
          "next": {
            "success": "PBXbER1IJzgOL",
            "failure": "PBXxZZo0U1D8X"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress><#assign a = ''> <#assign o=' '> <#assign z=' '> SELECT ${request.body.data.fields} FROM  <#list request.body.data.tables as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.data.join??> <#list request.body.data.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value>  <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.data.tables as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.data.tables as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> ${a}  WHERE   <#assign b = ''> <#list request.body.data.tables as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#assign b+=o> <#if z==' 1'> <#assign b+=\" \"+\"and\"+\" \"> </#if> <#assign b+=\"(\"> <#list request.body.data.filters as k1><#list k1 as key, value> <#if key==\"table_name\"> <#assign b+=value> <#elseif key==\"field_name\"> <#assign b+=\".\"+value> <#elseif key==\"operator\"> <#if value == \"EQ\">  <#assign b+=\" \"+\"=\"> <#elseif value == \"NE\">  <#assign b+=\" \"+\"!=\"> <#elseif value == \"GT\">  <#assign b+=\" \"+\">\"> <#elseif value == \"LT\">  <#assign b+=\" \"+\"<\"> <#elseif value == \"GTE\">  <#assign b+=\" \"+\">=\"> <#elseif value == \"LTE\">  <#assign b+=\" \"+\"<=\"> <#elseif value == \"NULL\">  <#assign b+=\" \"+\"IS NULL\"> <#elseif value == \"NOTNULL\">  <#assign b+=\" \"+\"IS NOT NULL\"> <#elseif value == \"BW\">  <#assign b+=\" \"+\"BETWEEN\"> <#elseif value == \"NBW\">  <#assign b+=\" \"+\"NOT BETWEEN\"> <#elseif value == \"LIKE\">  <#assign b+=\" \"+\"LIKE '%\"> <#elseif value == \"NOTLIKE\">  <#assign b+=\" \"+\"NOT LIKE '%\"> <#elseif value == \"STARTSWITH\">  <#assign b+=\" \"+\"LIKE \"> <#elseif value==\"IN\"> <#assign b+=\" \"+\"IN\"+\"(\"> <#elseif value==\"NOTIN\"> <#assign b+=\" \"+\"NOT IN\"+\"(\"> </#if> <#elseif key?? && key==\"value1\"> <#if k1.operator==\"LIKE\" || k1.operator==\"NOTLIKE\" || k1.operator==\"STARTSWITH\"> <#assign b+=\"\"+value +\"%'\"> <#elseif k1.operator==\"IN\"|| k1.operator==\"NOTIN\"> <#assign b+=\"\"+value+\")\"> <#elseif k1.operator=\"NULL\" || k1.operator=\"NOTNULL\"> <#else> <#assign b+=\" \"+\"'\"+value+\"'\" > </#if>  <#elseif (k1.operator=\"BW\"||k1.operator=\"NBW\") && key=\"value2\">   <#assign b+=\" \"+\"and\"+\" \"+\"'\"+\" \"+value+\"'\"> <#elseif key?? && key==\"filter_condition\"> <#assign b+=\" \"+value+\" \"> </#if>  </#list></#list> <#assign b+=\")\"> <#if request.body.data.order_by??><#assign b += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign b += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign b += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign b += \" offset \" + request.body.data.offset></#if> ${b}</#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXbER1IJzgOL",
          "next": {
            "success": "PBXGBL5TFqcWM",
            "failure": "PBXHTHZeSoXG1"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXHTHZeSoXG1",
          "next": {
            "success": "PBXexBV1m4U1D",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXKBoIEoTX2k",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXexBV1m4U1D",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXGBL5TFqcWM",
          "next": {
            "success": "PBXKBoIEoTX2k",
            "failure": "PBXkacUXVsqM4"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkacUXVsqM4",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142161,
      "name": "read_function",
      "trigger": "rest",
      "expression": "/aggregate/{table_name}/{aggregate}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXg9lQCOyGN3"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> select ${request.path.aggregate}(${request.params.aggregate_field})<#if request.params.fields??> ,${request.params.fields} </#if> from    <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}<#if check==1> where domain_id=${domain_id}</#if><#if request.params.where??> <#if check==1> and <#else> where </#if> ${request.params.where} </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if><#if request.params.order_by??> order by ${request.params.order_by} </#if><#if request.params.order_by_type??> ${request.params.order_by_type} </#if><#if request.params.limit??> limit ${request.params.limit} </#if><#if request.params.offset??> offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "select",
          "type": "sql",
          "id": "PBXil8Tzp8pCK",
          "next": {
            "success": "PBXpkE42lBscB",
            "failure": "PBXvwF72enkwc"
          }
        },
        {
          "name": "select",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXvwF72enkwc",
          "next": {
            "success": "PBXcM8WhM1oZ5",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXpkE42lBscB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXcM8WhM1oZ5",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXg9lQCOyGN3",
          "next": {
            "success": "PBXWCDATFekTa",
            "failure": "PBXt6bDWThJCv"
          }
        },
        {
          "name": "a",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> select ${request.path.aggregate}(${request.params.aggregate_field})<#if request.params.fields??> ,${request.params.fields} </#if> from    <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}<#if check==1> where domain_id=${domain_id}</#if><#if request.params.where??> <#if check==1> and <#else> where </#if> ${request.params.where} </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if><#if request.params.order_by??> order by ${request.params.order_by} </#if><#if request.params.order_by_type??> ${request.params.order_by_type} </#if><#if request.params.limit??> limit ${request.params.limit} </#if><#if request.params.offset??> offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWCDATFekTa",
          "next": {
            "success": "PBXWMbu1T3Ltn",
            "failure": "PBXeqdaAUzFGH"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWMbu1T3Ltn",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXeqdaAUzFGH",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXt6bDWThJCv",
          "next": {
            "success": "PBXkUGsPMO5Lh",
            "failure": "PBXil8Tzp8pCK"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> select ${request.path.aggregate}(${request.params.aggregate_field})<#if request.params.fields??> ,${request.params.fields} </#if> from    <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}<#if check==1> where domain_id=${domain_id}</#if><#if request.params.where??> <#if check==1> and <#else> where </#if> ${request.params.where} </#if> <#if request.params.group_by??> group by ${request.params.group_by} </#if><#if request.params.having??> having ${request.params.having} </#if><#if request.params.order_by??> order by ${request.params.order_by} </#if><#if request.params.order_by_type??> ${request.params.order_by_type} </#if><#if request.params.limit??> limit ${request.params.limit} </#if><#if request.params.offset??> offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXkUGsPMO5Lh",
          "next": {
            "success": "PBXmex7CGJwsC",
            "failure": "PBXXrNWb09s0e"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXrNWb09s0e",
          "next": {
            "success": "PBX2sHRJ5cVSS",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXAhSkLI6hZ8",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX2sHRJ5cVSS",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXmex7CGJwsC",
          "next": {
            "success": "PBXAhSkLI6hZ8",
            "failure": "PBXMOqXS2KTqH"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXMOqXS2KTqH",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "testreferer",
          "value": "{{{request}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXybwWHpI2W",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\nvar test = map.request;\r\nvar result = test.headers.Referer.split('//')[1].split('.')[0];\r\nmap.put('testreferer',result);\r\n}\r\n\r\ncatch(e){\r\nmap.put('error',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBXT9VqIhinmK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\nvar test = map.request;\r\nvar result = test.headers.Referer.split('//')[1].split('.')[0];\r\nmap.put('testreferer',result);\r\n}\r\n\r\ncatch(e){\r\nmap.put('error',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBX6tTlN73IJm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142163,
      "name": "filters",
      "trigger": "rest",
      "expression": "/s/filters",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXkSbNO4QLpt"
          }
        },
        {
          "name": "filter",
          "value": "Filters failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX2XFFJ7Jbfr",
          "next": {
            "success": "PBX6Dma6AHbTZ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXOi8RxETzXB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "filter",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX6Dma6AHbTZ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXkSbNO4QLpt",
          "next": {
            "success": "PBXtCgx0ney9A",
            "failure": "PBXnmo13DUblg"
          }
        },
        {
          "name": "filter1",
          "value": "<#compress> select ${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if> <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if>  where <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c} <#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if></#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXtCgx0ney9A",
          "next": {
            "success": "PBXnzOlkXnqcF",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "filter1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXnzOlkXnqcF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBX11yQRHkV1d",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "check_c",
          "value": "<#compress> SELECT Results.`count`,${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.tables[0]?keys[0]} ${request.body.data.tables[0]?values[0]} </#if> LEFT JOIN  (select count(*) as `count` from ( SELECT ${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.tables[0]?keys[0]} ${request.body.data.tables[0]?values[0]} </#if> where <#assign c=0> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>  `${request.body.data.tables[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c}  </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if> ) as a ) Results ON 1 = 1 where <#assign c=0> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>  `${request.body.data.tables[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c}  </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if></#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXgXOMNhXT6F",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "check_c",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXwBz7VXCz6q",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXnmo13DUblg",
          "next": {
            "success": "PBXeO7FFI7UcN",
            "failure": "PBXCaeeITSas8"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> select ${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if> <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if>  where <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c} <#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if></#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXeO7FFI7UcN",
          "next": {
            "success": "PBXAWDzTrdwEy",
            "failure": "PBXMBmFpO55Pn"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXMBmFpO55Pn",
          "next": {
            "success": "PBXJvcUT7xLrP",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXDfycglAUBy",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJvcUT7xLrP",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.delete_id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set2",
          "type": "sql",
          "id": "PBXiCyMmFI40u",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "filter",
          "value": "{\"count\":\"${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXfhGaaVhIi6",
          "next": {
            "success": "PBXfFCBz7xoaE",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "filter",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXfFCBz7xoaE",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXSp5gE36vEq",
          "next": {
            "success": "PBXfhGaaVhIi6",
            "failure": "PBXOi8RxETzXB"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXAWDzTrdwEy",
          "next": {
            "success": "PBXDfycglAUBy",
            "failure": "PBXbO0kTBJtDT"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXbO0kTBJtDT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> select ${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>\r\n`${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if> <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if>  where <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c} <#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if></#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXy4dQdhrdZG",
          "next": {
            "success": "PBXSp5gE36vEq",
            "failure": "PBX2XFFJ7Jbfr"
          }
        },
        {
          "output_variable": "c_check",
          "if_type": "value",
          "variable1": "<#if request.params.c?? && request.params.c=='true'> 1 <#else> 0 </#if>",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXCaeeITSas8",
          "next": {
            "success": "PBXvLcwWkuUng",
            "failure": "PBXy4dQdhrdZG"
          }
        },
        {
          "variable_name": "check_c",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXycz71MAFGK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "check_c",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5XqeIVI3KG",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress> SELECT Results.`count`,${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>`${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if> LEFT JOIN  (select count(*) as `count` from ( SELECT ${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.table_name as t> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if>   <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.table_name[0]?keys[0]} ${request.body.data.table_name[0]?values[0]} </#if> where <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> ) as a ) Results ON 1 = 1 where <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.table_name[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.table_name[0]?values[0]}`.`${trash['${request.body.data.table_name[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c} <#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if></#compress>",
          "value_type": "ftl",
          "output_variable": "check_c",
          "type": "sql",
          "id": "PBXvLcwWkuUng",
          "next": {
            "success": "PBXqJnTFsvWiF",
            "failure": "PBXwBz7VXCz6q"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXHQzIWv909v",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "export",
          "value": "<#compress> select ${request.body.data.fields} from <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if>   <#assign a = ''> <#if request.body.data.join??> <#assign i=0 join = request.body.data.join>  <#list request.body.data.tables as t> `${t?keys[0]}` `${t?values[0]}`<#rt>  <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${t?keys[0]}']??> and `${t?values[0]}`.`${trash['${t?keys[0]}']}`=1 </#if> </#if> <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`${app.id_type}`=${domain_id} </#if> </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list> <#else> ${request.body.data.tables[0]?keys[0]} ${request.body.data.tables[0]?values[0]} </#if>  where <#assign c=0> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>  `${request.body.data.tables[0]? values[0]}`.`${app.id_type}` =${domain_id} and <#assign c=1> </#if>   ${a}   <#if app.trash??> <#assign trash=app.trash?eval>  <#if trash['${request.body.data.tables[0]?keys[0]}']??> <#if !tables_tenant['${request.body.data.tables[0]?keys[0]}']??>  <#else>  </#if>  `${request.body.data.tables[0]?values[0]}`.`${trash['${request.body.data.tables[0]?keys[0]}']}`=1 and </#if> </#if>     <#if request.body.data.filters??>     <#assign values={\"EQ\":\"= '#$@'\",\"NE\":\"!= '#$@'\",\"IN\":\"IN(#$@)\",\"NOT IN\":\"NOT IN(#$@)\",\"LT\":\"< '#$@'\", \"LTE\":\"<= '#$@'\",\"GT\":\"> '#$@'\",\"GTE\":\">='#$@'\",\"BW\":\"between '#$@'\", \"NBW\":\"not between '#$@'\",\"NULL\":\"is null\",\"NOTNULL\":\"is not null\",\"STARTSWITH\":\"like '#$@'%\", \"NOTSTARTSWITH\":\"not like '#$@%'\",\"LIKE\":\"like '%#$@%'\",\"NOTLIKE\":\"not like '%#$@%'\", \"ES\":\"like '%#$@'\",\"DES\":\"not like '%#$@'\",\"EMPTY\":\"=' '\",\"NOTEMPTY\":\"!=' '\"}>   <#list request.body.data.filters as i>  <#if values['${i.operator}']??> ${i.filter_condition} ${i.table_name}.${i.field_name} ${values['${i.operator}']?replace(\"#$@\",i.value1)} <#if i.operator = 'BW' || i.operator = 'NBW'> and ${i.value2}</#if> </#if> </#list> </#if>   <#if request.body.data.jsonsearch??>  <#assign jvalue={\"KEY\":\" '#$@'\",\"SEARCH_VALUE\":\" '#$@'\",\"SEARCH_COLUMN\":\" '#$@'\",\"SEARCH_KEY\":\" '#$@'\"}>  <#list request.body.data.jsonsearch as j> <#if jvalue['${j.operator}']??> <#if j.operator='KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') is not null </#if> <#if j.operator='SEARCH_VALUE'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all','${j.value1}') is not null </#if> <#if j.operator='SEARCH_COLUMN'> ${j.filter_condition} json_search(${j.table_name}.${j.field_name},'all',${j.value1}) is not null </#if> <#if j.operator='SEARCH_KEY'> ${j.filter_condition} json_extract(${j.table_name}.${j.field_name},'$**.${j.value1}') LIKE '%${j.value2}%'</#if></#if> </#list> </#if>   <#if request.body.data.regex??>  <#if request.body.data.filters?? || request.body.data.jsonsearch??>  ${request.body.data.filter_condition} <#else> </#if>  ${request.body.data.regex}  <#else>   </#if>   <#if request.body.data.order_by??>order by ${request.body.data.order_by} </#if> <#if request.body.data.order_by_type??> <#if request.body.data.order_by_type=\"asc\" || request.body.data.order_by_type=\"desc\"> ${request.body.data.order_by_type} </#if></#if> <#if request.body.data.limit??> <#assign li=request.body.data.limit?number> limit ${li?long?c} <#elseif app.limit??> limit ${app.limit}<#else> limit 100 </#if> <#if request.body.data.offset??> <#assign offset=request.body.data.offset?number> offset ${offset?long?c} </#if></#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXmlqxFKyOlS",
          "next": {
            "success": "PBXHQzIWv909v",
            "failure": "PBXHQzIWv909v"
          }
        },
        {
          "variable_name": "check_c",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXqJnTFsvWiF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142164,
      "name": "retrieve_tag",
      "trigger": "rest",
      "expression": "/tags/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXGOCNyDIU6r"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>\r\n<#assign table=request.path.table_name+\"_tag\">\r\n<#assign table2=request.path.table_name>\r\n<#assign check=1> <#assign check2=1> <#assign tag_check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==table> <#assign check=0></#if>\r\n<#if v1==table2>\r\n<#assign check2=0>\r\n</#if>\r\n<#if v1==\"tag\">\r\n<#assign tag_check=0>\r\n</#if> \r\n</#list></#if>\r\n\r\n\r\n\r\nselect \r\n<#if request.params.fields??>\r\n<#list request.params.fields?split(\",\") as row>\r\n<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.${row}<#sep>, </#sep>\r\n</#list>\r\n<#else>  <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.*\r\n</#if>\r\nfrom <#if testreferer??> `${testreferer}`.</#if>`tag`\r\nJOIN <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_tag` on <#if testreferer??> `${testreferer}`.</#if>\r\ntag.id=<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_tag`.tag_id \r\n<#if tag_check==1>\r\nand <#if testreferer??> `${testreferer}`.</#if>`tag`.domain_id=${domain_id} \r\n</#if>\r\n<#if check==1>\r\nand <#if testreferer??> `${testreferer}`.</#if>\r\n<#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_tag`.domain_id=${domain_id}\r\n</#if>\r\nJOIN <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}` on <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_tag`.${request.path.table_name}_id=<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.id\r\n<#if check2==1>\r\nand <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.domain_id=${domain_id}\r\n</#if>\r\nwhere <#if testreferer??> `${testreferer}`.</#if>`tag`.name='${request.params.tag_name}'   \r\n<#if request.params.where??>and${request.params.where} </#if>\r\n\r\n<#if request.params.group_by??>group by ${request.params.group_by} </#if>\r\n<#if request.params.having??>having ${request.params.having} </#if>\r\n<#if request.params.order_by??>order by ${request.params.order_by} </#if>\r\n<#if request.params.order_by_type??> ${request.params.order_by_type} </#if>\r\n<#if request.params.limit??>limit ${request.params.limit} </#if>\r\n<#if request.params.offset??>offset ${request.params.offset} </#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXrJEQma70I7",
          "next": {
            "success": "PBXmA7rw3HnQ3",
            "failure": "PBXHV5ufctzwB"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXM7nvPcscq2",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "retrieve",
          "value": "<#compress> <#assign table=request.path.table_name+\"_tag\"> <#assign table2=request.path.table_name> <#assign check=1> <#assign check2=1> <#assign tag_check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==table> <#assign check=0></#if> <#if v1==table2> <#assign check2=0> </#if> <#if v1==\"tag\"> <#assign tag_check=0> </#if>  </#list></#if>    select  <#if request.params.fields??> <#list request.params.fields?split(\",\") as row> <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.${row}<#sep>, </#sep> </#list> <#else>  <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.* </#if> from <#if testreferer??> `${testreferer}`.</#if>`tag` JOIN <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_tag` on <#if testreferer??> `${testreferer}`.</#if> tag.id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_tag`.tag_id  <#if tag_check==1> and <#if testreferer??> `${testreferer}`.</#if>`tag`.domain_id=${domain_id}  </#if> <#if check==1> and <#if testreferer??> `${testreferer}`.</#if> <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_tag`.domain_id=${domain_id} </#if> JOIN <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}` on <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_tag`.${request.path.table_name}_id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.id <#if check2==1> and <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.domain_id=${domain_id} </#if> where <#if testreferer??> `${testreferer}`.</#if>`tag`.name='${request.params.tag_name}'    <#if request.params.where??>and${request.params.where} </#if>  <#if request.params.group_by??>group by ${request.params.group_by} </#if> <#if request.params.having??>having ${request.params.having} </#if> <#if request.params.order_by??>order by ${request.params.order_by} </#if> <#if request.params.order_by_type??> ${request.params.order_by_type} </#if> <#if request.params.limit??>limit ${request.params.limit} </#if> <#if request.params.offset??>offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXRAt5EafdlN",
          "next": {
            "success": "PBXUmeAVCodVy",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "retrieve",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXUmeAVCodVy",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXGOCNyDIU6r",
          "next": {
            "success": "PBXRAt5EafdlN",
            "failure": "PBXQKJcOiTvch"
          }
        },
        {
          "name": "retrieve2",
          "value": "Select Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXHV5ufctzwB",
          "next": {
            "success": "PBXlGOo8CQ9ZF",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "retrieve2",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlGOo8CQ9ZF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXQKJcOiTvch",
          "next": {
            "success": "PBXJuqQNUA4ET",
            "failure": "PBXrJEQma70I7"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>  select  <#if request.params.fields??> <#list request.params.fields?split(\",\") as row> ${request.path.table_name}.${row}<#sep>, </#sep> </#list> <#else> ${request.path.table_name}.* </#if> from tag JOIN ${request.path.table_name}_tag on tag.id=${request.path.table_name}_tag.tag_id <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==tag>  and tag.${app.id_type}=${domain_id} </#if> <#if v1==${request.path.table_name}_tag>  and ${request.path.table_name}_tag.${app.id_type}=${domain_id}</#if></#list></#if>  JOIN ${request.path.table_name} on ${request.path.table_name}_tag.${request.path.table_name}_id=${request.path.table_name}.id <#if check==1> and ${request.path.table_name}.${app.id_type}=${domain_id} </#if> where tag.name='${request.params.tag_name}'  <#if request.params.where??>and${request.params.where} </#if>  <#if request.params.group_by??>group by ${request.params.group_by} </#if> <#if request.params.having??>having ${request.params.having} </#if> <#if request.params.order_by??>order by ${request.params.order_by} </#if> <#if request.params.order_by_type??> ${request.params.order_by_type} </#if> <#if request.params.limit??>limit ${request.params.limit} </#if> <#if request.params.offset??>offset ${request.params.offset} </#if> </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXJuqQNUA4ET",
          "next": {
            "success": "PBX2RhGJsVsiX",
            "failure": "PBXXeUI2UoP7E"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXeUI2UoP7E",
          "next": {
            "success": "PBXx1Z9qAtEoO",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXn4I5JrguUT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXx1Z9qAtEoO",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXmA7rw3HnQ3",
          "next": {
            "success": "PBXWsFhg1f5Pw",
            "failure": "PBXM7nvPcscq2"
          }
        },
        {
          "name": "retrieve2",
          "value": "{\"count\":\"${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWsFhg1f5Pw",
          "next": {
            "success": "PBX12SKBpDy0l",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "retrieve2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX12SKBpDy0l",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBX2RhGJsVsiX",
          "next": {
            "success": "PBXn4I5JrguUT",
            "failure": "PBXN6TterW3Za"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXN6TterW3Za",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142165,
      "name": "insert_tag_entity",
      "trigger": "rest",
      "expression": "/tags/{table_name}/{entity_id}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXd9F1iQrrTV"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign table=request.path.table_name+\"_tag\"> \r\n<#assign check=1>\r\n<#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> \r\n<#if v1==table>\r\n<#assign check=0>\r\n</#if></#list></#if>\r\n\r\nINSERT INTO <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_tag`(tag_id,  \r\n<#if check==1>\r\ndomain_id,created_by,</#if>\r\n\r\n <#list request.body?keys as k> ${request.body?keys?join(\", \")}</#list>) values\r\n\r\n ( <#list request.body?keys as k> <#list request.body[k] as v> <#if v?counter == request.body[k]?size>${request.path.entity_id},<#if check==1>\r\n\r\n\r\n ${domain_id},${user_id},</#if>'${v}')<#else>${request.path.entity_id},<#if check==1>  ${domain_id},${user_id},</#if> '${v}'),(</#if> </#list> </#list>",
          "value_type": "ftl",
          "output_variable": "insert",
          "type": "sql-insert",
          "id": "PBXsGEeBJTm8u",
          "next": {
            "success": "PBXi09me3hmXU",
            "failure": "PBXyS1EMTtZxu"
          }
        },
        {
          "name": "insert2",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXyS1EMTtZxu",
          "next": {
            "success": "PBXa38H9R4TeG",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert2",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXa38H9R4TeG",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "activity_test",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXND89OpFPZm",
          "next": {
            "success": "PBXDy0PTXaLig",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "{{activity_test}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXDy0PTXaLig",
          "next": {
            "success": "PBXk3oKDaUJpu",
            "failure": "PBXIRAFbsm7ik"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "88557",
          "type": "execute-workflows",
          "id": "PBXryRqeUlNOl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXd9F1iQrrTV",
          "next": {
            "success": "PBXQp88MCui5n",
            "failure": "PBXsGEeBJTm8u"
          }
        },
        {
          "name": "tag_preview",
          "value": "<#assign table=request.path.table_name+\"_tag\">  <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1>  <#if v1==table> <#assign check=0> </#if></#list></#if>  INSERT INTO <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_tag`(tag_id,   <#if check==1> domain_id,created_by,</#if>   <#list request.body?keys as k> ${request.body?keys?join(\", \")}</#list>) values   ( <#list request.body?keys as k> <#list request.body[k] as v> <#if v?counter == request.body[k]?size>${request.path.entity_id},<#if check==1>    ${domain_id},${user_id},</#if>'${v}')<#else>${request.path.entity_id},<#if check==1>  ${domain_id},${user_id},</#if> '${v}'),(</#if> </#list> </#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXQp88MCui5n",
          "next": {
            "success": "PBXyCbtaciw8w",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "tag_preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXyCbtaciw8w",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';\r\n",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXJwrhMPdxNh",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert_keys",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXIRAFbsm7ik",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "test",
          "value": "1",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXk3oKDaUJpu",
          "next": {
            "success": "PBXryRqeUlNOl",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXi09me3hmXU",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142166,
      "name": "delete_tag_entity",
      "trigger": "rest",
      "expression": "/tags/{table_name}/{entity_id}",
      "method": "DELETE",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXnHMphQTvUr"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign table=request.path.table_name+\"_tag\">\r\n<#assign check=1>\r\n<#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1>\r\n\r\n<#if v1==table>\r\n<#assign check=0>\r\n</#if></#list></#if>\r\n\r\n<#compress>\r\ndelete from <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_tag` where tag_id = ${request.path.entity_id} and ${request.path.table_name}_id in (${request.params.ids}) \r\n\r\n<#if check==1>\r\nand <#if testreferer??> `${testreferer}`.</#if>\r\n\r\n`${request.path.table_name}_tag`.domain_id=${domain_id} \r\n\r\n</#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "delete",
          "type": "sql-delete",
          "id": "PBXT8IvDwgzAO",
          "next": {
            "success": "PBXtt3qTovE4g",
            "failure": "PBXNma2fJ6wOK"
          }
        },
        {
          "variable_name": "delete",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXtt3qTovE4g",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "del2",
          "value": "Tag delete failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXNma2fJ6wOK",
          "next": {
            "success": "PBX8vHxIMNkqK",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "del2",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBX8vHxIMNkqK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "{{activity_test}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXwgth3n2LNf",
          "next": {
            "success": "PBXNWbQuUkkf9",
            "failure": "hangup"
          }
        },
        {
          "name": "activity_test",
          "value": "<#compress> <#assign i=0> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=i+1> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX91QmSxcHXq",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "88576",
          "type": "execute-workflows",
          "id": "PBXe3J1ix9c2d",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXnHMphQTvUr",
          "next": {
            "success": "PBXtk0HzDo3xr",
            "failure": "PBXT8IvDwgzAO"
          }
        },
        {
          "name": "tag_delete_preview",
          "value": "<#assign table=request.path.table_name+\"_tag\"> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1>  <#if v1==table> <#assign check=0> </#if></#list></#if>  <#compress> delete from <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_tag` where tag_id = ${request.path.entity_id} and ${request.path.table_name}_id in (${request.params.ids})   <#if check==1> and <#if testreferer??> `${testreferer}`.</#if>  `${request.path.table_name}_tag`.domain_id=${domain_id}   </#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXtk0HzDo3xr",
          "next": {
            "success": "PBXlPFKMFmmGX",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "tag_delete_preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlPFKMFmmGX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "\r\nSELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXboCZJtTtFd",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "test",
          "value": "1",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXNWbQuUkkf9",
          "next": {
            "success": "PBXe3J1ix9c2d",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142168,
      "name": "activity_retrieve",
      "trigger": "rest",
      "expression": "/activity/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXHsVTEEqkMo"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select * from `activity` where activity -> '$.${request.path.table_name}<#if request.params.id??>.id'= \"${request.params.id}\"<#else>' is not null</#if>  ",
          "value_type": "ftl",
          "output_variable": "select",
          "type": "sql",
          "id": "PBXHsVTEEqkMo",
          "next": {
            "success": "PBXaV4oELzeJh",
            "failure": "PBXqJGyABmDiS"
          }
        },
        {
          "name": "select1",
          "value": "Select Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXqJGyABmDiS",
          "next": {
            "success": "PBX9dEAFqSIvc",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXaV4oELzeJh",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX9dEAFqSIvc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX8AqduApwOX",
          "next": {
            "success": "PBX8dXMHfgp1O",
            "failure": "hangup"
          }
        },
        {
          "name": "activity_retrieve_preview",
          "value": "select  <#if request.params.fields??><#list request.params.fields?split(\",\") as row> activity.${row}<#sep>, </#sep> </#list><#else> activity.* </#if> from activity LEFT JOIN ${request.path.table_name} on activity.entity_id=${request.path.table_name}.id where activity.entity='${request.path.table_name}'<#if request.params.id??> and activity.entity_id in (${request.params.id}) </#if> and (${request.path.table_name}.${app.id_type}=${domain_id} or ${request.path.table_name}.${app.id_type} is null) and activity.${app.id_type}=${domain_id} <#if request.params.where??> and ${request.params.where} </#if> <#if request.params.group_by??>group by ${request.params.group_by} </#if> <#if request.params.having??>having ${request.params.having} </#if> <#if request.params.order_by??>order by ${request.params.order_by} </#if> <#if request.params.order_by_type??> ${request.params.order_by_type} </#if> <#if request.params.limit??>limit ${request.params.limit} </#if> <#if request.params.offset??>offset ${request.params.offset} </#if>  ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX8dXMHfgp1O",
          "next": {
            "success": "PBXgA0kONWugV",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "activity_retrieve_preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXgA0kONWugV",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142167,
      "name": "activity_insert",
      "trigger": "rest",
      "expression": "/activity/{table_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXHJDFU1a7QU"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXzAmqqq729E",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign app1= app['activity']?eval columns='' select='concat('+\"'{\"  tn=request.path.table_name pn=tn joins='' entity=''>\r\n<#if app1['${request.path.table_name}']??>\r\n<#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if>\r\n<#if app1['${request.path.table_name}'].fk??> \r\n\r\n\r\n\r\n<#list app1['${request.path.table_name}'].fk as k,v>\r\n <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if>\r\n</#list> \r\n</#if>\r\n</#if>\r\n\r\n\r\n<#list columns?split(',') as k>\r\n<#if k?contains(':')>   <#assign  tn=k?keep_after('{')?keep_before_last(':')  select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'>\r\n<#if tn != pn>\r\n<#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>\r\n\r\n<#elseif k?contains('{')>\r\n<#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'>\r\n<#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'> \r\n<#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if>\r\n</#list>\r\nINSERT INTO <#if testreferer??> `${testreferer}`.</#if>`activity`\r\n(\r\n`entity`,\r\n`entity_id`,\r\n`sub_entity_id`,\r\n`sub_entity`,\r\n`action`,\r\n`activity`,\r\n`created_by`,\r\ndomain_id)\r\n\r\n\r\nselect <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','insert' ,\r\n\r\nconcat('{<#list columns?split('},')as k>\r\n\r\n\r\n\"${k?keep_after('{')?keep_before(':')}\":{\r\n<#list k?keep_after(':')?split(',') as l>\r\n\"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,</#sep>\r\n</#list>\r\n}<#sep>,</#sep>\r\n</#list>}')\r\n,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from ${pn}\r\n${joins}\r\nwhere ${pn}.id >= ${insert.GENERATED_KEY?long?c} limit ${request.body.data?size} \r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "activity",
          "type": "sql-insert",
          "id": "PBXHJDFU1a7QU",
          "next": {
            "success": "hangup",
            "failure": "PBXwpwur6GG9m"
          }
        },
        {
          "variable_name": "activity",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXoGeTzTpbWm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "activity",
          "value": "<#compress> <#assign app1= app['activity']?eval columns='' select='concat('+\"'{\"  tn=request.path.table_name pn=tn joins='' entity=''> <#if app1['${request.path.table_name}']??> <#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if> <#if app1['${request.path.table_name}'].fk??>     <#list app1['${request.path.table_name}'].fk as k,v>  <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if> </#list>  </#if> </#if>   <#list columns?split(',') as k> <#if k?contains(':')>   <#assign  tn=k?keep_after('{')?keep_before_last(':')  select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'> <#if tn != pn> <#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>  <#elseif k?contains('{')> <#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'> <#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'>  <#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if> </#list> INSERT INTO `activity` ( `entity`, `entity_id`, `sub_entity_id`, `action`, `activity`, `created_by`, `${app.id_type}` )   select <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}_insert' ,  concat('{<#list columns?split('},')as k>   \"${k?keep_after('{')?keep_before(':')}\":{ <#list k?keep_after(':')?split(',') as l> \"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,</#sep> </#list> }<#sep>,</#sep> </#list>}') ,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from ${pn} ${joins} where ${pn}.id >= ${insert.GENERATED_KEY} limit ${request.body.data?size}  </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXwpwur6GG9m",
          "next": {
            "success": "PBXEH90tt3tRm",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "activity",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXEH90tt3tRm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign tables_tenant={}> <#list 0..result_set?size-1 as i> <#assign str = result_set[i].tables > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}> </#list>      INSERT INTO `activity` (entity,entity_id,`action`,activity,created_by<#if tables_tenant['${request.path.table_name}']??> ,${app.id_type}</#if>,sub_entity_id)      \r\n\r\n<#if test==\"0\">   \r\n\r\nselect '${parent_table}',<#if parent_table != request.path.table_name> ${parent_table}_id <#else> id </#if>,  '${request.path.table_name}-insert',\r\n\r\n\r\n<#list app as k,v>  <#if k?keep_before(\".\") == 'columns'&& k?keep_after(\".\") == request.path.table_name>\r\n\r\n\r\n\r\nconcat( '{',<#list v?split(',') as v1> '\"${v1}\":\"',${v1},'\"<#sep>,',</#sep> </#list>}')\r\n\r\n </#if> </#list>,\r\n\r\n\r\ncreated_by<#if tables_tenant['${request.path.table_name}']??> ,${app.id_type}</#if>, <#if parent_table != request.path.table_name> id <#else> null </#if> from ${request.path.table_name} order by id desc limit ${request.body.data?size} \r\n\r\n <#else> \r\n\r\n  select '${parent_table}', ${parent_table}_id ,   concat('${request.path.table_name}','_tag-insert'),\r\n   \r\n\r\n <#list app as k,v>  <#if k?keep_before(\".\") == 'columns' && k?keep_after(\"_\") =='tag'>\r\n\r\n\r\n\r\nconcat( '{',<#list v?split(',') as v1> '\"${v1}\":\"',${v1},'\"<#sep>,',</#sep> </#list>}')\r\n\r\n </#if> </#list> ,     \r\n\r\n    ${user_id}  <#if tables_tenant['${request.path.table_name}_tag']??> , ${domain_id}     </#if>  ,    ${request.path.table_name}_tag.id    from  ${request.path.table_name}_tag    order by  ${request.path.table_name}_tag.id  desc limit    ${request.body?values[0]?size}\r\n</#if>",
          "value_type": "ftl",
          "output_variable": "activity",
          "type": "sql-insert",
          "id": "PBX9eioV4uSiq",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#if app['activity.${request.path.table_name}']??>\r\n\r\n<#assign s1=app['activity.domain_user_role']?eval s2=''>\r\n\r\nselect\r\nconcat('{', <#list s1 as k,v>'\"${k}\":{',\r\n<#list v?split(',') as i> '\"${i}\":\"', ${k}.${i},'\"<#sep>,</#sep>'  </#list>,'}<#sep>,</#sep>'\r\n   <#if k!=request.path.table_name>  <#assign s2+=\" join ${k} on ${k}.id=${request.path.table_name}.${k}_id\"> </#if>\r\n</#list>,'}') json\r\nfrom ${request.path.table_name}\r\n${s2}\r\nwhere ${request.path.table_name}.id=${GENERATED_KEY?long?c}\r\n</#if>",
          "value_type": "ftl",
          "output_variable": "act_select",
          "type": "sql",
          "id": "PBX0QptGRq9cG",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "insert",
          "value": "{\"GENERATED_KEY\":\"29\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZ46f9aOpQe",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\nINSERT INTO `activity`\r\n(\r\n`entity`,\r\n`entity_id`,\r\n`sub_entity_id`,\r\n`action`,\r\n`activity`,\r\n`created_by`,\r\n`${app.id_type}`\r\n)\r\nselect\r\n\r\n<#assign app1= app['activity']?eval columns='' select='concat('+\"'{\"  tn=request.path.table_name pn=tn joins='' entity=''>\r\n<#if app1['${request.path.table_name}']??>\r\n<#assign s1=app1['${request.path.table_name}'] columns=s1.columns>\r\n<#if app1['${request.path.table_name}'].fk??> \r\n<#list app1['${request.path.table_name}'].fk as k,v>\r\n <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if>\r\n</#list> \r\n</#if>\r\n</#if>\r\n\r\n<#list columns?split(',') as k>\r\n<#if k?contains(':')>   <#assign  tn=k?keep_after('{')?keep_before_last(':') joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id' select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'>\r\n<#elseif k?contains('{')>\r\n<#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'>\r\n<#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'> \r\n<#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if>\r\n</#list>\r\n\r\n\r\n<#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}_insert' , ${select?keep_before_last(',')}}'),<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from ${pn}\r\n${joins}\r\nwhere ${pn}.id >= ${insert.GENERATED_KEY} limit ${request.body.data?size} \r\n</#compress>\r\n",
          "value_type": "ftl",
          "output_variable": "activity",
          "type": "sql-insert",
          "id": "PBXvTWTmanIuR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "activity",
          "value": "<#compress> <#assign app1= app['activity']?eval columns='' select='concat('+\"'{\"  tn=request.path.table_name pn=tn joins='' entity=''> <#if app1['${request.path.table_name}']??> <#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if> <#if app1['${request.path.table_name}'].fk??>     <#list app1['${request.path.table_name}'].fk as k,v>  <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if> </#list>  </#if> </#if>   <#list columns?split(',') as k> <#if k?contains(':')>   <#assign  tn=k?keep_after('{')?keep_before_last(':')  select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'> <#if tn != pn> <#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>  <#elseif k?contains('{')> <#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'> <#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'>  <#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if> </#list> INSERT INTO `activity` ( `entity`, `entity_id`, `sub_entity_id`, `action`, `activity`, `created_by`, `${app.id_type}` )   select <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}_insert' ,  concat('{<#list columns?split('},')as k>   \"${k?keep_after('{')?keep_before(':')}\":{ <#list k?keep_after(':')?split(',') as l> \"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,</#sep> </#list> }<#sep>,</#sep> </#list>}') ,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from ${pn} ${joins} where ${pn}.id >= ${insert.GENERATED_KEY} limit ${request.body.data?size}  </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOzmkp3JoTo",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142169,
      "name": "activity_delete",
      "trigger": "rest",
      "expression": "/activity/{table_name}",
      "method": "DELETE",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXClafr6d9gZ"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign app1= app['activity']?eval columns='' select='concat('+\"'{\" tn=request.path.table_name pn=tn joins='' entity=''>\r\n<#if app1['${request.path.table_name}']??>\r\n<#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if>\r\n<#if app1['${request.path.table_name}'].fk??> \r\n\r\n\r\n\r\n<#list app1['${request.path.table_name}'].fk as k,v>\r\n<#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if>\r\n</#list> \r\n</#if>\r\n</#if>\r\n\r\n\r\n<#list columns?split(',') as k>\r\n<#if k?contains(':')> <#assign tn=k?keep_after('{')?keep_before_last(':') select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'>\r\n<#if tn != pn>\r\n<#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>\r\n\r\n<#elseif k?contains('{')>\r\n<#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'>\r\n<#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'> \r\n<#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if>\r\n</#list>\r\n\r\n\r\nINSERT INTO <#if testreferer??> `${testreferer}`.</#if>`activity`\r\n(\r\n`entity`,\r\n`entity_id`,\r\n`sub_entity_id`,\r\n`sub_entity`,\r\n`action`,\r\n`activity`,\r\n`created_by`,\r\ndomain_id\r\n)\r\nselect  <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','delete' ,\r\nconcat('{ \"${pn}\":{<#list app1['${pn}'].columns?split(',') as cl> \"${cl}\":\"',`${pn}`.`${cl}`,'\"<#sep>,</#sep></#list>}'<#if app1['${pn}'].fk??>, <#list app1['${pn}'].fk as k,v>  ',\"${k?replace('entity:','')}\": {<#list v?split(',') as cl> \r\n\"${cl}\":\"',`${k?replace('entity:','')}`.`${cl}`,'\"<#sep>,</#sep>\r\n</#list>}' </#list>,'}'  </#if>),<#if user_id??>'${user_id}'<#else> null </#if>\r\n\r\n\r\n,'${domain_id}' from ${pn}\r\n${joins}\r\nwhere <#if request.params.id??> ${pn}.id in (${request.params.id}) <#if request.params.where??> and ${request.params.where} </#if> <#else> ${request.params.where}  </#if>   <#assign re=output[0].json?eval> <#if domain_id?? && re['${request.path.table_name}']??> and ${pn}.domain_id= ${domain_id}</#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-insert",
          "id": "PBXdibeyF2eRJ",
          "next": {
            "success": "PBXZR5px4fiSh",
            "failure": "PBX8ZJnPPO21G"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "\r\n<#assign tables_tenant={}>\r\n<#list 0..result_set?size-1 as i>\r\n<#assign str = result_set[i].tables >\r\n<#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>\r\n</#list>\r\n\r\ndelete from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name} where <#if tables_tenant['${request.path.table_name}']??>\r\ndomain_id=${domain_id} and </#if>\r\n\r\n<#if request.params.id??>id in (${request.params.id})</#if>\r\n\r\n<#if request.params.id?? &&  request.params.w??> and</#if>\r\n\r\n<#if request.params.w??> ${request.params.w} </#if> ",
          "value_type": "ftl",
          "output_variable": "res",
          "type": "sql-delete",
          "id": "PBXZR5px4fiSh",
          "next": {
            "success": "PBXNpbTi2L5dH",
            "failure": "PBXfcP6ZinOIv"
          }
        },
        {
          "name": "result1",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX8ZJnPPO21G",
          "next": {
            "success": "PBXFa1R401TyO",
            "failure": "hangup"
          }
        },
        {
          "name": "res",
          "value": "Delete Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXfcP6ZinOIv",
          "next": {
            "success": "PBXIL6phx9y5V",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "res",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNpbTi2L5dH",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXFa1R401TyO",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "res",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXIL6phx9y5V",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "parent_table",
          "value": "<#compress> <#assign i=\"\"> <#list app as k,v> <#if k?keep_before(\".\") == 'activity'>   <#list v?split(\",\") as v1 > <#if v1==request.path.table_name> <#assign i=k?keep_after(\".\")> </#if> </#list> </#if> </#list>  ${i} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXVsXcacmxQe",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "\r\nSELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='domain_id';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXBQJMVpB7Gv",
          "next": {
            "success": "PBXdibeyF2eRJ",
            "failure": "PBXLpQDmAyAoP"
          }
        },
        {
          "variable_name": "result1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXLpQDmAyAoP",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXiLAWhp8hMd",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select  concat('{',group_concat(concat('\"',column_name,'\":\"0\"')),'}')  json from information_schema.columns where table_name ='${request.path.table_name}'  and column_name in('tenant_id','domain_id');",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXClafr6d9gZ",
          "next": {
            "success": "PBXBQJMVpB7Gv",
            "failure": "PBXiLAWhp8hMd"
          }
        }
      ]
    },
    {
      "id": 142170,
      "name": "activity_update",
      "trigger": "rest",
      "expression": "/activity/{table_name}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXPqxGhALqB5"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXAXu6shpqq8",
          "next": {
            "success": "PBXFc4uC6pyAn",
            "failure": "PBXCfbDVzMayK"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT  concat('{',group_concat(distinct '\"',table_name,'\":\"0\"'),'}') as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set1",
          "type": "sql",
          "id": "PBXFc4uC6pyAn",
          "next": {
            "success": "hangup",
            "failure": "PBXInJoPAAnRv"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign app1= app['activity']?eval columns='' select='concat('+\"'{\" tn=request.path.table_name pn=tn joins='' entity=''>\r\n\r\n\r\n<#if app1['${request.path.table_name}']??>\r\n<#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if>\r\n<#if app1['${request.path.table_name}'].fk??> \r\n\r\n\r\n\r\n<#list app1['${request.path.table_name}'].fk as k,v>\r\n<#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if>\r\n</#list> \r\n</#if>\r\n</#if>\r\n\r\n\r\n<#list columns?split(',') as k>\r\n<#if k?contains(':')> <#assign tn=k?keep_after('{')?keep_before_last(':') select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'>\r\n<#if tn != pn>\r\n<#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>\r\n\r\n<#elseif k?contains('{')>\r\n<#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'>\r\n<#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'> \r\n<#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if>\r\n</#list>\r\n\r\n\r\nINSERT INTO <#if testreferer??> `${testreferer}`.</#if>`activity`\r\n(\r\n`entity`,\r\n`entity_id`,\r\n`sub_entity_id`,\r\n`sub_entity`,\r\n`action`,\r\n`activity`,\r\n`created_by`,\r\ndomain_id\r\n)\r\nselect <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','update' ,\r\n\r\n\r\nif(<#list app1['${pn}'].columns?split(',') as c1>\r\n${pn}.${c1} != '${request.body['${c1}']!}' <#sep> || </#sep>  </#list>, concat('{',\r\n\r\n<#if app1['${pn}'].fk??>\r\n\r\n'\"${pn}\":{',\r\n\r\n<#list app1['${pn}'].columns?split(',') as cl> \r\n\r\n<#if cl='id'> '\"id\":\"',${pn}.id ,'\"' \r\n<#else > if('${request.body['${cl}']!}' !=${pn}.${cl},concat(',\"${cl}\":{\"old_value\":\"',${pn}.${cl},'\",\"new_value\":\"${request.body['${cl}']!}\"}'),'')  </#if>  <#sep>,</#sep>  </#list>,'}', \r\n<#list app1['${request.path.table_name}'].fk as k,v> ',\"${k?replace('entity:','')}\":{', <#list v?split(',') as v1>\r\n'\"${v1}\":\"',`${k?replace('entity:','')}`.`${v1}`,'\"<#sep>,</#sep>'\r\n</#list>,'}' </#list>  ,'}' \r\n ),null)\r\n\r\n <#else>\r\n'\"${pn}\":{',\r\n<#list app1['${pn}'].columns?split(',') as cl> <#if cl='id'> '\"id\":\"',${pn}.id ,'\"' <#sep>,</#sep>\r\n<#elseif request.body['${cl}']??> if('${request.body['${cl}']!}' !=${pn}.${cl},concat(',\"${cl}\":{\"old_value\":\"',${pn}.${cl},'\",\"new_value\":\"${request.body['${cl}']!}\"}'),''),  </#if>    </#list>'}}'),null)\r\n\r\n</#if>\r\n,<#if user_id??>'${user_id}'<#else> null </#if>,<#if domain_id??>'${domain_id}'<#else>null</#if> from `${pn}`\r\n${joins}\r\nwhere <#if request.body.id??>`${pn}`.id in(${request.body.id})</#if> <#if request.body.id?? && request.body.where??> and </#if> <#if request.body.where??> ${request.body.where} </#if> \r\n</#compress>\r\n",
          "value_type": "ftl",
          "output_variable": "activity",
          "type": "sql-insert",
          "id": "PBXPqxGhALqB5",
          "next": {
            "success": "PBXpXKyrh4qvw",
            "failure": "PBXpt1rxkgHzV"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": " <#compress><#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>   UPDATE <#if testreferer??> `${testreferer}`.</#if> ${request.path.table_name}  <#assign kv = \"\">SET <#list request.body as key,value> <#if key!=\"id\"  && key!=\"where\">  <#if value=='NULL'>  <#assign kv=kv+ key +'='+value?replace(\"'\",\"''\")+','> <#else><#assign kv=kv+ key +\"='\"+value?replace(\"'\",\"''\")+\"',\"> </#if> </#if></#list> ${kv?keep_before_last(\",\")}    where <#if request.body.id??>id in (${request.body.id})</#if>  <#if request.body.id?? && request.body.where??> and</#if>  <#if request.body.where??> ${request.body.where} </#if>     <#if check==1> <#if request.body.id?? || request.body.where??> and</#if> domain_id=${domain_id}</#if></#compress>\r\n",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBXpXKyrh4qvw",
          "next": {
            "success": "PBX6WwAwIOCQl",
            "failure": "PBXD0f5gx63FD"
          }
        },
        {
          "name": "Failed",
          "value": "Failed result_set",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXCfbDVzMayK",
          "next": {
            "success": "PBXMIW2LxoemM",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "Failed",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXMIW2LxoemM",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "Failed",
          "value": "Failed result_set1",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXx29E7SAmfi",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result_set1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXInJoPAAnRv",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "Failed",
          "value": "<#compress> <#assign app1= app['activity']?eval columns='' select='concat('+\"'{\" tn=request.path.table_name pn=tn joins='' entity=''>   <#if app1['${request.path.table_name}']??> <#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if> <#if app1['${request.path.table_name}'].fk??>     <#list app1['${request.path.table_name}'].fk as k,v> <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if> </#list>  </#if> </#if>   <#list columns?split(',') as k> <#if k?contains(':')> <#assign tn=k?keep_after('{')?keep_before_last(':') select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'> <#if tn != pn> <#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>  <#elseif k?contains('{')> <#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'> <#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'>  <#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if> </#list>   INSERT INTO `activity` ( `entity`, `entity_id`, `sub_entity_id`, `sub_entity`, `action`, `activity`, `created_by`, `${app.id_type}` ) select <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','update' ,   if(<#list app1['${pn}'].columns?split(',') as c1> ${pn}.${c1} != '${request.body['${c1}']!}' <#sep> || </#sep>  </#list>, concat('{',  <#if app1['${pn}'].fk??>  '\"${pn}\":{',  <#list app1['${pn}'].columns?split(',') as cl>   <#if cl='id'> '\"id\":\"',${pn}.id ,'\"'  <#else > if('${request.body['${cl}']}' !=${pn}.${cl},concat(',\"${cl}\":{\"old_value\":\"',${pn}.${cl},'\",\"new_value\":\"${request.body['${cl}']}\"}'),'')  </#if>  <#sep>,</#sep>  </#list>,'}',    <#list app1['${request.path.table_name}'].fk as k,v> ',\"${k?replace('entity:','')}\":{', <#list v?split(',') as v1>   '\"${v1}\":\"',`${k?replace('entity:','')}`.`${v1}`,'\"<#sep>,</#sep>'   </#list>,'}' </#list>  ,'}'     ),null)            <#else> '\"${pn}\":{', <#list app1['${pn}'].columns?split(',') as cl> <#if cl='id'> '\"id\":\"',${pn}.id ,'\"'  <#else > if('${request.body['${cl}']}' !=${pn}.${cl},concat(',\"${cl}\":{\"old_value\":\"',${pn}.${cl},'\",\"new_value\":\"${request.body['${cl}']}\"}'),'')  </#if>  <#sep>,</#sep>  </#list>,'}}'),null)    </#if> ,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from `${pn}` ${joins} where <#if request.body.id??>`${pn}`.id in(${request.body.id})</#if> <#if request.body.id?? && request.body.where??> and </#if> <#if request.body.where??> ${request.body.where} </#if>  </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXKFsG3gnA5U",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "Failed1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXeCCimrqRi7",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "Failed1",
          "value": "<#compress> <#assign app1= app['activity']?eval columns='' select='concat('+\"'{\" tn=request.path.table_name pn=tn joins='' entity=''>   <#if app1['${request.path.table_name}']??> <#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if> <#if app1['${request.path.table_name}'].fk??>     <#list app1['${request.path.table_name}'].fk as k,v> <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if> </#list>  </#if> </#if>   <#list columns?split(',') as k> <#if k?contains(':')> <#assign tn=k?keep_after('{')?keep_before_last(':') select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'> <#if tn != pn> <#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>  <#elseif k?contains('{')> <#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'> <#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'>  <#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if> </#list>   INSERT INTO `activity` ( `entity`, `entity_id`, `sub_entity_id`, `sub_entity`, `action`, `activity`, `created_by`, `${app.id_type}` ) select <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','update' ,   if(<#list app1['${pn}'].columns?split(',') as c1> ${pn}.${c1} != '${request.body['${c1}']!}' <#sep> || </#sep>  </#list>, concat('{',  <#if app1['${pn}'].fk??>  '\"${pn}\":{',  <#list app1['${pn}'].columns?split(',') as cl>   <#if cl='id'> '\"id\":\"',${pn}.id ,'\"'  <#else > if('${request.body['${cl}']}' !=${pn}.${cl},concat(',\"${cl}\":{\"old_value\":\"',${pn}.${cl},'\",\"new_value\":\"${request.body['${cl}']}\"}'),'')  </#if>  <#sep>,</#sep>  </#list>,'}',  <#list app1['${request.path.table_name}'].fk as k,v> ',\"${k?replace('entity:','')}\":{', <#list v?split(',') as v1> '\"${v1}\":\"',`${k?replace('entity:','')}`.`${v1}`,'\"<#sep>,</#sep>' </#list>,'}' </#list>  ,'}'   ),null)   <#else> '\"${pn}\":{', <#list app1['${pn}'].columns?split(',') as cl> <#if cl='id'> '\"id\":\"',${pn}.id ,'\"'  <#else > if('${request.body['${cl}']}' !=${pn}.${cl},concat(',\"${cl}\":{\"old_value\":\"',${pn}.${cl},'\",\"new_value\":\"${request.body['${cl}']}\"}'),'')  </#if>  <#sep>,</#sep>  </#list>,'}}'),null)  </#if> ,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from `${pn}` ${joins} where <#if request.body.id??>`${pn}`.id in(${request.body.id})</#if> <#if request.body.id?? && request.body.where??> and </#if> <#if request.body.where??> ${request.body.where} </#if>  </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOVLrAVyay6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXD0f5gx63FD",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX6WwAwIOCQl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "activity",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXpt1rxkgHzV",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "activity1",
          "value": " <#compress><#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>   UPDATE ${request.path.table_name}  <#assign kv = \"\">SET <#list request.body as key,value> <#if key!=\"id\"  && key!=\"where\">  <#if value=='NULL'>  <#assign kv=kv+ key +'='+value?replace(\"'\",\"''\")+','> <#else><#assign kv=kv+ key +\"='\"+value?replace(\"'\",\"''\")+\"',\"> </#if> </#if></#list> ${kv?keep_before_last(\",\")}    where <#if request.body.id??>id in (${request.body.id})</#if>  <#if request.body.id?? && request.body.where??> and</#if>  <#if request.body.where??> ${request.body.where} </#if>     <#if check==1> <#if request.body.id?? || request.body.where??> and</#if> ${app.id_type}=${domain_id}</#if></#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWDJhy98FB5",
          "next": {
            "success": "PBXExQ9HFzDtE",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "activity1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXExQ9HFzDtE",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142171,
      "name": "bulk_update_activity",
      "trigger": "rest",
      "expression": "/multi/activity/{table_name}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX89bydLfS55"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXtu0nxw1sT3",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign app1= app['activity']?eval columns='' select='concat('+\"'{\" tn=request.path.table_name pn=tn joins='' entity=''>\r\n<#if app1['${request.path.table_name}']??>\r\n<#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if>\r\n<#if app1['${request.path.table_name}'].fk??> \r\n\r\n\r\n\r\n<#list app1['${request.path.table_name}'].fk as k,v>\r\n<#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if>\r\n</#list> \r\n</#if>\r\n</#if>\r\n\r\n\r\n<#list columns?split(',') as k>\r\n<#if k?contains(':')> <#assign tn=k?keep_after('{')?keep_before_last(':') select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'>\r\n<#if tn != pn>\r\n<#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>\r\n\r\n<#elseif k?contains('{')>\r\n<#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'>\r\n<#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'> \r\n<#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if>\r\n</#list>\r\n\r\n\r\nINSERT INTO `activity`\r\n(\r\n`entity`,\r\n`entity_id`,\r\n`sub_entity_id`,\r\n`sub_entity`,\r\n`action`,\r\n`activity`,\r\n`created_by`,\r\n`domain_id`\r\n)\r\nselect  <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','update' ,\r\n\r\n<#if app1['${pn}'].columns!='id'>\r\n\r\nif(<#list request.body.data as i> (<#list app1['${pn}'].columns?split(',') as k> ${pn}.${k} <#if k !='id'> !</#if>= '${i['${k}']}' <#sep>&&</#sep> </#list>)<#sep> || </#sep> </#list>\r\n\r\n\r\n,concat('{<#list columns?split('},')as k>\r\n\"${k?keep_after('{')?keep_before(':')}\":{\r\n<#list k?keep_after(':')?split(',') as l>\r\n<#if pn != k?keep_after('{')?keep_before(':')>\r\n\r\n\"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,</#sep>\r\n\r\n\r\n<#elseif l=='id'>\r\n\r\n\r\n\"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,'</#sep>\r\n\r\n<#else>\r\n<#list request.body.data as i> ,if(${pn}.id=${i.id!} && ${pn}.${l?replace('}','')} != '${i[\"${l?replace('}','')}\"]!}',concat(\r\n'\"${l?replace('}','')}\":{\"old_value\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\",\"new_value\":\"','${i[\"${l?replace('}','')}\"]}'),'')</#list>,'\"} <#sep>,</#sep>\r\n</#if>\r\n\r\n</#list>\r\n}<#sep>,</#sep>\r\n</#list>}'),null) <#else>null</#if>\r\n,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from ${pn}\r\n${joins}\r\nwhere ${pn}.id in (<#list request.body.data as a> ${a.id} <#sep>,</#sep> </#list>) <#assign re=output[0].json?eval> <#if domain_id?? && re['${request.path.table_name}']??> and ${pn}.domain_id= ${domain_id}</#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "activity",
          "type": "sql-insert",
          "id": "PBX9iQVp4tiVZ",
          "next": {
            "success": "PBXtAdIZbdTkQ",
            "failure": "PBX325T1NE3NM"
          }
        },
        {
          "name": "insert2",
          "value": "activity Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX325T1NE3NM",
          "next": {
            "success": "PBXnuuk1GMKsX",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXnuuk1GMKsX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> update <#if testreferer??>`${testreferer}`.</#if>${request.path.table_name} set <#assign u=\"\" id=\"\" c=\"\" w=\"\" v1=\"#$vk$#=if(#$uk$#,'#$vv$#',#$vk$#)\" data=\"\"> <#list request.body.data as i> <#assign c=\"\" data=\"\"> <#list i as k,v>  <#if k?lower_case=='id'><#assign c+= \" ${k}='${v}' and\" id=\"${k}\" w+='${v},'> <#else> <#assign data +=v1?replace('#$vv$#',v)?replace('#$vk$#',k)+','> </#if>  </#list>  <#assign temp=\"${c?keep_before_last('and')}\" data=data?replace('#$uk$#','${temp}')> ${data?keep_before_last(',')}<#sep>,</#sep> </#list> where ${id} in(${w?keep_before_last(',')}) <#if check==1>and domain_id = ${domain_id} </#if> </#compress>",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBXtAdIZbdTkQ",
          "next": {
            "success": "PBXtu0nxw1sT3",
            "failure": "PBXMBWtbTUb1J"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress>\r\n<#assign id_type_check=output[0].json>\r\n<#assign ch=id_type_check?eval>\r\n\r\nselect  id,replace(replace(replace(replace(concat('[{',\r\n<#assign u=\"\"  id=\"\" c=\"\" w=\"\" v1=\"if(ifnull(#$vk$#,'null')<>if(#$uk$#,'#$vv$#',ifnull(#$vk$#,'null')),concat('\\\"#$vk$#\\\":{','\\\"old_value\\\":\\\"',ifnull(#$vk$#,'null'),'\\\",\\\"new_value\\\":\\\"#$vv$#\\\"},'),'')\" data=\"\">\r\n<#list request.body.data as i>\r\n<#assign c=\"\" data=\"\">\r\n<#list i as k,v> \r\n<#if k?lower_case=='id'><#assign c+= \" ${k}='${v}' and\" id=\"${k}\" w+='${v},'>  <#else> <#assign data +=v1?replace('#$vv$#',v)?replace('#$vk$#',k)+','> </#if> \r\n</#list> \r\n<#assign temp=\"${c?keep_before_last('and')}\" data=data?replace('#$uk$#','${temp}')> ${data?keep_before_last(',')}<#sep>,</#sep>\r\n</#list>,'}]'),'},]','}}]'),',}}]','}]'),',}]','}]'),'[{}]','null') as json from ${request.path.table_name}\r\nwhere ${id} in(${w?keep_before_last(',')})<#if ch['${app.id_type}']??>and ${app.id_type} = ${domain_id} </#if>\r\n</#compress>\r\n",
          "value_type": "ftl",
          "output_variable": "select1",
          "type": "sql",
          "id": "PBXM95awtIT4N",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "select11",
          "value": "Failed result_set",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXCTVkFouzOT",
          "next": {
            "success": "PBXsdTTslgHHJ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select11",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXsdTTslgHHJ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "select1",
          "value": "<#compress> <#assign app1= app['activity']?eval columns='' select='concat('+\"'{\" tn=request.path.table_name pn=tn joins='' entity=''> <#if app1['${request.path.table_name}']??> <#assign s1=app1['${request.path.table_name}'] > <#if s1.columns??> <#assign columns='{${pn}:'+s1.columns+'}'> </#if> <#if app1['${request.path.table_name}'].fk??>     <#list app1['${request.path.table_name}'].fk as k,v> <#if k?contains('entity:')><#assign columns +=',{${k?keep_after_last(\"entity:\")}:'+v+'}' > <#assign entity=k?keep_after_last(\"entity:\")> <#else><#assign columns +=',{${k}:'+v+'}' > </#if> </#list>  </#if> </#if>   <#list columns?split(',') as k> <#if k?contains(':')> <#assign tn=k?keep_after('{')?keep_before_last(':') select+= '\"'+ k?keep_after('{')?keep_before_last(':')+'\":{\"'+k?keep_after_last(':')+'\":\"'+\"',ifnull(${tn}.${k?keep_after_last(':')},'null'),'\"+'\",'> <#if tn != pn> <#assign joins+=' left join ${tn} on ${pn}.${tn}_id=${tn}.id'></#if>  <#elseif k?contains('{')> <#assign select+='\"${k?keep_before_last(\"{\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('{')},'null'),'\"+'\"},'> <#elseif k?contains('}')> <#assign select+='\"${k?keep_before_last(\"}\")}\":\"'+\"',ifnull(${tn}.${k?keep_before_last('}')},'null'),'\"+'\"},'>  <#else> <#assign select+='\"${k}\":\"'+\"',ifnull(${tn}.${k},'null'),'\"+'\",'> </#if> </#list>   INSERT INTO `activity` ( `entity`, `entity_id`, `sub_entity_id`, `sub_entity`, `action`, `activity`, `created_by`, `domain_id` ) select  <#if entity!=''> '${entity}',`${entity}`.id,`${pn}`.id<#else>'${pn}',`${pn}`.id,null </#if>,'${pn}','update' ,  <#if app1['${pn}'].columns!='id'>  if(<#list request.body.data as i> (<#list app1['${pn}'].columns?split(',') as k> ${pn}.${k} <#if k !='id'> !</#if>= '${i['${k}']}' <#sep>&&</#sep> </#list>)<#sep> || </#sep> </#list>   ,concat('{<#list columns?split('},')as k> \"${k?keep_after('{')?keep_before(':')}\":{ <#list k?keep_after(':')?split(',') as l> <#if pn != k?keep_after('{')?keep_before(':')>  \"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,</#sep>   <#elseif l=='id'>   \"${l?replace('}','')}\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\" <#sep>,'</#sep>  <#else> <#list request.body.data as i> ,if(${pn}.id=${i.id!} && ${pn}.${l?replace('}','')} != '${i[\"${l?replace('}','')}\"]!}',concat( '\"${l?replace('}','')}\":{\"old_value\":\"',ifnull(${k?keep_after('{')?keep_before(':')}.${l?replace('}','')},'null'),'\",\"new_value\":\"','${i[\"${l?replace('}','')}\"]}'),'')</#list>,'\"} <#sep>,</#sep> </#if>  </#list> }<#sep>,</#sep> </#list>}'),null) <#else>null</#if> ,<#if user_id??>'${user_id}'<#else> null </#if>,'${domain_id}' from ${pn} ${joins} where ${pn}.id in (<#list request.body.data as a> ${a.id} <#sep>,</#sep> </#list>) <#if domain_id?? && check==1> and ${pn}.domain_id= ${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX89bydLfS55",
          "next": {
            "success": "PBXfHMe2htyaq",
            "failure": "PBXJTy6dXs8ty"
          }
        },
        {
          "name": "select2",
          "value": "no matching records",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXX9qJVgRf7k",
          "next": {
            "success": "PBXuaoRxo5fFB",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXuaoRxo5fFB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "condition",
          "if_type": "value",
          "variable1": "${select1?size}",
          "comparator": "greater_than",
          "variable2": "0",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXUOf21bJ0ai",
          "next": {
            "success": "hangup",
            "failure": "PBXX9qJVgRf7k"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select  concat('{',group_concat(concat('\"',column_name,'\":\"0\"')),'}')  json from information_schema.columns where table_name = '${request.path.table_name}'  and column_name in('tenant_id','domain_id');",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXAXu6shpqq8",
          "next": {
            "success": "hangup",
            "failure": "PBX178CqDgb6B"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX178CqDgb6B",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select1",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJTy6dXs8ty",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "parent",
          "value": "parent_name",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXfskOfWH5V1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update2",
          "http_response_code": "400",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXH8LgDQk10m",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "update2",
          "value": "Update Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXMBWtbTUb1J",
          "next": {
            "success": "PBXH8LgDQk10m",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXUPMMIdHdkP",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select1",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXfHMe2htyaq",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142172,
      "name": "version_select",
      "trigger": "rest",
      "expression": "/version/{table_name}/{entity_id}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXHNCLbu26Gr"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from ${request.path.table_name}_version \r\n where ${request.path.table_name}_version.${app.id_type}=${domain_id} and ${request.path.table_name}_id=${request.path.entity_id}  order by created_time desc limit 1",
          "value_type": "ftl",
          "output_variable": "select1",
          "type": "sql",
          "id": "PBXil8Tzp8pCK",
          "next": {
            "success": "PBXpkE42lBscB",
            "failure": "PBXqHwVoB6RkF"
          }
        },
        {
          "name": "select",
          "value": "select <#if request.params.fields??> ${request.params.fields} <#else> *  </#if> from ${request.path.table_name}_version   where ${request.path.table_name}_version.${app.id_type}=${domain_id} and ${request.path.table_name}_id=${request.path.entity_id}  order by created_time desc limit 1",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXvwF72enkwc",
          "next": {
            "success": "PBXcM8WhM1oZ5",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXpkE42lBscB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXcM8WhM1oZ5",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXHNCLbu26Gr",
          "next": {
            "success": "PBXvwF72enkwc",
            "failure": "PBXil8Tzp8pCK"
          }
        },
        {
          "name": "select2",
          "value": "Select Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXqHwVoB6RkF",
          "next": {
            "success": "PBX3XWsFE4KRa",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX3XWsFE4KRa",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142173,
      "name": "version_insert",
      "trigger": "rest",
      "expression": "/version/{table_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXvG2fKcOhfe"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT group_concat(column_name) as name\r\nFROM information_schema.columns\r\nWHERE table_name = '{{request.path.table_name}}' \r\nand (COLUMN_NAME<>'created_date' and COLUMN_NAME<>'created_time');\r\n",
          "value_type": "hb",
          "output_variable": "a",
          "type": "sql",
          "id": "PBXvG2fKcOhfe",
          "next": {
            "success": "PBXhgK5bA7qiS",
            "failure": "PBXFo4Ug2eoFx"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "INSERT INTO `${request.path.table_name}_version` (${request.path.table_name}_${b})\r\n\r\n\r\nSELECT ${b} from ${request.path.table_name} where id in\r\n\r\n(<#list insert_keys as k1> <#list k1 as k2,v2> ${v2?c}  </#list> <#sep> ,</#sep>  </#list>);\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "version1",
          "type": "sql-insert",
          "id": "PBXwLfE0zEwqb",
          "next": {
            "success": "hangup",
            "failure": "PBXUT4QSzOwhL"
          }
        },
        {
          "variable_name": "version1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXE2AV5MlXZw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXIi7TreQUfk",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "version1",
          "value": "Failed ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXUT4QSzOwhL",
          "next": {
            "success": "PBXE2AV5MlXZw",
            "failure": "hangup"
          }
        },
        {
          "name": "version3",
          "value": "Failed",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXFo4Ug2eoFx",
          "next": {
            "success": "PBXBXwSo6gkkw",
            "failure": "hangup"
          }
        },
        {
          "name": "b",
          "value": "{{a.0.name}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXhgK5bA7qiS",
          "next": {
            "success": "PBXwLfE0zEwqb",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "version3",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXBXwSo6gkkw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a4",
          "if_type": "value",
          "variable1": "{{a3}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXI7dhSnyyTJ",
          "next": {
            "success": "hangup",
            "failure": "PBXIi7TreQUfk"
          }
        },
        {
          "name": "a3",
          "value": "<#list app.activity_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXLp9kULQaWB",
          "next": {
            "success": "PBXI7dhSnyyTJ",
            "failure": "hangup"
          }
        },
        {
          "name": "version3",
          "value": "Failed",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXG7zzgvxyLA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "version1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXInn8oSi6Kv",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142174,
      "name": "version_update",
      "trigger": "rest",
      "expression": "/version/{table_name}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXvG2fKcOhfe"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT group_concat(column_name) as name\r\nFROM information_schema.columns\r\nWHERE table_name = '${request.path.table_name}' \r\nand (COLUMN_NAME<>'created_date' and COLUMN_NAME<>'created_time');",
          "value_type": "ftl",
          "output_variable": "a",
          "type": "sql",
          "id": "PBXvG2fKcOhfe",
          "next": {
            "success": "PBXGqeXfVLmHI",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "insert into ${request.path.table_name}_version\r\n(${request.path.table_name}_${output})\r\nselect ${output} from ${request.path.table_name} where\r\n<#if request.body.id??>\r\nid in(<#list request.body as key, value><#if key==\"id\">${value}</#if></#list>) </#if>\r\n<#if request.body.where??>\r\nid in (<#list 0..updateid?size-1 as i>\r\n${updateid[i]?values[0]?long?c}<#sep>,</#sep></#list>) </#if>  and domain_id=${domain_id} \r\n",
          "value_type": "ftl",
          "output_variable": "version1",
          "type": "sql-insert",
          "id": "PBXwLfE0zEwqb",
          "next": {
            "success": "PBX83FAps04SF",
            "failure": "PBXUT4QSzOwhL"
          }
        },
        {
          "variable_name": "version1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXE2AV5MlXZw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "version1",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXUT4QSzOwhL",
          "next": {
            "success": "PBXE2AV5MlXZw",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "{{a.0.name}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXmtp8rNXEt9",
          "next": {
            "success": "PBXwLfE0zEwqb",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXBrgxXkTLXm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select id  from ${request.path.table_name} where\r\n<#if request.body.id??>\r\nid in(<#list request.body as key, value><#if key==\"id\">${value}</#if></#list>) </#if>\r\n<#if request.body.where??>\r\n${request.body.where} </#if> and domain_id=${domain_id} \r\n",
          "value_type": "ftl",
          "output_variable": "updateid",
          "type": "sql",
          "id": "PBXGqeXfVLmHI",
          "next": {
            "success": "PBXmtp8rNXEt9",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a4",
          "if_type": "value",
          "variable1": "{{a3}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXA03cETXNcb",
          "next": {
            "success": "hangup",
            "failure": "PBXBrgxXkTLXm"
          }
        },
        {
          "name": "a3",
          "value": "<#list app.activity_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX83FAps04SF",
          "next": {
            "success": "PBXA03cETXNcb",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142175,
      "name": "version_bulk_update",
      "trigger": "rest",
      "expression": "/multi/version/{table_name}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXvG2fKcOhfe"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT group_concat(column_name) as name\r\nFROM information_schema.columns\r\nWHERE table_name = '${request.path.table_name}' \r\nand (COLUMN_NAME<>'created_date' and COLUMN_NAME<>'created_time');",
          "value_type": "ftl",
          "output_variable": "a",
          "type": "sql",
          "id": "PBXvG2fKcOhfe",
          "next": {
            "success": "PBXGqeXfVLmHI",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "\r\ninsert into ${request.path.table_name}_version\r\n(${request.path.table_name}_${output})\r\nselect ${output} from ${request.path.table_name} where\r\n<#if request.body.data??>\r\nid in(<#list 0..request.body.data?size-1 as i>${request.body.data[i].id!}<#sep>,</#sep> </#list>) </#if>\r\n<#if request.body.where??>\r\nid in (<#list 0..updateid?size-1 as i>\r\n${updateid[i]?values[0]?long?c}<#sep>,</#sep></#list>) </#if>  and ${app.id_type}=${domain_id} ",
          "value_type": "ftl",
          "output_variable": "version1",
          "type": "sql-insert",
          "id": "PBXwLfE0zEwqb",
          "next": {
            "success": "PBX83FAps04SF",
            "failure": "PBXUT4QSzOwhL"
          }
        },
        {
          "variable_name": "version1",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXE2AV5MlXZw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "version1",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXUT4QSzOwhL",
          "next": {
            "success": "PBXE2AV5MlXZw",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "{{a.0.name}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXmtp8rNXEt9",
          "next": {
            "success": "PBXwLfE0zEwqb",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXBrgxXkTLXm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>\r\nselect id  from ${request.path.table_name} where\r\n<#if request.body.data??>\r\nid in(<#list 0..request.body.data?size-1 as i>${request.body.data[i].id!}<#sep>,</#sep> </#list>) </#if>\r\n<#if request.body.where??>\r\n${request.body.where} </#if> and ${app.id_type}=${domain_id} \r\n</#compress>\r\n",
          "value_type": "ftl",
          "output_variable": "updateid",
          "type": "sql",
          "id": "PBXGqeXfVLmHI",
          "next": {
            "success": "PBXmtp8rNXEt9",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a4",
          "if_type": "value",
          "variable1": "{{a3}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXA03cETXNcb",
          "next": {
            "success": "hangup",
            "failure": "PBXBrgxXkTLXm"
          }
        },
        {
          "name": "a3",
          "value": "<#list app.activity_tables?split(\",\") as table> <#if request.path.table_name==table>1</#if></#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX83FAps04SF",
          "next": {
            "success": "PBXA03cETXNcb",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "updateid",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXGqLkXhgsqD",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "c",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXElgO6pzrUX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142176,
      "name": "update_custom_entity",
      "trigger": "rest",
      "expression": "/cf/{table_name}/{entity_id}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXBwLOcmkJ3o"
          }
        },
        {
          "name": "result",
          "value": "Update Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXsOiGWoJk2r",
          "next": {
            "success": "PBXCmmuJMX69N",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCEbkXNyZ0H",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCmmuJMX69N",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> \r\n<#assign table_name=request.path.table_name+\"_custom_field\">\r\n\r\n<#assign check=1> <#if app.non_domain_tables??> \r\n\r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>\r\n\r\n\r\nupdate <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field` set value=case custom_field_id <#list request.body.data as x> \r\nwhen ${x.custom_field_id} then '${x.value}' </#list> \r\nend where custom_field_id in (<#list request.body.data as x> <#if x?counter==request.body.data?size>${x.custom_field_id} <#else>${x.custom_field_id}, </#if></#list>)\r\n<#if request.path.entity_id??> and `${request.path.table_name}_id`=${request.path.entity_id}</#if>\r\n\r\n<#if check==1>\r\n\r\n\r\nand <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.domain_id=${domain_id}</#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-update",
          "id": "PBXr53TgJNFwA",
          "next": {
            "success": "PBXCEbkXNyZ0H",
            "failure": "PBXsOiGWoJk2r"
          }
        },
        {
          "output_variable": "result",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXBwLOcmkJ3o",
          "next": {
            "success": "PBXlOtNI99gRU",
            "failure": "PBXr53TgJNFwA"
          }
        },
        {
          "name": "result",
          "value": "<#compress>  <#assign table_name=request.path.table_name+\"_custom_field\">  <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>   update <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field` set value=case custom_field_id <#list request.body.data as x>  when ${x.custom_field_id} then '${x.value}' </#list>  end where custom_field_id in (<#list request.body.data as x> <#if x?counter==request.body.data?size>${x.custom_field_id} <#else>${x.custom_field_id}, </#if></#list>) <#if request.path.entity_id??> and `${request.path.table_name}_id`=${request.path.entity_id}</#if>  <#if check==1>   and <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.domain_id=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXlOtNI99gRU",
          "next": {
            "success": "PBXHQ4J2TeZ9N",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXHQ4J2TeZ9N",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "\r\nSELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXXxQcR46eTq",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142178,
      "name": "delete_custom_entity",
      "trigger": "rest",
      "expression": "/cf/{table_name}/{entity_id}",
      "method": "DELETE",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXpo59d8r7FX"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> \r\n<#assign table_name=request.path.table_name+\"_custom_field\">\r\n\r\n<#assign check=1> <#if app.non_domain_tables??> \r\n\r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>\r\n\r\ndelete <#if request.path.entity_id??> <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`</#if>\r\nfrom <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`  join \r\n<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`  on \r\n<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.id = <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`.${request.path.table_name}_id\r\njoin <#if testreferer??> `${testreferer}`.</#if>\r\n`custom_field`  on <#if testreferer??> `${testreferer}`.</#if>\r\n`custom_field`.id=<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`.custom_field_id \r\n\r\n<#if request.path.entity_id??> where \r\n\r\n${request.path.table_name}_id=${request.path.entity_id} \r\n\r\n<#if check==1>\r\n\r\n\r\nand  <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.domain_id=${domain_id} and \r\n\r\n<#if testreferer??> `${testreferer}`.</#if>\r\n\r\n`${request.path.table_name}_custom_field`.domain_id=${domain_id}</#if></#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-delete",
          "id": "PBXwo3Fwx3Txl",
          "next": {
            "success": "PBXTcTGTWzFmf",
            "failure": "PBXk8JRMTbCzt"
          }
        },
        {
          "name": "result",
          "value": "delete fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXk8JRMTbCzt",
          "next": {
            "success": "PBX40HlaWav87",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXTcTGTWzFmf",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX40HlaWav87",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "result",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXpo59d8r7FX",
          "next": {
            "success": "PBXnSBotZkldl",
            "failure": "PBXwo3Fwx3Txl"
          }
        },
        {
          "name": "result",
          "value": "<#compress>  <#assign table_name=request.path.table_name+\"_custom_field\">  <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>  delete <#if request.path.entity_id??> <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`</#if> from <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`  join  <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`  on  <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.id = <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.${request.path.table_name}_id join <#if testreferer??> `${testreferer}`.</#if> `custom_field`  on <#if testreferer??> `${testreferer}`.</#if> `custom_field`.id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.custom_field_id   <#if request.path.entity_id??> where   ${request.path.table_name}_id=${request.path.entity_id}   <#if check==1>   and  <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.domain_id=${domain_id} and   <#if testreferer??> `${testreferer}`.</#if>  `${request.path.table_name}_custom_field`.domain_id=${domain_id}</#if></#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXnSBotZkldl",
          "next": {
            "success": "PBXmLewiP0ST8",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXmLewiP0ST8",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "\r\n\r\nSELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXqO4GgDbGJA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142177,
      "name": "retrieve_custom_entity",
      "trigger": "rest",
      "expression": "/cf/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX3vAnWPwLuq"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>\r\n<#assign table_name=request.path.table_name+\"_custom_field\">\r\n<#assign check=1> <#if app.non_domain_tables??> \r\n\r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>\r\n\r\nselect custom_field.id,custom_field.name,${request.path.table_name}_custom_field.value \r\n<#if request.params.custom_fields??>,<#list request.params.custom_fields?split(\",\") as row>\r\ncustom_field.${row}<#sep>,</#sep></#list></#if>\r\n<#if request.params.entity_fields??>,<#list request.params.entity_fields?split(\",\") as row>\r\n<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.${row}<#sep>,</#sep></#list></#if>\r\n<#if request.params.entity_custom_fields??>,<#list request.params.entity_custom_fields?split(\",\") as row>\r\n<#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.${row}<#sep>,</#sep></#list></#if>\r\n\r\nfrom <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`\r\nJOIN <#if testreferer??> `${testreferer}`.</#if>`custom_field`  on <#if testreferer??> `${testreferer}`.</#if>\r\n`custom_field`.id=<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`.custom_field_id <#if check==1> and <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.domain_id=${domain_id} </#if>\r\n\r\n<#if request.params.id??> and <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`.${request.path.table_name}_id=${request.params.id}</#if>\r\n\r\n join <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}` on <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.id=<#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`.${request.path.table_name}_id <#if check==1>\r\nand <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}`.domain_id=${domain_id} </#if>\r\n \r\n<#if check==1>\r\nwhere <#if testreferer??> `${testreferer}`.</#if>`custom_field`.domain_id=${domain_id} <#if request.params.where??> and ${request.params.where} </#if><#else>  \r\n<#if request.params.where??> where ${request.params.where} </#if></#if>\r\n</#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXXyneTvTg4B",
          "next": {
            "success": "PBXPQK5cO6bwN",
            "failure": "PBXDMkysUkE5F"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXaBe13lZTh0",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "retrieve2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXAmKLlkAODN",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "retrieve2",
          "value": "Select Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXDMkysUkE5F",
          "next": {
            "success": "PBXAmKLlkAODN",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "retrieve",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBX3vAnWPwLuq",
          "next": {
            "success": "PBX7rcg5Xk89x",
            "failure": "PBXSGvaIzHCqi"
          }
        },
        {
          "name": "retrieve",
          "value": "<#compress> <#assign table_name=request.path.table_name+\"_custom_field\"> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>  select custom_field.id,custom_field.name,${request.path.table_name}_custom_field.value  <#if request.params.custom_fields??>,<#list request.params.custom_fields?split(\",\") as row> custom_field.${row}<#sep>,</#sep></#list></#if> <#if request.params.entity_fields??>,<#list request.params.entity_fields?split(\",\") as row> <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.${row}<#sep>,</#sep></#list></#if> <#if request.params.entity_custom_fields??>,<#list request.params.entity_custom_fields?split(\",\") as row> <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.${row}<#sep>,</#sep></#list></#if>  from <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field` JOIN <#if testreferer??> `${testreferer}`.</#if>`custom_field`  on <#if testreferer??> `${testreferer}`.</#if> `custom_field`.id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.custom_field_id <#if check==1> and <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.domain_id=${domain_id} </#if>  <#if request.params.id??> and <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.${request.path.table_name}_id=${request.params.id}</#if>   join <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}` on <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.${request.path.table_name}_id <#if check==1> and <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.domain_id=${domain_id} </#if>   <#if check==1> where <#if testreferer??> `${testreferer}`.</#if>`custom_field`.domain_id=${domain_id} <#if request.params.where??> and ${request.params.where} </#if><#else>   <#if request.params.where??> where ${request.params.where} </#if></#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX7rcg5Xk89x",
          "next": {
            "success": "PBXZvXaEFDcii",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "retrieve",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXZvXaEFDcii",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXSGvaIzHCqi",
          "next": {
            "success": "PBXW1lIZdpmTt",
            "failure": "PBXXyneTvTg4B"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> <#assign table_name=request.path.table_name+\"_custom_field\"> <#assign check=1> <#if app.non_domain_tables??>   <#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>  select custom_field.id,custom_field.name,${request.path.table_name}_custom_field.value  <#if request.params.custom_fields??>,<#list request.params.custom_fields?split(\",\") as row> custom_field.${row}<#sep>,</#sep></#list></#if> <#if request.params.entity_fields??>,<#list request.params.entity_fields?split(\",\") as row> <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.${row}<#sep>,</#sep></#list></#if> <#if request.params.entity_custom_fields??>,<#list request.params.entity_custom_fields?split(\",\") as row> <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.${row}<#sep>,</#sep></#list></#if>  from <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field` JOIN <#if testreferer??> `${testreferer}`.</#if>`custom_field`  on <#if testreferer??> `${testreferer}`.</#if> `custom_field`.id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.custom_field_id <#if check==1> and <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}_custom_field`.domain_id=${domain_id} </#if>  <#if request.params.id??> and <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.${request.path.table_name}_id=${request.params.id}</#if>   join <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}` on <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.id=<#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`.${request.path.table_name}_id <#if check==1> and <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}`.domain_id=${domain_id} </#if>   <#if check==1> where <#if testreferer??> `${testreferer}`.</#if>`custom_field`.domain_id=${domain_id} <#if request.params.where??> and ${request.params.where} </#if><#else>   <#if request.params.where??> where ${request.params.where} </#if></#if> </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXW1lIZdpmTt",
          "next": {
            "success": "PBXJNMNyglZTJ",
            "failure": "PBXlCgoxgoU2z"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXlCgoxgoU2z",
          "next": {
            "success": "PBX4sXGyZ5DG7",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXTzTOUS59U8",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX4sXGyZ5DG7",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXPQK5cO6bwN",
          "next": {
            "success": "PBX739cWZ7kQH",
            "failure": "PBXaBe13lZTh0"
          }
        },
        {
          "name": "retrieve2",
          "value": "{\"count\":\"${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX739cWZ7kQH",
          "next": {
            "success": "PBXiZcacDluu8",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "retrieve2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXiZcacDluu8",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXJNMNyglZTJ",
          "next": {
            "success": "PBXTzTOUS59U8",
            "failure": "PBXNQoNbfUWB6"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNQoNbfUWB6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142179,
      "name": "insert_custom_entity",
      "trigger": "rest",
      "expression": "/cf/{table_name}/{entity_id}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXfhHPdnyLri"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> \r\n<#assign table_name=request.path.table_name+\"_custom_field\">\r\n<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>\r\n  INSERT INTO <#if testreferer??> `${testreferer}`.</#if>\r\n`${request.path.table_name}_custom_field`(  <#if check==1>   domain_id,created_by,</#if>${request.path.table_name}_id,   <#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES<#list request.body.data as k1>( <#if check==1>  ${domain_id},${user_id},</#if><#list k1?values as v><#if k1?counter == request.body.data?size><#if v?counter == k1?size>'${v}')<#else>${request.path.entity_id},'${v}',</#if><#elseif v?counter== k1?size>'${v}'), <#else>${request.path.entity_id},'${v}',</#if></#list></#list> </#compress>",
          "value_type": "ftl",
          "output_variable": "insert2",
          "type": "sql-insert",
          "id": "PBXwncDgmGc1g",
          "next": {
            "success": "PBXMTEmPRXgDn",
            "failure": "PBXF3Ov3LzumE"
          }
        },
        {
          "name": "insert2",
          "value": "Insert Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXF3Ov3LzumE",
          "next": {
            "success": "PBXesgVtyEnPc",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert2_keys",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXMTEmPRXgDn",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXesgVtyEnPc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "insert1",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXfhHPdnyLri",
          "next": {
            "success": "PBXyTaUlJT3NH",
            "failure": "PBXwncDgmGc1g"
          }
        },
        {
          "name": "insert1",
          "value": "<#compress>  <#assign table_name=request.path.table_name+\"_custom_field\"> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==table_name> <#assign check=0></#if></#list></#if>   INSERT INTO <#if testreferer??> `${testreferer}`.</#if> `${request.path.table_name}_custom_field`(  <#if check==1>   domain_id,created_by,</#if>${request.path.table_name}_id,   <#assign c = request.body.data?first><#list c?keys as k><#if k?counter == c?size>${k}<#else>${k},</#if></#list>) VALUES<#list request.body.data as k1>( <#if check==1>  ${domain_id},${user_id},</#if><#list k1?values as v><#if k1?counter == request.body.data?size><#if v?counter == k1?size>'${v}')<#else>${request.path.entity_id},'${v}',</#if><#elseif v?counter== k1?size>'${v}'), <#else>${request.path.entity_id},'${v}',</#if></#list></#list> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXyTaUlJT3NH",
          "next": {
            "success": "PBXo8WdurwKC6",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insert1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXo8WdurwKC6",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXPR4xpNv4kO",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142186,
      "name": "default_data",
      "trigger": "rest",
      "expression": "/m/default/data/{table_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXfx8EIVJdrN"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select <#if request.params.field??> ${request.params.field} <#else> *  </#if> from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name};",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXfx8EIVJdrN",
          "next": {
            "success": "PBXMFecH3yI2q",
            "failure": "PBXUc1bc6fSVR"
          }
        },
        {
          "name": "result",
          "value": "insert failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXmdwpI6JhlV",
          "next": {
            "success": "PBXsxdWDnf8I4",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "inc",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXiODQ5ucKoc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXE7TGkiw6dK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "select failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXUc1bc6fSVR",
          "next": {
            "success": "PBXE7TGkiw6dK",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#assign i =inc[0].i><#assign j=output[i].columns>\r\ninsert into <#if testreferer??> `${testreferer}`.</#if>${output[i].name} (${j}) select ${output[i].fields},<#list j?split(\",\") as v1><#if v1=='created_by'>${user_id},<#elseif v1=='domain_id'>${domain_id}</#if></#list> from <#if testreferer??> `${testreferer}`.</#if>${output[i].name} where domain_id=0;",
          "value_type": "ftl",
          "output_variable": "result",
          "type": "sql-insert",
          "id": "PBXyAuxQMwfRP",
          "next": {
            "success": "PBXSy97gDT2ox",
            "failure": "PBXmdwpI6JhlV"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXsxdWDnf8I4",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "tag_test",
          "value": "select table_name as name from ${request.path.tablename}",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql-one",
          "id": "PBXTbGaR81xD3",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select 0 as i;",
          "value_type": "ftl",
          "output_variable": "inc",
          "type": "sql",
          "id": "PBXMFecH3yI2q",
          "next": {
            "success": "PBXFwLIwVaKaQ",
            "failure": "PBX11FleT5LDW"
          }
        },
        {
          "output_variable": "con",
          "if_type": "value",
          "variable1": "${inc[0].i}",
          "comparator": "less_than",
          "variable2": "${output?size}",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXFwLIwVaKaQ",
          "next": {
            "success": "PBXyAuxQMwfRP",
            "failure": "PBXOmnPgt5O7O"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select ${inc[0].i+1} as i;",
          "value_type": "ftl",
          "output_variable": "inc",
          "type": "sql",
          "id": "PBXSy97gDT2ox",
          "next": {
            "success": "PBXFwLIwVaKaQ",
            "failure": "hangup"
          }
        },
        {
          "name": "inc",
          "value": "failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX11FleT5LDW",
          "next": {
            "success": "PBXiODQ5ucKoc",
            "failure": "hangup"
          }
        },
        {
          "name": "con",
          "value": "insertion done sucess",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOmnPgt5O7O",
          "next": {
            "success": "PBXvEp3iVdIzM",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "con",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXvEp3iVdIzM",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "query",
          "value": "<#assign i =inc[0].i> insert into ${output[i].name} (${output[i].columns}) <#if output[i].fields??>select ${output[i].fields},${request.params.domain_id} from ${output[i].name} where tenant_id =0 <#else> <#assign n=output[i].name> values <#assign k= request.body.data['${n}']> <#list k as j> (${request.params.domain_id},<#list j as m,l> '${l}' <#sep>,</#sep> </#list>)<#sep>,</#sep> </#list> </#if>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXNsTEg9XO1c",
          "next": {
            "success": "PBXAVgoUozqQg",
            "failure": "hangup"
          }
        },
        {
          "src": "print(\"index\",map.inc);\r\nprint(\"query\",map.query);",
          "inline": "true",
          "type": "code-js",
          "id": "PBXAVgoUozqQg",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkd4VtCeTX9",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142181,
      "name": "desc",
      "trigger": "rest",
      "expression": "/m/desc/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXei4z2qPWgx"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if>\r\nSHOW COLUMNS FROM <#if testreferer??> `${testreferer}`.</#if>`contact` <#if check==1>where 1=(SELECT CASE WHEN COUNT(id) > 0 THEN 1 ELSE 0 END AS `Value`\r\nFROM <#if testreferer??> `${testreferer}`.</#if>`contact` where domain_id=1 limit 1)</#if> ",
          "value_type": "ftl",
          "output_variable": "desc1",
          "type": "sql",
          "id": "PBX2TguTAMw7H",
          "next": {
            "success": "PBXJ0psXyhWLu",
            "failure": "PBXvJAGkn0tR8"
          }
        },
        {
          "variable_name": "desc1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJ0psXyhWLu",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "desc",
          "value": "<#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> SHOW COLUMNS FROM <#if testreferer??> `${testreferer}`.</#if>`contact` <#if check==1>where 1=(SELECT CASE WHEN COUNT(id) > 0 THEN 1 ELSE 0 END AS `Value` FROM <#if testreferer??> `${testreferer}`.</#if>`contact` where domain_id=1 limit 1)</#if> ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX8hciBgRguE",
          "next": {
            "success": "PBXAUt4QzMrLA",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "desc",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXAUt4QzMrLA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXei4z2qPWgx",
          "next": {
            "success": "PBX8hciBgRguE",
            "failure": "PBX2TguTAMw7H"
          }
        },
        {
          "name": "desc2",
          "value": "Describe Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXvJAGkn0tR8",
          "next": {
            "success": "PBXizT11TuRJ5",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "desc2",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXizT11TuRJ5",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142182,
      "name": "import",
      "trigger": "rest",
      "expression": "/m/import",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXFnWLvSJXf3"
          }
        },
        {
          "variable_name": "import",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXodkkwh1RBc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "import",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXyNlKxFTw6i",
          "next": {
            "success": "PBXes2Gba37yz",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "import",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXes2Gba37yz",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "db_plugin_name": "db_plugin",
          "table_name": "${request.params.table_name}",
          "value_type": "ftl",
          "output_variable": "import",
          "file_name": "${request.params.file_name}",
          "bucket_name": "${request.params.bucket_name}",
          "s3_plugin_name": "temp_trash",
          "header": "false",
          "fields_terminated_by": ",",
          "lines_terminated_by": "",
          "custom_fields": "${request.body.fields}",
          "field_values": [],
          "type": "sql-s3-import",
          "id": "PBXFnWLvSJXf3",
          "next": {
            "success": "PBXodkkwh1RBc",
            "failure": "PBXyNlKxFTw6i"
          }
        }
      ]
    },
    {
      "id": 142183,
      "name": "conflict_check",
      "trigger": "rest",
      "expression": "/m/cf-cks/{table_name}/{entity_id}/{field_type}/{value}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXFHJTFGz663"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT COUNT(<#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}.id) as conflict_check\r\nFROM <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}\r\nwhere id=${request.path.entity_id} \r\nand ${request.path.field_type} <#if request.path.value=='null'> is null <#else>\r\n='${request.path.value}' </#if>\r\n",
          "value_type": "ftl",
          "output_variable": "a",
          "type": "sql",
          "id": "PBXFHJTFGz663",
          "next": {
            "success": "PBXLTf0ohzbdS",
            "failure": "PBXwbEvmQrDKg"
          }
        },
        {
          "name": "b",
          "value": "conflicts",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXTrxN0A2Jkg",
          "next": {
            "success": "PBXQrVl7mBcnc",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJNwZbzdlk1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "b",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXQrVl7mBcnc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "{{c1}}",
          "comparator": "equal_to",
          "variable2": "0",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXbC4dsDk2aR",
          "next": {
            "success": "PBXTrxN0A2Jkg",
            "failure": "PBXv7xlQg5oP9"
          }
        },
        {
          "name": "a",
          "value": "conflicts_check_failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXwbEvmQrDKg",
          "next": {
            "success": "PBXCm5kfuLuDQ",
            "failure": "hangup"
          }
        },
        {
          "name": "update",
          "value": "Update Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXKMJxbJu3Ta",
          "next": {
            "success": "PBXJNwZbzdlk1",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCm5kfuLuDQ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "c1",
          "value": "{{a.0.conflict_check}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXLTf0ohzbdS",
          "next": {
            "success": "PBXbC4dsDk2aR",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "UPDATE <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` SET <#list request.body as key,value><#if key?index==request.body?size-1><#if value=='NULL'>${key}=${value}<#else>${key}='${value}'</#if><#else><#if value=='NULL'>${key}=${value},<#else>${key}='${value}',</#if></#if></#list>\r\nwhere id = ${request.path.entity_id} and domain_id=${domain_id}",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBXogcs0upitp",
          "next": {
            "success": "PBXN6GKCvfZni",
            "failure": "PBXKMJxbJu3Ta"
          }
        },
        {
          "variable_name": "update",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXN6GKCvfZni",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "preview",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXv7xlQg5oP9",
          "next": {
            "success": "PBXFk6EOoDenq",
            "failure": "PBXogcs0upitp"
          }
        },
        {
          "name": "preview",
          "value": "UPDATE <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` SET <#list request.body as key,value><#if key?index==request.body?size-1><#if value=='NULL'>${key}=${value}<#else>${key}='${value}'</#if><#else><#if value=='NULL'>${key}=${value},<#else>${key}='${value}',</#if></#if></#list> where id = ${request.path.entity_id} and domain_id=${domain_id}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXFk6EOoDenq",
          "next": {
            "success": "PBXZyX85u2B2q",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "preview",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXZyX85u2B2q",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142184,
      "name": "checks",
      "trigger": "rest",
      "expression": "/m/cks/{table_name}/{check_type}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXKeWdDQTkBC"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{tenant.tenant_count}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXITXZFTshXf",
          "next": {
            "success": "PBXh7Mdc6XX3Z",
            "failure": "PBXI7OQfKedZT"
          }
        },
        {
          "name": "tenant_success",
          "value": "true",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXh7Mdc6XX3Z",
          "next": {
            "success": "PBXoV1LZB4gpR",
            "failure": "hangup"
          }
        },
        {
          "name": "tenant_failure",
          "value": "false",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXI7OQfKedZT",
          "next": {
            "success": "PBXEd3ZiLkW9q",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "tenant_success",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXoV1LZB4gpR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "tenant_failure",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXEd3ZiLkW9q",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "b",
          "if_type": "value",
          "variable1": "{{user.user_count}}",
          "comparator": "greater_than_or_equals",
          "variable2": "1",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXUuf9PLboVp",
          "next": {
            "success": "PBXIAaQCXd8W1",
            "failure": "PBXl3JZH0FBgR"
          }
        },
        {
          "name": "fail",
          "value": "Failed to check tenant",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX7Rso5rcARi",
          "next": {
            "success": "PBXhJnf3Igc2u",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "fail",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXhJnf3Igc2u",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "failure",
          "value": "Failed to check user",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXzZuqfBm8W5",
          "next": {
            "success": "PBXUoQXepxhwp",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "failure",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXUoQXepxhwp",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "user_success",
          "value": "true",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXIAaQCXd8W1",
          "next": {
            "success": "PBXHsMWPhSpmX",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "user_success",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXHsMWPhSpmX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "user_failure",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXAtDCCRT4vr",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "user_failure",
          "value": "false",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXl3JZH0FBgR",
          "next": {
            "success": "PBXAtDCCRT4vr",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select count(id) as tenant_count from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}  where ${app.id_type}=${domain_id} <#if request.params??>  <#list request.params as k,v>and (${k} not in('${v}') or ${k} is null)</#list></#if> limit 1;",
          "value_type": "ftl",
          "output_variable": "tenant",
          "type": "sql-one",
          "id": "PBXZPDW90qqFC",
          "next": {
            "success": "PBXITXZFTshXf",
            "failure": "PBX7Rso5rcARi"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select count(id) as user_count from <#if testreferer??> `${testreferer}`.</#if>${request.path.table_name}  where ${app.checks_type}=${user_id}  <#if request.params??>  <#list request.params as k,v>and (${k} not in('${v}') or ${k} is null)</#list></#if> limit 1;",
          "value_type": "ftl",
          "output_variable": "user",
          "type": "sql-one",
          "id": "PBXlOGOcaqi0k",
          "next": {
            "success": "PBXUuf9PLboVp",
            "failure": "PBXzZuqfBm8W5"
          }
        },
        {
          "output_variable": "checks",
          "if_type": "value",
          "variable1": "{{request.path.check_type}}",
          "comparator": "equal_to",
          "variable2": "tenant",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXKeWdDQTkBC",
          "next": {
            "success": "PBXZPDW90qqFC",
            "failure": "PBXlOGOcaqi0k"
          }
        }
      ]
    },
    {
      "id": 142180,
      "name": "merge_duplicates",
      "trigger": "rest",
      "expression": "/m/md/{table_name}/{field_name}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXhDGXKx3DoT"
          }
        },
        {
          "variable_name": "op",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXo7JPh6lNTc",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "op",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXcoapSMNv47",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "${merge_data}\r\n",
          "value_type": "ftl",
          "output_variable": "op",
          "type": "sql-delete",
          "id": "PBXVy3RoLHusV",
          "next": {
            "success": "PBXo7JPh6lNTc",
            "failure": "PBX4CZB1zvrtx"
          }
        },
        {
          "name": "op",
          "value": "fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX4CZB1zvrtx",
          "next": {
            "success": "PBXcoapSMNv47",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXhDGXKx3DoT",
          "next": {
            "success": "PBXmaMxMRiRNh",
            "failure": "PBXlLU2H3nk1E"
          }
        },
        {
          "name": "a",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> delete t1 from <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` t1  JOIN <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` t2  WHERE t1.<#if request.params.ascending??> ${request.params.ascending} <#elseif request.params.descending??> ${request.params.descending} </#if> <#if request.params.ascending??><<#else>></#if> t2.<#if request.params.ascending??> ${request.params.ascending} <#elseif request.params.descending??> ${request.params.descending} </#if>  and <#if  request.params.null??> ifnull( t1.${request.path.field_name},'null')=ifnull(t2.${request.path.field_name} ,'null') <#else> t1.${request.path.field_name}=t2.${request.path.field_name} </#if>    <#if check==1> and t1.domain_id=${domain_id} and   t2.domain_id=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXmaMxMRiRNh",
          "next": {
            "success": "PBXb4ZRhHqP8J",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXb4ZRhHqP8J",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXWQasCFK92y",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "merge_data",
          "value": "<#compress> <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> delete t1 from <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` t1  JOIN <#if testreferer??> `${testreferer}`.</#if>`${request.path.table_name}` t2  WHERE t1.<#if request.params.ascending??> ${request.params.ascending} <#elseif request.params.descending??> ${request.params.descending} </#if> <#if request.params.ascending??><<#else>></#if> t2.<#if request.params.ascending??> ${request.params.ascending} <#elseif request.params.descending??> ${request.params.descending} </#if>  and <#if  request.params.null??> ifnull( t1.${request.path.field_name},'null')=ifnull(t2.${request.path.field_name} ,'null') <#else> t1.${request.path.field_name}=t2.${request.path.field_name} </#if>    <#if check==1> and t1.domain_id=${domain_id} and   t2.domain_id=${domain_id}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXlLU2H3nk1E",
          "next": {
            "success": "PBXVy3RoLHusV",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142187,
      "name": "dbform",
      "trigger": "rest",
      "expression": "/m/form/{table_name}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXPHtMCPqoT7"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "\r\nselect concat('[',group_concat('{\"value\":' , '\"',name, '\"', ',',' \"label\":', '\"',name, '\"',' }'),']') `options`\r\nfrom ${name};\r\n",
          "value_type": "ftl",
          "output_variable": "third",
          "type": "sql",
          "id": "PBXtLsb61rz1D",
          "next": {
            "success": "PBXBRBQXzBlvl",
            "failure": "hangup"
          }
        },
        {
          "name": "name",
          "value": "<#assign i=inc[0].i>${second[i].t_name}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX2VTzo2QomT",
          "next": {
            "success": "PBXtLsb61rz1D",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select   \r\nCONCAT(' \r\n{\"fields\": [',GROUP_CONCAT(concat('{\"type\":\"',case when (data_type='varchar' and replace(substring(column_type,9), ')',' ') >=100) or (data_type='mediumtext') or (data_type='longtext') then 'text area' \r\nwhen (data_type='int') or(data_type='bigint') then 'number'\r\nwhen (data_type='enum') then 'radio'\r\nWHEN (DATA_TYPE='varchar' and replace(substring(column_type,9), ')',' ')) <100 then 'text'\r\n#when (data_type='mediumtext') or(data_type='longtext') or(data_type='text') then 'text area'\r\nelse data_type end , \r\n'\" ,','\"name\":\"',concat(upper(left(COLUMN_NAME,1)),substr(COLUMN_NAME,2)), '\", \r\n\"label\":\"', concat(upper(left(COLUMN_NAME,1)),substr(COLUMN_NAME,2)),\r\n'\", \"placeholder\": \"Enter ',concat(upper(left(COLUMN_NAME,1)),substr(COLUMN_NAME,2)),'\", \r\n\r\n\"max_length\":\"',case when CHARACTER_MAXIMUM_LENGTH is null then '' else CHARACTER_MAXIMUM_LENGTH end,'\"',\r\n\r\ncase when COLUMN_KEY='MUL' then ',\"options\": \"null\"' else '' end ,',\r\n\r\n\r\n\r\n\r\n\"VALUE\":\" ',case when data_type='enum' then replace(substring(column_type,6), ')',' ') \r\nwhen data_type ='varchar' and COLUMN_DEFAULT is null then '' when DATA_TYPE='varchar' then COLUMN_DEFAULT \r\nwhen data_type ='char' and COLUMN_DEFAULT is null then '' when DATA_TYPE='char' then COLUMN_DEFAULT \r\nwhen data_type ='text' and COLUMN_DEFAULT is null then '' when DATA_TYPE='text' then COLUMN_DEFAULT \r\nwhen data_type ='tinytext' and COLUMN_DEFAULT is null then '' when DATA_TYPE='tinytext' then COLUMN_DEFAULT \r\nwhen data_type ='mediumtext' and COLUMN_DEFAULT is null then '' when DATA_TYPE='mediumtext' then COLUMN_DEFAULT \r\nwhen data_type ='longtext' and COLUMN_DEFAULT is null then '' when DATA_TYPE='longtext' then COLUMN_DEFAULT \r\nwhen data_type ='binary' and COLUMN_DEFAULT is null then '' when DATA_TYPE='binary' then COLUMN_DEFAULT \r\nwhen data_type ='varbinary' and COLUMN_DEFAULT is null then '' when DATA_TYPE='varbinary' then COLUMN_DEFAULT \r\n\r\nwhen data_type ='int' and COLUMN_DEFAULT is null then '' when DATA_TYPE='int' then COLUMN_DEFAULT \r\nwhen data_type ='tinyint' and COLUMN_DEFAULT is null then '' when DATA_TYPE='tinyint' then COLUMN_DEFAULT \r\nwhen data_type ='mediumint' and COLUMN_DEFAULT is null then '' when DATA_TYPE='mediumint' then COLUMN_DEFAULT \r\nwhen data_type ='smallint' and COLUMN_DEFAULT is null then '' when DATA_TYPE='smallint' then COLUMN_DEFAULT \r\nwhen data_type ='longint' and COLUMN_DEFAULT is null then '' when DATA_TYPE='longint' then COLUMN_DEFAULT\r\nwhen data_type ='bigint' and COLUMN_DEFAULT is null then '' when DATA_TYPE='bigint' then COLUMN_DEFAULT\r\n\r\nwhen data_type ='date' and COLUMN_DEFAULT is null then '' when DATA_TYPE='date' then COLUMN_DEFAULT \r\nwhen data_type ='datetime' and COLUMN_DEFAULT is null then '' when DATA_TYPE='datetime' then COLUMN_DEFAULT \r\nwhen data_type ='time' and COLUMN_DEFAULT is null then '' when DATA_TYPE='time' then COLUMN_DEFAULT \r\nwhen data_type ='timestamp' and COLUMN_DEFAULT is null then '' when DATA_TYPE='timestamp' then COLUMN_DEFAULT \r\nwhen data_type ='current_timestamp' and COLUMN_DEFAULT is null then '' when DATA_TYPE='current_timestamp' then COLUMN_DEFAULT \r\n\r\n\r\n\r\nwhen data_type ='timestamp' or data_type='datetime' and COLUMN_DEFAULT is null then '' when DATA_TYPE='int' then COLUMN_DEFAULT else COLUMN_TYPE end, '\",\r\n\"required\":',if(IS_NULLABLE='NO','true','false'), '}')),']}')\r\n`all_form_fields` \r\nfrom information_schema.columns where table_name='${request.path.table_name}'",
          "value_type": "ftl",
          "output_variable": "first",
          "type": "sql",
          "id": "PBXPHtMCPqoT7",
          "next": {
            "success": "PBXNqkbJkJgpL",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": " SELECT \r\nREFERENCED_TABLE_NAME 't_name'\r\nFROM\r\nINFORMATION_SCHEMA.KEY_COLUMN_USAGE\r\nWHERE\r\nREFERENCED_TABLE_NAME is not null and\r\n TABLE_NAME='${request.path.table_name}' ",
          "value_type": "ftl",
          "output_variable": "second",
          "type": "sql",
          "id": "PBXNqkbJkJgpL",
          "next": {
            "success": "PBXszMzDS3RJA",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "con",
          "if_type": "value",
          "variable1": "${inc[0].i}",
          "comparator": "less_than",
          "variable2": "${second?size}",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBX7unEdQVCSO",
          "next": {
            "success": "PBX2VTzo2QomT",
            "failure": "PBXra8dt382n6"
          }
        },
        {
          "name": "output",
          "value": "${first[0].all_form_fields}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXra8dt382n6",
          "next": {
            "success": "PBXVg80PhUJpn",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXVg80PhUJpn",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "var result=JSON.parse(map.first[0].all_form_fields);\r\nfor(var i=0;i<result[\"fields\"].length;i++){\r\n  if(result[\"fields\"][i].options && result[\"fields\"][i].options ==\"null\"){\r\nresult[\"fields\"][i].options=JSON.parse(map.third[0].options);\r\nmap.first[0].all_form_fields=JSON.stringify(result);\r\nbreak;\r\n}\r\n}\r\n",
          "inline": "true",
          "type": "code-js",
          "id": "PBXBRBQXzBlvl",
          "next": {
            "success": "PBXiCTpDKHRgR",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select ${inc[0].i+1} as i;\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "inc",
          "type": "sql",
          "id": "PBXiCTpDKHRgR",
          "next": {
            "success": "PBX7unEdQVCSO",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select 0 as i;",
          "value_type": "ftl",
          "output_variable": "inc",
          "type": "sql",
          "id": "PBXszMzDS3RJA",
          "next": {
            "success": "PBX7unEdQVCSO",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142185,
      "name": "swagger",
      "trigger": "rest",
      "expression": "/swagger",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXCgiORZvhum"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "\r\n\r\nselect json_object( table_name,  replace( concat('\"example\":{\"data\":[{',group_concat('\"',column_name,'\"',':','\"',\r\nif( data_type='enum', substring_index( SUBSTRING_INDEX( SUBSTRING(COLUMN_TYPE,6), ')', 1),',',1),DATA_TYPE\r\n ),'\"'),'}]}'),'\"','#%#')) json\r\nfrom information_schema.columns \r\nwhere  find_in_set(table_name,'${app.tablename}') and column_name not in ('id','domain_id','tenant_id') \r\ngroup by TABLE_NAME;",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXCgiORZvhum",
          "next": {
            "success": "PBXirDTMo0DfK",
            "failure": "PBXXtbSdihHBV"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "200",
          "response_content_type": "application/text",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXZVNXBv38OB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXXtbSdihHBV",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "select concat('\"', TABLE_NAME,'\":\"' ,group_concat(\"'\",COLUMN_NAME,\"',`\" ,COLUMN_NAME,'`'),'\"') json,\r\nconcat('\"', TABLE_NAME,'\":\"' ,group_concat(COLUMN_NAME),'\"') json1,\r\nconcat('\"',TABLE_NAME,'\":\"',replace( group_concat(concat('\"',\r\nCOLUMN_NAME,'\":{\"type\":\"',\r\nconcat(if( Data_type = 'int' or Data_type = 'bigint' or Data_type = 'smallint' or Data_type = 'tinyint' or Data_type = 'mediumint' , 'integer' , '') , \r\nif( Data_type = 'varchar' or data_type='char' or DATA_TYPE='enum' or Data_type='json' or Data_type ='blob' or Data_type ='longblob' or Data_type ='text' or Data_type ='longtext' or Data_type ='mediumtext' or Data_type ='datetime' or Data_type ='date' or Data_type ='time' or Data_type ='timestamp' or Data_type ='year' , 'string' , '') , \r\nif(Data_type ='double' or Data_type ='float' or Data_type ='decimal' , 'number' , ''))\r\n,'\"',\r\nif(COLUMN_COMMENT is not null and COLUMN_COMMENT <>'',concat(',\"description\":\"',COLUMN_COMMENT,'\"'),''),\r\nif(DATA_TYPE='varchar' or DATA_TYPE='text' or DATA_TYPE='longtext' or DATA_TYPE='mediumtext' or DATA_TYPE='char' or DATA_TYPE='blob',\r\nconcat(',\"maxLength\":',CHARACTER_MAXIMUM_LENGTH ,',\"example\":\"500apps\"'),\r\n''),if(DATA_TYPE='enum',concat(',\"enum\":',\r\nreplace(replace(replace( COLUMN_TYPE,'enum(','['),')',']'),\"'\",'\"')\r\n),''),if(DATA_TYPE='datetime' or DATA_TYPE= 'timestamp',',\"example\":\"2019-08-28 10:08:15\"',''),\r\nif(DATA_TYPE='tinyint',concat(',\"minimum\":0,\"maximum\":1'),''),\r\nif(DATA_TYPE='json' or DATA_TYPE='longblob','' #',\"example\":\"#%%#\"'\r\n,''),\r\nif(DATA_TYPE='date',\",#%#example#%#:#%#'2038-01-19'#%#\",''),\r\nif(DATA_TYPE='time',\",#%#example#%#:#%#'03:14:07'#%#\",''),\r\nif(DATA_TYPE='year',\",#%#example#%#:#%#'9999#%#'\",''),\r\nif(COLUMN_DEFAULT != '' and COLUMN_DEFAULT is not null,concat(',\"default\":\"',COLUMN_DEFAULT,'\"'),''), '}')),'\"','#%#'),'\"') as schema1,\r\nconcat('\"', TABLE_NAME ,'\":','\"#%%#required#%%#:[', replace(replace(group_concat(if(IS_NULLABLE='NO' ,concat('#%%#',COLUMN_NAME,'#%%#'),'#%#')),'#%#,',''),',#%#',''),']\"') required_columns\r\nfrom information_schema.COLUMNS \r\nwhere find_in_set(table_name,'${app.tablename},${app.tablename?replace(',','_custom_field,')}_custom_field,${app.tablename?replace(',','_tag,')}_tag,${app.tablename?replace(',','_version,')}_version') and TABLE_SCHEMA != 'information_schema'\r\ngroup by TABLE_NAME;",
          "value_type": "ftl",
          "output_variable": "output1",
          "type": "sql",
          "id": "PBXirDTMo0DfK",
          "next": {
            "success": "PBXCaw6J27qrz",
            "failure": "PBXeTeiRebAyH"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#assign data='{'> <#list output1 as i> <#assign data=data + '${i.json},'> </#list>\r\n<#assign data=data?keep_before_last(',')+'}' data=data?eval>\r\nselect\r\n<#list app.tablename?split(',') as table>\r\n(select json_object( <#if data['${table}']??> ${data['${table}']} <#else> 'null'</#if> ) from `${table}` limit 1) `${table}`\r\n<#sep> , </#sep>\r\n</#list>",
          "value_type": "ftl",
          "output_variable": "output2",
          "type": "sql",
          "id": "PBXCaw6J27qrz",
          "next": {
            "success": "PBXZrR1A26Wd8",
            "failure": "PBXq8URcdMQW5"
          }
        },
        {
          "name": "selectjson",
          "value": "<#assign temptable=\"\"> <#attempt>  <#compress>  <#assign op1='{' sm='{' op='{' rc='{'> <#list output1 as i>    <#assign op1= op1 + i.json1+',' sm= sm + i.schema1+',' rc=rc+i.required_columns+','>   </#list>  <#assign op1=op1?keep_before_last(',') +'}' op1=op1?eval rc=rc?keep_before_last(',')+'}' rc=rc?eval>  <#assign sm= sm?keep_before_last(',') +'}' sm=sm?eval>    <#list output as i>  <#assign op=op+i.json?keep_after('{')?keep_before_last('}')+',' >  </#list> <#assign op=op?keep_before_last(',')+'}' op=op?eval>          { \"openapi\" : \"3.0.0\", \"info\" : { \"title\" : \"DB App\", \"description\" : \"Generic DB App will be useful for programmers who work with database operations.\\nThis application is available in Marketplace.\\n\\n\\nOnce the application is copied to respective cloud,the following steps to be taken.\\n\\n\\n**1**. Add Jwt Plugin and Database Plugin.\\n\\n\\n**2**. Add s3 plugin if there is any case where the data is to be imported or exported.\\n\\n\\n**3**. In Application Properties, \\n\\n* Add respective Jwt authentication column(tenant_id/domain_id) where key is id_type.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** -\\n[link](https://drive.google.com/open?id=1wJVOV6aiTDQuLVf004oQBxLN6xf52Wco)\\n\\n* Mention the table names for which the DB operations to be performed where key is tablename.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** - \\n[link](https://drive.google.com/open?id=1vbCYBPNI28ipB9FfytQGQL3KbopuDJa1)\\n\\n\\n* To record Activities on entities, mention activity. followed by parent table name in key and respective table name and child table names in value.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** - \\n[link](https://drive.google.com/open?id=1vfimJN7ITowT_q7yTtd8eCPB23yECSCg)\\n\\n\\n * To record Versions for entities, mention respective table names in version_tables key.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n **Referral Link** - \\n[link](https://drive.google.com/open?id=1zORTp2LS60mVDY-90b_ZnuNCE3rpVPkW)\\n\\n\\n * For checks scenario,mention respective column name(created_by/user_id) where checks_type is key.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** - \\n[link](https://drive.google.com/open?id=1GIMHHdQtlhSIipPnA83qQtweboXTyor0)\" , \"version\" : \"1.0.0\" }, \"servers\" : [ { \"url\" : \"{server}\", \"variables\" : { \"server\" : { \"default\" : \"https://dbapp.500apps.com/v2\" } } } ],      \"paths\" :{   <#list app.tablename?split(',') as table>       \"/${table}\": {  \"get\": {  \"tags\": [ \"${table} - CRUD\" ], \"summary\":\"Retrieves ${table} \",\"description\": \"Retrieve ${table}s based on required conditions \", \"operationId\": \"Retrieve ${table}\", \"parameters\": [ { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of ${table} that are to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\":\"Specified conditions on which the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"group_by\", \"in\": \"query\", \"description\": \"Mention attribute on which data has to be grouped\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"limit\", \"in\": \"query\", \"description\": \"Adding limit to result\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"offset\", \"in\": \"query\", \"description\": \"Value from which data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"order_by\", \"in\": \"query\", \"description\": \"Specifying order for the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"id\" }, { \"name\": \"order_by_type\", \"in\": \"query\", \"description\": \"Ascending or Descending\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"desc\" }, { \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to Cloud\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"S3 bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"By which name the file to be stored in S3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Required fields,filters,group by,limit,offset,order by,order by type can be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\": { \"fields\":  <#assign temptable=table> \"${op1['${table}']!}\",  \"where\": \"id='1'\", \"group_by\": \"id\", \"limit\": \"10\", \"offset\": \"5\", \"order_by\": \"id\", \"order_by_type\": \"desc\" } } ],   \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },          \"post\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Inserts ${table}\",\"description\": \"Adds new records with given input array in ${table}\", \"operationId\": \"Insert ${table}\", \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\"  }  <#if op['${table}']??>,   ${op['${table}']!?replace('#%#','\"') ?replace('bigint','3432')?replace('smallint','23')?replace('tinyint','1')?replace('mediumint','12')?replace('varchar','500apps')?replace('text','500apps')?replace('longtext','500apps')?replace('mediumtext','500apps')?replace('char','')?replace('blob','500apps')?replace('char','500apps')?replace('varchar','500apps')?replace('timestamp','2019-08-28 10:08:15')?replace('bigint','7686')?replace('longblob','[3,4,5]')?replace('json','[3,4,5]')?replace('\"date\"','\"2038-01-19\"')?replace('time','03:14:07')?replace('year','9999')?replace('int','343')}</#if> } } },   \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\":\"string\"  }, \"example\": { \"GENERATED_KEY\": \"1\" } } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Insert Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },             \"put\": { \"tags\": [ \"${table} - CRUD\" ], \"summary\":\"Updates ${table} \",\"description\": \"Updates the existing data based on the specified condition\", \"operationId\": \"Update ${table}\", \"requestBody\": { \"content\": { \"form-data\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": { \"name\": \"Appup\", \"where\": \"is_active=1\", \"id\": \"1\" } } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Update Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },          \"delete\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Deletes ${table}\",\"description\": \"Deletes the data from ${table}\", \"operationId\": \"Delete ${table}\", \"parameters\": [ { \"name\": \"id\", \"in\": \"query\", \"description\": \"ID on which the data to be deleted\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" }, \"example\": 114 }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Specified conditions on which the data to be deleted\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"name='Appup'\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Filter condition or respective id to be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\": { \"where\": \"name='Appup'\", \"id\": \"1\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Delete Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },              \"/multi/${table}\": { \"put\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Bulk Update\",\"description\":\"Updates multiple records based on multiple conditions at a time.\", \"operationId\": \"bulk update ${table}\", \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\":  {\"data\":[{\"id\":\"352\",\"subject\":\"kvs1\"},{\"id\":\"353\",\"subject\":\"raju2\",\"requester_email\":\"demo1\"}]}     } } },\"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Update Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },         \"/upsert/${table}\": {  \"patch\": {  \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Upsert\",\"description\": \"Based on given input array, it updates the record  based on uniqueness or primary key column in the table else inserts a new record .\", \"operationId\": \"update a record if exists else insert in ${table}\", \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\":{ \"data\":[{\"name\":\"bulk\",\"tag_id\":45,\"email\":\"bulk@gmail.com\"},{\"name\":\"bulk update\",\"tag_id\":26,\"email\":\"update@yopmail\"}] }} } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": { \"GENERATED_KEY\": \"1\" } } } } , \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] }} ,          \"/${table}/{entity_id}\": { \"get\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Read single\",\"description\": \"Retrieves a single record based on ID\", \"operationId\": \"read single ${table}\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"id on which the data to be fetched\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } }], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },                   <#if sm['${table}_tag']??> \"/tags/${table}\":{ \"get\": { \"tags\": [ \"${table} - Tags\" ],\"summary\":\"Tags Retrieve\", \"description\": \"Retrieves tags associated data from ${table}_tag\", \"operationId\": \"Retrieve ${table}_tag\", \"parameters\": [ { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of tag entities that are to be retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"tag_name\", \"in\": \"query\", \"description\": \"Retrieves data based on the tag name\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } },{ \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to store in s3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"S3 Bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"By which name the file to be stored in S3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": [{\"first_name\": \"Agile\",\"last_name\": \"CRM\",\"email\": \"agile@gmail.com\"}] } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },             \"/tags/${table}/{entity_id}\" : {       \"post\" : {         \"tags\" : [ \"${table} - Tags\" ],\"summary\":\"Tags Insert\",         \"description\" : \"Adds a tag to entities.\",         \"operationId\" : \"${table}_tag_insert\",         \"parameters\" : [{           \"name\" : \"entity_id\",           \"in\" : \"path\",           \"required\" : true,           \"style\" : \"simple\",           \"explode\" : false,           \"schema\" : {             \"type\" : \"integer\"           }         } ],         \"requestBody\" : {           \"content\" : {             \"raw\" : { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\"  }  ,\"example\": {\"ticket_id\":[3,8]}                         }           }         },        \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\":\"string\"  }, \"example\": { \"GENERATED_KEY\": \"1\" } } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Tag Insert Failed\" } } } },        \"security\" : [ {           \"api_key\" : [ ]         } ]       },      \"delete\" : {         \"tags\" : [ \"${table} - Tags\" ],  \"summary\":\"Tags Delete\",  \"description\" : \"Deletes the tags associated data related to entities.\",         \"operationId\" : \"${table}_tag_Delete\",         \"parameters\" : [{           \"name\" : \"entity_id\",           \"in\" : \"path\",           \"required\" : true,           \"style\" : \"simple\",           \"explode\" : false,           \"schema\" : {             \"type\" : \"integer\"           }         },{ \"name\": \"ids\", \"in\": \"query\", \"description\": \"Entity ids that are to be deleted\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } } ],         \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Tag Delete Failed\" } } } },         \"security\" : [ {           \"api_key\" : [ ]         } ]       }     }  ,   </#if>          <#if sm['${table}_custom_field']??>     \"/cf/${table}\": { \"get\": { \"tags\": [ \"${table} - Custom Fields\" ], \"summary\":\"Custom Fields Retrieve\",\"description\": \"Retrieve custom_field's associated data from ${table}_custom_fields\", \"operationId\": \"Retrieve ${table}_custom_field\", \"parameters\": [  { \"name\": \"custom_fields\", \"in\": \"query\", \"description\": \"Attributes of custom_fields to be retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"entity_fields\", \"in\": \"query\", \"description\": \"Attributes of ${table} to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"entity_custom_fields\", \"in\": \"query\", \"description\": \"Attributes of ${table}_custom_field to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"id\", \"in\": \"query\", \"description\": \"Attributes of ${table}_custom_field to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Required filter condition on which the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } },{ \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to store in s3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"Bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"File name\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" }], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" }, \"example\": [{\"custom_field_id\": \"custom_field_name\",\"value\": \"CRM\"}] } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },            \"/cf/${table}/{entity_id}\":{ \"post\": { \"tags\": [\"${table} - Custom Fields\"], \"summary\":\"Custom Fields Insert\",\"description\": \"Adds a new custom field related record to the ${table}_custom_field\", \"operationId\": \"Insert ${table}_custom_field\", \"parameters\":[{ \"name\": \"entity_id\", \"in\": \"path\", \"description\": \"Id on which the data to be stored\", \"required\": true, \"style\": \"simple\", \"schema\":{ \"type\": \"integer\"} }],  \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\"  }, \"example\": {\"data\":[{\"value\":0,\"custom_field_id\":\"3\"},{\"value\":8,\"custom_field_id\":\"4\"}, {\"value\":9,\"custom_field_id\":\"5\"}]} } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"example\": { \"GENERATED_KEY\": \"1\" } } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"example\": \"Insert Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },   \"put\": { \"tags\": [ \"${table} - Custom Fields\" ], \"summary\":\"Custom Fields Update\",\"description\": \"Updates the custom_fields associated data in the ${table}_custom_fields\", \"operationId\": \"Update ${table}_custom_field\", \"parameters\":[{ \"name\": \"entity_id\", \"in\": \"path\", \"description\": \"${table}_id on which the data to be updated\",  \"required\": true, \"style\": \"simple\", \"schema\":{ \"type\": \"integer\"} }], \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" }, \"example\": {\"data\":[{\"value\":0,\"custom_field_id\":\"3\"},{\"value\":8,\"custom_field_id\":\"4\"}, {\"value\":9,\"custom_field_id\":\"5\"}]} } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Update Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },      \"delete\": { \"tags\": [ \"${table} - Custom Fields\" ], \"summary\":\"Custom Fields Delete\",\"description\": \"Deletes the custom_fields associated data from ${table}_custom_field\", \"operationId\": \"Delete ${table}_custom_field\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"${table}_id on which the data to be deleted\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"integer\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Delete Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] }  } ,</#if>       \"/m/cf-cks/${table}/{entity_id}/{field_type}/{value}\": { \"put\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"Conflict checks\", \"description\": \"Updates the record if the users input is matching with the existing data else get failed and returns conflict checks.\", \"operationId\": \"${table} conflict checks\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"id on which the data to be updated\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"integer\" } },{ \"name\": \"field_type\", \"in\": \"path\", \"description\": \"Name of the attribute on which operation to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } }, { \"name\": \"value\", \"in\": \"path\", \"description\": \"value of the attribute for which operation to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } } ], \"requestBody\": { \"content\": { \"form-data\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": { \"details\": \"manasa\", \"subject\": \"Agile_crm,jubliee_enclave\", \"phone_no\": \"123456789\" } } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\" , \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Conflicts\" } } } }, \"security\": [ { \"api_key\": [] } ] } },   \"/m/cks/${table}/{check_type}\": { \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\" Checks\",\"description\": \"Checks data existence for particular user or tenant\", \"operationId\": \"${table} checks\", \"parameters\": [ { \"name\": \"check_type\", \"in\": \"path\", \"description\": \"Need to mention either user or tenant\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" },\"example\": \"true\" } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" },\"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },    \"/trash/${table}\": { \"post\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"trash\",\"description\": \"Moves records to trash from ${table} based on specified condition\", \"operationId\": \"trash ${table}\", \"parameters\": [ { \"name\": \"id\", \"in\": \"query\", \"description\": \"Id for which data to be moved to trash\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Trash Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },    \"/restore/${table}\": { \"post\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"restore\",\"description\": \"restore records to ${table} from trash based on specified condition\", \"operationId\": \"restore ${table}\", \"parameters\": [ { \"name\": \"id\", \"in\": \"query\", \"description\": \"Id for which data to be restored from trash\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Restore Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },  \"/delete/${table}\": { \"delete\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"permanent delete\",\"description\": \"deletes records from ${table} which is moved to trash\", \"operationId\": \"delete ${table}\", \"parameters\": [], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Delete Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },            \"/m/md/${table}/{field_name}\": { \"post\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"Merge Duplicates\",\"description\": \"Merges duplicate records from ${table} based on specified condition\", \"operationId\": \"${table} merge duplicates\",   \"parameters\": [ { \"name\": \"field_name\", \"in\": \"path\", \"description\": \"Name of the attribute on which operation to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } },  { \"name\": \"ascending\", \"in\": \"query\", \"description\": \"Merges old records \", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } },  { \"name\": \"descending\", \"in\": \"query\", \"description\": \"Merges latest records \", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }],   \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },          \"/m/form/${table}\": { \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"DB form\", \"description\": \"Generates dynamic form for specified table\", \"operationId\": \"Dbform_${table}\", \"parameters\": [ ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": {\"fields\": [{\"type\": \"number\",\"name\": \"Id\",\"label\": \"Id\",\"placeholder\": \"Enter Id\",\"max_length\": \"\",\"VALUE\": \" \",\"required\": true},{\"type\": \"text area\",\"name\": \"Name\",\"label\": \"Name\",\"placeholder\": \"Enter Name\",\"max_length\": \"101\", \"VALUE\": \" \",\"required\": false},{\"type\": \"number\",\"name\": \"Category_id\",\"label\": \"Category_id\",\"placeholder\": \"Enter Category_id\",\"max_length\": \"\",\"options\": [{\"value\":\"stationary\",\"label\": \"stationary\"},{\"value\": \"somi malla3\",\"label\": \"somi malla3\"}]}]} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },   \"/m/data/${table}/{entity_id}\": { \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"Data Ordering\",\"description\": \"Swapping the positions of the data based on the order provided.\", \"operationId\": \"${table} odering data\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\": \"id on which swapping to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } }, { \"name\": \"id\", \"in\": \"query\", \"description\": \"specify the existing position of id along with new position to where the id to be moved\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"4,5\" } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } }    ,    <#if sm['${table}_verstion']??>  \"/version/${table}/{entity_id}\":{ \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"Version Retrieve\", \"description\": \"Retrieves version data based on id \", \"operationId\": \"Retrieve version ${table}\", \"parameters\": [   { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"${table}_id on which the data to be fetched\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of ${table}_version to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Required filter condition to fetch attributes\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"group_by\", \"in\": \"query\", \"description\": \"Mention attribute on which data has to be grouped\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"limit\", \"in\": \"query\", \"description\": \"Adding limit to result\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"offset\", \"in\": \"query\", \"description\": \"Value from which data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"order_by\", \"in\": \"query\", \"description\": \"Applying order\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"id\" }, { \"name\": \"order_by_type\", \"in\": \"query\", \"description\": \"Ascending or Descending\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"desc\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Required fields,filters,group by,limit,offset,order by,order by type can be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\":  <#assign temptable=table> { \"fields\": \"${op1['${table}']!}\",  \"where\": \"id='1'\", \"group_by\": \"id\", \"limit\": \"10\", \"offset\": \"5\", \"order_by\": \"id\", \"order_by_type\": \"desc\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },  </#if>     \"/aggregate/${table}/{aggregate}\":{ \"get\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"Aggregate Function\",\"description\": \"Retrieves aggregated data from ${table}\", \"operationId\": \"${table}_Read single\", \"parameters\": [ { \"name\": \"aggregate\", \"in\": \"path\", \"description\": \"aggregate operations-(avg,sum,count,min,max) to be specified\", \"required\": true, \"style\": \"simple\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"aggregate_field\", \"in\": \"query\", \"description\": \"aggregate operation to be applied on particular attribute\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of ${table} that are to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Values that need to be considered for filter\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"group_by\", \"in\": \"query\", \"description\": \"Mention attribute on which data has to be grouped\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"limit\", \"in\": \"query\", \"description\": \"Adding limit to result\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"offset\", \"in\": \"query\", \"description\": \"Value from which data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"order_by\", \"in\": \"query\", \"description\": \"Applying order according to which the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"id\" }, { \"name\": \"order_by_type\", \"in\": \"query\", \"description\": \"Ascending or Descending\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"desc\" }, { \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to store in s3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"S3 Bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"By which name the file to be stored in S3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Required fields,filters,group by,limit,offset,order by,order by type can be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\": { \"fields\":  <#assign temptable=table> \"${op1['${table}']!}\"       ,       \"where\": \"id='1'\", \"group_by\": \"id\", \"limit\": \"10\", \"offset\": \"5\", \"order_by\": \"id\", \"order_by_type\": \"desc\" } } ],  \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": [     {         \"avg(id)\": 3070.3622,         \"type\": null     },     {         \"avg(id)\": 374.6667,         \"type\": \"26\"     } ] } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } },  \"security\": [ { \"api_key\": [] } ] } }        <#sep>,</#sep> </#list>        }, \"components\": {  \"schemas\": { <#list app.tablename?split(',') as table> \"${table}\": { \"type\": \"object\", ${rc['${table}']?replace('#%%#','\"')}, \"properties\": { ${sm['${table}']?replace('#%#','\"')} }, \"xml\": { \"name\": \"${table}\" } }  <#if sm['${table}_custom_field']??>      ,\"${table}_custom_field\": { \"type\": \"object\", ${rc['${table}_custom_field']?replace('#%%#','\"')}, \"properties\": { ${sm['${table}_custom_field']?replace('#%#','\"')} }, \"xml\": { \"name\": \"${table}_custom_field\" } }  </#if>   <#if sm['${table}_tag']??>   ,\"${table}_tag\": { \"type\": \"object\", ${rc['${table}_tag']?replace('#%%#','\"')}, \"properties\": { ${sm['${table}_tag']?replace('#%#','\"')} }, \"xml\": { \"name\": \"${table}_tag\" } }  </#if> <#sep>,</#sep> </#list> }, \"requestBodies\": { <#list app.tablename?split(',') as table>  \"${table}\": { \"description\": \"${table} object that needs to be added to the store\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" } }, \"application/xml\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" } } }, \"required\": true }  <#if sm['${table}_tag']??>  ,\"${table}_tag\": { \"description\": \"${table}_tag object that needs to be added to the store\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\" } }, \"application/xml\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\" } } }, \"required\": true }  </#if>  <#if sm['${table}_custom_field']??>  ,\"${table}_custom_field\": { \"description\": \"${table}_custom_field object that needs to be added to the store\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" } }, \"application/xml\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" } } }, \"required\": true }  </#if>  <#sep>,</#sep> </#list> }, \"securitySchemes\" : { \"api_key\" : { \"type\" : \"apiKey\", \"name\" : \"token\", \"in\" : \"header\" } }   } } </#compress> <#recover>  ${temptable} ---  ${.error} </#attempt>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZrR1A26Wd8",
          "next": {
            "success": "PBXIHyxIvMH9A",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXeTeiRebAyH",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output2",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXq8URcdMQW5",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "result",
          "value": "<#assign temptable=\"\"> <#attempt>  <#compress>  <#assign op1='{' sm='{' op='{' rc='{'> <#list output1 as i>    <#assign op1= op1 + i.json1+',' sm= sm + i.schema1+',' rc=rc+i.required_columns+','>   </#list>  <#assign op1=op1?keep_before_last(',') +'}' op1=op1?eval rc=rc?keep_before_last(',')+'}' rc=rc?eval>  <#assign sm= sm?keep_before_last(',') +'}' sm=sm?eval>    <#list output as i>  <#assign op=op+i.json?keep_after('{')?keep_before_last('}')+',' >  </#list> <#assign op=op?keep_before_last(',')+'}' op=op?eval>          { \"openapi\" : \"3.0.0\", \"info\" : { \"title\" : \"DB App\", \"description\" : \"Generic DB App will be useful for programmers who work with database operations.\\nThis application is available in Marketplace.\\n\\n\\nOnce the application is copied to respective cloud,the following steps to be taken.\\n\\n\\n**1**. Add Jwt Plugin and Database Plugin.\\n\\n\\n**2**. Add s3 plugin if there is any case where the data is to be imported or exported.\\n\\n\\n**3**. In Application Properties, \\n\\n* Add respective Jwt authentication column(tenant_id/domain_id) where key is id_type.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** -\\n[link](https://drive.google.com/open?id=1wJVOV6aiTDQuLVf004oQBxLN6xf52Wco)\\n\\n* Mention the table names for which the DB operations to be performed where key is tablename.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** - \\n[link](https://drive.google.com/open?id=1vbCYBPNI28ipB9FfytQGQL3KbopuDJa1)\\n\\n\\n* To record Activities on entities, mention activity. followed by parent table name in key and respective table name and child table names in value.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** - \\n[link](https://drive.google.com/open?id=1vfimJN7ITowT_q7yTtd8eCPB23yECSCg)\\n\\n\\n * To record Versions for entities, mention respective table names in version_tables key.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n **Referral Link** - \\n[link](https://drive.google.com/open?id=1zORTp2LS60mVDY-90b_ZnuNCE3rpVPkW)\\n\\n\\n * For checks scenario,mention respective column name(created_by/user_id) where checks_type is key.\\n\\n\\nPlease find the below attachment for more reference.\\n\\n\\n**Referral Link** - \\n[link](https://drive.google.com/open?id=1GIMHHdQtlhSIipPnA83qQtweboXTyor0)\" , \"version\" : \"1.0.0\" }, \"servers\" : [ { \"url\" : \"{server}\", \"variables\" : { \"server\" : { \"default\" : \"${app.url}\" } } } ],      \"paths\" :{   <#list app.tablename?split(',') as table>       \"/${table}\": {  \"get\": {  \"tags\": [ \"${table} - CRUD\" ], \"summary\":\"Retrieves ${table} \",\"description\": \"Retrieve ${table}s based on required conditions \", \"operationId\": \"Retrieve ${table}\", \"parameters\": [ { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of ${table} that are to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"w\", \"in\": \"query\", \"description\":\"Specified conditions on which the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"g\", \"in\": \"query\", \"description\": \"Mention attribute on which data has to be grouped\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"l\", \"in\": \"query\", \"description\": \"Adding limit to result\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"o\", \"in\": \"query\", \"description\": \"Value from which data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"s\", \"in\": \"query\", \"description\": \"Specifying order for the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"id\" }, { \"name\": \"t\", \"in\": \"query\", \"description\": \"Ascending or Descending\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"desc\" }, { \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to Cloud\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"S3 bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"By which name the file to be stored in S3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Enable gc to get the count of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{\"name\" : \"c\",\"in\" : \"query\",\"description\" : \"Enable c to get the number of records retrieved along with result.\",\"required\" : false,\"style\" : \"form\",\"explode\" : true,\"schema\" : {\"type\" : \"string\"},\"example\" : \"false\"}, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Required fields,filters,group by,limit,offset,order by,order by type can be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\": { \"fields\":  <#assign temptable=table> \"${op1['${table}']!}\",  \"w\": \"id='1'\", \"g\": \"id\", \"l\": \"10\", \"o\": \"5\", \"s\": \"id\", \"t\": \"desc\" } } ],   \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"whereSelect Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },          \"post\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Inserts ${table}\",\"description\": \"Adds new records with given input array in ${table}\", \"operationId\": \"Insert ${table}\",\"parameters\" : [ {\"name\" : \"g\",\"in\" : \"query\",\"description\" : \"Enable g to return inserted object(s)\",\"required\" : false,\"style\" : \"form\",\"explode\" : true,\"schema\" : {\"type\" : \"string\"}} ],\"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\"  }  <#if op['${table}']??>,   ${op['${table}']!?replace('#%#','\"') ?replace('bigint','3432')?replace('smallint','23')?replace('tinyint','1')?replace('mediumint','12')?replace('varchar','500apps')?replace('text','500apps')?replace('longtext','500apps')?replace('mediumtext','500apps')?replace('char','')?replace('blob','500apps')?replace('char','500apps')?replace('varchar','500apps')?replace('timestamp','2019-08-28 10:08:15')?replace('bigint','7686')?replace('longblob','[3,4,5]')?replace('json','[3,4,5]')?replace('\"date\"','\"2038-01-19\"')?replace('time','03:14:07')?replace('year','9999')?replace('int','343')}</#if> } } },   \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\":\"string\"  }, \"example\": { \"GENERATED_KEY\": \"1\" } } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Insert Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },             \"put\": { \"tags\": [ \"${table} - CRUD\" ], \"summary\":\"Updates ${table} \",\"description\": \"Updates the existing data based on the specified condition\", \"operationId\": \"Update ${table}\", \"requestBody\": { \"content\": { \"form-data\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": { \"name\": \"Appup\", \"where\": \"is_active=1\", \"id\": \"1\" } } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Update Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },          \"delete\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Deletes ${table}\",\"description\": \"Deletes the data from ${table}\", \"operationId\": \"Delete ${table}\", \"parameters\": [ { \"name\": \"id\", \"in\": \"query\", \"description\": \"ID on which the data to be deleted\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" }, \"example\": 114 }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Specified conditions on which the data to be deleted\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"name='Appup'\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Filter condition or respective id to be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\": { \"where\": \"name='Appup'\", \"id\": \"1\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Delete Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },              \"/multi/${table}\": { \"put\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Bulk Update\",\"description\":\"Updates multiple records based on multiple conditions at a time.\", \"operationId\": \"bulk update ${table}\", \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\":  {\"data\":[{\"id\":\"352\",\"subject\":\"kvs1\"},{\"id\":\"353\",\"subject\":\"raju2\",\"requester_email\":\"demo1\"}]}     } } },\"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Update Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },         \"/upsert/${table}\": {  \"patch\": {  \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Upsert\",\"description\": \"Based on given input array, it updates the record  based on uniqueness or primary key column in the table else inserts a new record .\", \"operationId\": \"update a record if exists else insert in ${table}\", \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\":{ \"data\":[{\"name\":\"bulk\",\"tag_id\":45,\"email\":\"bulk@gmail.com\"},{\"name\":\"bulk update\",\"tag_id\":26,\"email\":\"update@yopmail\"}] }} } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": { \"GENERATED_KEY\": \"1\" } } } } , \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] }} ,          \"/${table}/{entity_id}\": { \"get\": { \"tags\": [ \"${table} - CRUD\" ],\"summary\":\"Read single\",\"description\": \"Retrieves a single record based on ID\", \"operationId\": \"read single ${table}\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"id on which the data to be fetched\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } }], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },                   <#if sm['${table}_tag']??> \"/tags/${table}\":{ \"get\": { \"tags\": [ \"${table} - Tags\" ],\"summary\":\"Tags Retrieve\", \"description\": \"Retrieves tags associated data from ${table}_tag\", \"operationId\": \"Retrieve ${table}_tag\", \"parameters\": [ { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of tag entities that are to be retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"tag_name\", \"in\": \"query\", \"description\": \"Retrieves data based on the tag name\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } },{ \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to store in s3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"S3 Bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"By which name the file to be stored in S3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": [{\"first_name\": \"Agile\",\"last_name\": \"CRM\",\"email\": \"agile@gmail.com\"}] } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },             \"/tags/${table}/{entity_id}\" : {       \"post\" : {         \"tags\" : [ \"${table} - Tags\" ],\"summary\":\"Tags Insert\",         \"description\" : \"Adds a tag to entities.\",         \"operationId\" : \"${table}_tag_insert\",         \"parameters\" : [{           \"name\" : \"entity_id\",           \"in\" : \"path\",           \"required\" : true,           \"style\" : \"simple\",           \"explode\" : false,           \"schema\" : {             \"type\" : \"integer\"           }         } ],         \"requestBody\" : {           \"content\" : {             \"raw\" : { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\"  }  ,\"example\": {\"ticket_id\":[3,8]}                         }           }         },        \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\":\"string\"  }, \"example\": { \"GENERATED_KEY\": \"1\" } } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Tag Insert Failed\" } } } },        \"security\" : [ {           \"api_key\" : [ ]         } ]       },      \"delete\" : {         \"tags\" : [ \"${table} - Tags\" ],  \"summary\":\"Tags Delete\",  \"description\" : \"Deletes the tags associated data related to entities.\",         \"operationId\" : \"${table}_tag_Delete\",         \"parameters\" : [{           \"name\" : \"entity_id\",           \"in\" : \"path\",           \"required\" : true,           \"style\" : \"simple\",           \"explode\" : false,           \"schema\" : {             \"type\" : \"integer\"           }         },{ \"name\": \"ids\", \"in\": \"query\", \"description\": \"Entity ids that are to be deleted\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } } ],         \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Tag Delete Failed\" } } } },         \"security\" : [ {           \"api_key\" : [ ]         } ]       }     }  ,   </#if>          <#if sm['${table}_custom_field']??>     \"/cf/${table}\": { \"get\": { \"tags\": [ \"${table} - Custom Fields\" ], \"summary\":\"Custom Fields Retrieve\",\"description\": \"Retrieve custom_field's associated data from ${table}_custom_fields\", \"operationId\": \"Retrieve ${table}_custom_field\", \"parameters\": [  { \"name\": \"custom_fields\", \"in\": \"query\", \"description\": \"Attributes of custom_fields to be retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"entity_fields\", \"in\": \"query\", \"description\": \"Attributes of ${table} to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"entity_custom_fields\", \"in\": \"query\", \"description\": \"Attributes of ${table}_custom_field to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"id\", \"in\": \"query\", \"description\": \"Attributes of ${table}_custom_field to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Required filter condition on which the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } },{ \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to store in s3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"Bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"File name\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" }], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" }, \"example\": [{\"custom_field_id\": \"custom_field_name\",\"value\": \"CRM\"}] } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },            \"/cf/${table}/{entity_id}\":{ \"post\": { \"tags\": [\"${table} - Custom Fields\"], \"summary\":\"Custom Fields Insert\",\"description\": \"Adds a new custom field related record to the ${table}_custom_field\", \"operationId\": \"Insert ${table}_custom_field\", \"parameters\":[{ \"name\": \"entity_id\", \"in\": \"path\", \"description\": \"Id on which the data to be stored\", \"required\": true, \"style\": \"simple\", \"schema\":{ \"type\": \"integer\"} }],  \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\"  }, \"example\": {\"data\":[{\"value\":0,\"custom_field_id\":\"3\"},{\"value\":8,\"custom_field_id\":\"4\"}, {\"value\":9,\"custom_field_id\":\"5\"}]} } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"example\": { \"GENERATED_KEY\": \"1\" } } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"example\": \"Insert Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },   \"put\": { \"tags\": [ \"${table} - Custom Fields\" ], \"summary\":\"Custom Fields Update\",\"description\": \"Updates the custom_fields associated data in the ${table}_custom_fields\", \"operationId\": \"Update ${table}_custom_field\", \"parameters\":[{ \"name\": \"entity_id\", \"in\": \"path\", \"description\": \"${table}_id on which the data to be updated\",  \"required\": true, \"style\": \"simple\", \"schema\":{ \"type\": \"integer\"} }], \"requestBody\": { \"content\": { \"raw\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" }, \"example\": {\"data\":[{\"value\":0,\"custom_field_id\":\"3\"},{\"value\":8,\"custom_field_id\":\"4\"}, {\"value\":9,\"custom_field_id\":\"5\"}]} } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"object\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Update Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] },      \"delete\": { \"tags\": [ \"${table} - Custom Fields\" ], \"summary\":\"Custom Fields Delete\",\"description\": \"Deletes the custom_fields associated data from ${table}_custom_field\", \"operationId\": \"Delete ${table}_custom_field\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"${table}_id on which the data to be deleted\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"integer\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Delete Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] }  } ,</#if>       \"/m/cf-cks/${table}/{entity_id}/{field_type}/{value}\": { \"put\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"Conflict checks\", \"description\": \"Updates the record if the users input is matching with the existing data else get failed and returns conflict checks.\", \"operationId\": \"${table} conflict checks\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"id on which the data to be updated\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"integer\" } },{ \"name\": \"field_type\", \"in\": \"path\", \"description\": \"Name of the attribute on which operation to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } }, { \"name\": \"value\", \"in\": \"path\", \"description\": \"value of the attribute for which operation to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } } ], \"requestBody\": { \"content\": { \"form-data\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": { \"details\": \"manasa\", \"subject\": \"Agile_crm,jubliee_enclave\", \"phone_no\": \"123456789\" } } } }, \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\" , \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Conflicts\" } } } }, \"security\": [ { \"api_key\": [] } ] } },   \"/m/cks/${table}/{check_type}\": { \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\" Checks\",\"description\": \"Checks data existence for particular user or tenant\", \"operationId\": \"${table} checks\", \"parameters\": [ { \"name\": \"check_type\", \"in\": \"path\", \"description\": \"Need to mention either user or tenant\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } } , {\"name\" : \"default_value\",\"in\" : \"query\",\"description\" : \"Specify the column name and value which differentiates default values and other values.\",      \"required\" : false,\"style\" : \"form\",\"explode\" : true,\"schema\" : {\"type\" : \"object\",\"example\" : {\"created_by\" : 1}}} ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" },\"example\": \"true\" } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" },\"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },    \"/trash/${table}\": { \"post\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"trash\",\"description\": \"Moves records to trash from ${table} based on specified condition\", \"operationId\": \"trash ${table}\", \"parameters\": [ { \"name\": \"id\", \"in\": \"query\", \"description\": \"Id for which data to be moved to trash\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Trash Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },    \"/restore/${table}\": { \"post\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"restore\",\"description\": \"restore records to ${table} from trash based on specified condition\", \"operationId\": \"restore ${table}\", \"parameters\": [ { \"name\": \"id\", \"in\": \"query\", \"description\": \"Id for which data to be restored from trash\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Restore Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },  \"/delete/${table}\": { \"delete\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"permanent delete\",\"description\": \"deletes records from ${table} which is moved to trash\", \"operationId\": \"delete ${table}\", \"parameters\": [], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Delete Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },            \"/m/md/${table}/{field_name}\": { \"post\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"Merge Duplicates\",\"description\": \"Merges duplicate records from ${table} based on specified condition\", \"operationId\": \"${table} merge duplicates\",   \"parameters\": [ { \"name\": \"field_name\", \"in\": \"path\", \"description\": \"Name of the attribute on which operation to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } },  { \"name\": \"ascending\", \"in\": \"query\", \"description\": \"Merges old records \", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } },  { \"name\": \"descending\", \"in\": \"query\", \"description\": \"Merges latest records \", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }],   \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": 1 } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },          \"/m/form/${table}\": { \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"DB form\", \"description\": \"Generates dynamic form for specified table\", \"operationId\": \"Dbform_${table}\", \"parameters\": [ ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": {\"fields\": [{\"type\": \"number\",\"name\": \"Id\",\"label\": \"Id\",\"placeholder\": \"Enter Id\",\"max_length\": \"\",\"VALUE\": \" \",\"required\": true},{\"type\": \"text area\",\"name\": \"Name\",\"label\": \"Name\",\"placeholder\": \"Enter Name\",\"max_length\": \"101\", \"VALUE\": \" \",\"required\": false},{\"type\": \"number\",\"name\": \"Category_id\",\"label\": \"Category_id\",\"placeholder\": \"Enter Category_id\",\"max_length\": \"\",\"options\": [{\"value\":\"stationary\",\"label\": \"stationary\"},{\"value\": \"somi malla3\",\"label\": \"somi malla3\"}]}]} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },   \"/m/data/${table}/{entity_id}\": { \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"Data Ordering\",\"description\": \"Swapping the positions of the data based on the order provided.\", \"operationId\": \"${table} odering data\", \"parameters\": [ { \"name\": \"entity_id\", \"in\": \"path\", \"description\": \"id on which swapping to be performed\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"string\" } }, { \"name\": \"id\", \"in\": \"query\", \"description\": \"specify the existing position of id along with new position to where the id to be moved\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"4,5\" } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } }    ,    <#if sm['${table}_verstion']??>  \"/version/${table}/{entity_id}\":{ \"get\": { \"tags\": [ \"${table} - Utilities\" ],\"summary\":\"Version Retrieve\", \"description\": \"Retrieves version data based on id \", \"operationId\": \"Retrieve version ${table}\", \"parameters\": [   { \"name\": \"entity_id\", \"in\": \"path\", \"description\":\"${table}_id on which the data to be fetched\", \"required\": true, \"style\": \"simple\", \"explode\": false, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of ${table}_version to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Required filter condition to fetch attributes\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"group_by\", \"in\": \"query\", \"description\": \"Mention attribute on which data has to be grouped\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"limit\", \"in\": \"query\", \"description\": \"Adding limit to result\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"offset\", \"in\": \"query\", \"description\": \"Value from which data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"order_by\", \"in\": \"query\", \"description\": \"Applying order\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"id\" }, { \"name\": \"order_by_type\", \"in\": \"query\", \"description\": \"Ascending or Descending\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"desc\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Required fields,filters,group by,limit,offset,order by,order by type can be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\":  <#assign temptable=table> { \"fields\": \"${op1['${table}']!}\",  \"where\": \"id='1'\", \"group_by\": \"id\", \"limit\": \"10\", \"offset\": \"5\", \"order_by\": \"id\", \"order_by_type\": \"desc\" } } ], \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": ${output2[0]['${table}']} } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } }, \"security\": [ { \"api_key\": [] } ] } },  </#if>     \"/aggregate/${table}/{aggregate}\":{ \"get\": { \"tags\": [ \"${table} - Utilities\" ], \"summary\":\"Aggregate Function\",\"description\": \"Retrieves aggregated data from ${table}\", \"operationId\": \"${table}_Read single\", \"parameters\": [ { \"name\": \"aggregate\", \"in\": \"path\", \"description\": \"aggregate operations-(avg,sum,count,min,max) to be specified\", \"required\": true, \"style\": \"simple\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"aggregate_field\", \"in\": \"query\", \"description\": \"aggregate operation to be applied on particular attribute\", \"required\": true, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"fields\", \"in\": \"query\", \"description\": \"Attributes of ${table} that are to be returned\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"where\", \"in\": \"query\", \"description\": \"Values that need to be considered for filter\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"group_by\", \"in\": \"query\", \"description\": \"Mention attribute on which data has to be grouped\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" } }, { \"name\": \"limit\", \"in\": \"query\", \"description\": \"Adding limit to result\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"offset\", \"in\": \"query\", \"description\": \"Value from which data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"integer\" } }, { \"name\": \"order_by\", \"in\": \"query\", \"description\": \"Applying order according to which the data to be fetched\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"id\" }, { \"name\": \"order_by_type\", \"in\": \"query\", \"description\": \"Ascending or Descending\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" }, \"example\": \"desc\" }, { \"name\": \"export\", \"in\": \"query\", \"description\": \"Make export enable to export the data retrieved to store in s3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" },{ \"name\": \"bucket_name\", \"in\": \"query\", \"description\": \"S3 Bucket name where the file is to be stored\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"temptrash\" },{ \"name\": \"file_name\", \"in\": \"query\", \"description\": \"By which name the file to be stored in S3 bucket\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"Appup\" },{ \"name\": \"gc\", \"in\": \"query\", \"description\": \"Count which shows the number of records retrieved\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"string\" },\"example\": \"false\" }, { \"name\": \"example value\", \"in\": \"query\", \"description\": \"Required fields,filters,group by,limit,offset,order by,order by type can be defined\", \"required\": false, \"style\": \"form\", \"explode\": true, \"schema\": { \"type\": \"object\" }, \"example\": { \"fields\":  <#assign temptable=table> \"${op1['${table}']!}\"       ,       \"where\": \"id='1'\", \"group_by\": \"id\", \"limit\": \"10\", \"offset\": \"5\", \"order_by\": \"id\", \"order_by_type\": \"desc\" } } ],  \"responses\": { \"200\": { \"description\": \"Successful response.\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" }, \"example\": [     {         \"avg(id)\": 3070.3622,         \"type\": null     },     {         \"avg(id)\": 374.6667,         \"type\": \"26\"     } ] } } }, \"400\": { \"description\": \"Bad request.\", \"content\": { \"application/json\": { \"schema\": { \"type\": \"string\" }, \"example\": \"Select Failed\" } } } },  \"security\": [ { \"api_key\": [] } ] } }        <#sep>,</#sep> </#list>        }, \"components\": {  \"schemas\": { <#list app.tablename?split(',') as table> \"${table}\": { \"type\": \"object\", ${rc['${table}']?replace('#%%#','\"')}, \"properties\": { ${sm['${table}']?replace('#%#','\"')} }, \"xml\": { \"name\": \"${table}\" } }  <#if sm['${table}_custom_field']??>      ,\"${table}_custom_field\": { \"type\": \"object\", ${rc['${table}_custom_field']?replace('#%%#','\"')}, \"properties\": { ${sm['${table}_custom_field']?replace('#%#','\"')} }, \"xml\": { \"name\": \"${table}_custom_field\" } }  </#if>   <#if sm['${table}_tag']??>   ,\"${table}_tag\": { \"type\": \"object\", ${rc['${table}_tag']?replace('#%%#','\"')}, \"properties\": { ${sm['${table}_tag']?replace('#%#','\"')} }, \"xml\": { \"name\": \"${table}_tag\" } }  </#if> <#sep>,</#sep> </#list> }, \"requestBodies\": { <#list app.tablename?split(',') as table>  \"${table}\": { \"description\": \"${table} object that needs to be added to the store\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" } }, \"application/xml\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}\" } } }, \"required\": true }  <#if sm['${table}_tag']??>  ,\"${table}_tag\": { \"description\": \"${table}_tag object that needs to be added to the store\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\" } }, \"application/xml\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_tag\" } } }, \"required\": true }  </#if>  <#if sm['${table}_custom_field']??>  ,\"${table}_custom_field\": { \"description\": \"${table}_custom_field object that needs to be added to the store\", \"content\": { \"application/json\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" } }, \"application/xml\": { \"schema\": { \"$ref\": \"#/components/schemas/${table}_custom_field\" } } }, \"required\": true }  </#if>  <#sep>,</#sep> </#list> }, \"securitySchemes\" : { \"api_key\" : { \"type\" : \"apiKey\", \"name\" : \"token\", \"in\" : \"header\" } }   } } </#compress> <#recover>  ${temptable} ---  ${.error} </#attempt>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXIHyxIvMH9A",
          "next": {
            "success": "PBXZVNXBv38OB",
            "failure": "PBXkdzZwzKmoT"
          }
        },
        {
          "variable_name": "result",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkdzZwzKmoT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142188,
      "name": "data_ordering",
      "trigger": "rest",
      "expression": "/m/order/{table_name}/{entity_id}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX7zTHKdfCeT"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "select  concat('{',group_concat(concat('\"',column_name,'\":\"0\"')),'}')  json from information_schema.columns where table_name = '${request.path.table_name}'  and column_name in('tenant_id','domain_id');",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBX7zTHKdfCeT",
          "next": {
            "success": "PBXIt6CSV1Pok",
            "failure": "PBXerZWaUoQco"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> \r\n\r\n<#assign  data_order=app.data_order?eval>\r\nselect sum((${data_order['${request.path.table_name}']!} )<#if request.params.id?keep_after_last(',')!='0'>/2)+0.01 <#else> +0.5</#if> as 'order' from ${request.path.table_name} \r\n\r\nwhere id in(<#if request.params.id?keep_before_last(',')=='0'> \r\n${request.params.id?keep_after_last(',')} <#elseif request.params.id?keep_after_last(',')=='0'> \r\n${request.params.id?keep_before_last(',')}<#else >${request.params.id} </#if>) \r\n<#if check==1>and domain_id = ${domain_id}  </#if>",
          "value_type": "ftl",
          "output_variable": "data",
          "type": "sql",
          "id": "PBX0DAVJTGKJF",
          "next": {
            "success": "PBXIO28JUtXeG",
            "failure": "PBXWnlVMShToy"
          }
        },
        {
          "variable_name": "update1",
          "http_response_code": "200",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXEoD1R2lxXt",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "data",
          "http_response_code": "200",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX1t2JxgkTcH",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign check=1> <#if app.non_domain_tables??> \r\n<#list app.non_domain_tables?split(\",\") as v1> <#if v1==request.path.table_name> <#assign check=0></#if></#list></#if> \r\n<#assign  data_order=app.data_order?eval>\r\nupdate  ${request.path.table_name} set \r\n${data_order[ '${request.path.table_name}']!} =REPLACE('${data[0].order}',',','') where id=${request.path.entity_id}\r\n<#if check==1>and domain_id = ${domain_id} </#if>\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "update1",
          "type": "sql-update",
          "id": "PBXIO28JUtXeG",
          "next": {
            "success": "PBXEoD1R2lxXt",
            "failure": "PBXm7o4KzeRcE"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign id_type_check=output[0].json>\r\n<#assign ch=id_type_check?eval data_order=app.data_order?eval>\r\nselect * from ${request.path.table_name} \r\n<#if ch['${app.id_type}']??>where ${app.id_type} = ${domain_id}  </#if> order by ${data_order['${request.path.table_name}']!}  desc",
          "value_type": "ftl",
          "output_variable": "select",
          "type": "sql",
          "id": "PBX2SZ8Wwb61Q",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "400",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXHF18LtFC36",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "update11",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXganO45pGgy",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXerZWaUoQco",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#assign data_order=app.data_order?eval> update  ${request.path.table_name} set ${data_order[<'${request.path.table_name}']!}=id  where ${data_order['${request.path.table_name}']!} is null",
          "value_type": "ftl",
          "output_variable": "update",
          "type": "sql-update",
          "id": "PBXIt6CSV1Pok",
          "next": {
            "success": "PBX0DAVJTGKJF",
            "failure": "PBXnHqzW8dS5I"
          }
        },
        {
          "variable_name": "update100",
          "http_response_code": "200",
          "response_content_type": "application/json;charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXzRGJW2FpBQ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "update100",
          "value": "1st fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXnHqzW8dS5I",
          "next": {
            "success": "PBXzRGJW2FpBQ",
            "failure": "hangup"
          }
        },
        {
          "name": "data1",
          "value": "2nd fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXWnlVMShToy",
          "next": {
            "success": "PBX1t2JxgkTcH",
            "failure": "hangup"
          }
        },
        {
          "name": "update11",
          "value": "3rd fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXm7o4KzeRcE",
          "next": {
            "success": "PBXganO45pGgy",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142192,
      "name": "custom_queries",
      "trigger": "rest",
      "expression": "/cq/{entity_id}",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXGa0xwGrLgx"
          }
        },
        {
          "variable_name": "output2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCAlC9EG4m4",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value": "${output?replace('\"','')}",
          "value_type": "ftl",
          "output_variable": "output1",
          "type": "template",
          "id": "PBXPHy1e4QaDm",
          "next": {
            "success": "PBXgso05SKRZo",
            "failure": "PBXEABJikUWHh"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXEABJikUWHh",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "${output2}",
          "value_type": "ftl",
          "output_variable": "output3",
          "type": "sql",
          "id": "PBXwlaZ1nJAvG",
          "next": {
            "success": "PBX6TBTqkaBg3",
            "failure": "PBXe0d7PMJL6V"
          }
        },
        {
          "variable_name": "setvar",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXmSTlFxhz0c",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output3",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX6TBTqkaBg3",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "setvar",
          "value": "Failed ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXe0d7PMJL6V",
          "next": {
            "success": "PBXmSTlFxhz0c",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "output4",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXTkv7RmlK21",
          "next": {
            "success": "PBXCAlC9EG4m4",
            "failure": "PBXdrfrKaU6PI"
          }
        },
        {
          "name": "output",
          "value": "<#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\"> <#if app['${key1}']??> <#assign select= app['${key1}']> <#else> <#if request.path.entity_id1??> <#assign select = request.path.entity_id1+'testing'> <#else> select 1 </#if> </#if>   ${select?replace('\"','##$$%%')}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXGa0xwGrLgx",
          "next": {
            "success": "PBXPHy1e4QaDm",
            "failure": "PBXsU9fBAbx1k"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXsU9fBAbx1k",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output2",
          "value": "${output1?replace('##$$%%','\"')}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXgso05SKRZo",
          "next": {
            "success": "PBXTkv7RmlK21",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXdrfrKaU6PI",
          "next": {
            "success": "PBXlDotMK5hc8",
            "failure": "PBXwlaZ1nJAvG"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "${output2}",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXlDotMK5hc8",
          "next": {
            "success": "PBX0nBZ0mZsdr",
            "failure": "PBXPfxz83a0iP"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXPfxz83a0iP",
          "next": {
            "success": "PBXtpFDkNfp4h",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX5mWcouFH2U",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXtpFDkNfp4h",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBX0nBZ0mZsdr",
          "next": {
            "success": "PBX5mWcouFH2U",
            "failure": "PBXWBrvtgeFAl"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWBrvtgeFAl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142193,
      "name": "custom_queries_update",
      "trigger": "rest",
      "expression": "/cq/{entity_id}",
      "method": "PUT",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXmwMdJhuILc"
          }
        },
        {
          "variable_name": "output2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCAlC9EG4m4",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value": "${output4?replace('\"','')}",
          "value_type": "ftl",
          "output_variable": "output6",
          "type": "template",
          "id": "PBXPHy1e4QaDm",
          "next": {
            "success": "PBXkulXNb9ea5",
            "failure": "PBXEABJikUWHh"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXEABJikUWHh",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output3",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXmSTlFxhz0c",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "<#assign data1=schema_data[0].json?eval con=\"\"> <#list data1 as k,v> <#if k=='domain_id' || k=='tenant_id'> <#assign con += \"${k} =${domain_id} \"> <#sep><#assign con += \" and \"></#sep> </#if> <#if k=='created_by'> <#assign con += \"${k} = ${user_id}\"> <#sep><#assign con += \" and \"></#sep> </#if> <#if k=='user_id'> <#assign con += \"${k} = ${user_id}\"> <#sep><#assign con += \" and \"></#sep> </#if> </#list> <#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\"> <#if app['${key1}']??>  <#assign select= app['${key1}']>  <#if select?lower_case?contains(\"where\")>   ${select?replace(\"where\",\"where ${con} and\")?replace(\"WHERE\",\"WHERE ${con} and\")}  <#else> ${select} where ${con} </#if></#if>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXGa0xwGrLgx",
          "next": {
            "success": "hangup",
            "failure": "PBXsU9fBAbx1k"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXsU9fBAbx1k",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "${output1}",
          "value_type": "ftl",
          "output_variable": "output2",
          "type": "sql-update",
          "id": "PBXGyPlm9r25q",
          "next": {
            "success": "PBXCAlC9EG4m4",
            "failure": "PBXKaKDdoP9PF"
          }
        },
        {
          "output_variable": "condition",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXlDWcAcnlsf",
          "next": {
            "success": "PBXx0DVKeM8dI",
            "failure": "PBXGyPlm9r25q"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXx0DVKeM8dI",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output3",
          "value": "Failed  Update",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXKaKDdoP9PF",
          "next": {
            "success": "PBXmSTlFxhz0c",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\" select1=\"\" table=\"\" schema=\"\"> \r\n<#if app['${key1}']??> <#assign select= app['${key1}']>  \r\n<#if select?contains(\"from\")> <#assign select1=select?keep_after(\"update\")> <#else>\r\n <#assign select1=select?keep_after(\"UPDATE\")> \r\n\r\n<#if select1?contains(\"set\")> \r\n<#assign select1=select1?keep_before(\"set\")>\r\n<#else>  <#assign select1=select1?keep_before(\"SET\")>\r\n</#if>\r\n\r\n<#if select1?contains(\".\")> <#assign table=select1?keep_after(\".\") schema=select1?keep_before(\".\")><#else>\r\n <#assign table=select1> \r\n</#if> \r\n </#if>\r\n</#if>\r\n\r\nSELECT concat('{',group_concat( concat('\"',COLUMN_NAME,'\":\"',COLUMN_NAME,'\"')),'}') json FROM information_schema.columns where TABLE_SCHEMA = '${schema?replace(\" \",\"\")?replace(\"`\",\"\")}' and table_name = '${table?replace(\" \",\"\")?replace(\"`\",\"\")}' and  COLUMN_NAME in('${app.id_type}','user_id','created_by');",
          "value_type": "ftl",
          "output_variable": "schema_data",
          "type": "sql",
          "id": "PBXk7yb6fUWLE",
          "next": {
            "success": "PBXGa0xwGrLgx",
            "failure": "PBXtXvnmpnDlX"
          }
        },
        {
          "name": "output4",
          "value": "${data?replace('\"','##$$%%')}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXiKpOf0xFv8",
          "next": {
            "success": "PBXPHy1e4QaDm",
            "failure": "hangup"
          }
        },
        {
          "name": "output1",
          "value": "${output6?replace('##$$%%','\"')}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXkulXNb9ea5",
          "next": {
            "success": "PBXlDWcAcnlsf",
            "failure": "hangup"
          }
        },
        {
          "name": "data",
          "value": "<#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\" select1=\"\" table1=\"\"> <#if app['${key1}']??><#assign select= app['${key1}']> <#if select?contains(\"update\")> <#assign select1=select?keep_after(\"update\")> <#else> <#assign select=select1?keep_after(\"UPDATE\")> </#if> <#if select1?contains(\"set\")> <#assign select1=select1?keep_before(\"set\")> <#else> <#assign select1=select1?keep_before(\"SET\")> </#if> <#if select1?contains(\".\")> <#assign table1=select1?keep_after(\".\")><#else> <#assign table1=select1> </#if> </#if> <#assign table=table1?replace(\" \",\"\")> <#assign check=1>     <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1><#if table==v1><#assign check=0></#if></#list></#if> <#assign con=\"\"> <#if check==1> <#assign con += \"domain_id=${domain_id}\"> </#if>   <#if select?lower_case?contains(\"where\")> <#if check==1> ${select?replace(\"where\",\"where ${con} and \")?replace(\"WHERE\",\"WHERE ${con} and \")}  <#else> ${select}  </#if> </#if>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXmwMdJhuILc",
          "next": {
            "success": "PBXiKpOf0xFv8",
            "failure": "PBXCLwWrfSgcy"
          }
        },
        {
          "variable_name": "data",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCLwWrfSgcy",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "schema_data",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXtXvnmpnDlX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142194,
      "name": "custom_queries_insert",
      "trigger": "rest",
      "expression": "/cq/{entity_id}",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBX0mTGQasven"
          }
        },
        {
          "variable_name": "output2_keys",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCAlC9EG4m4",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value": "${json}",
          "value_type": "ftl",
          "output_variable": "output1",
          "type": "template",
          "id": "PBXPHy1e4QaDm",
          "next": {
            "success": "PBX1e6XPLhWtu",
            "failure": "PBXEABJikUWHh"
          }
        },
        {
          "variable_name": "output1",
          "http_response_code": "401",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXEABJikUWHh",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "insertfail",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXmSTlFxhz0c",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "<#assign data1= schema_data[0].json?eval> <#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\"> <#if app['${key1}']??> <#assign select= app['${key1}']> </#if>  <#assign i=0> <#list select?split(\")\") as data> <#if i= 0> ${data}<#if data1['domain_id']?? || data1['tenant_id']??> ,${app.id_type}</#if><#if data1['user_id']??>,user_id </#if><#if data1['created_by']??>,created_by </#if>) <#else> ${data} <#sep><#if data1['domain_id']?? || data1['tenant_id']??>,${domain_id}</#if> <#if data1['user_id']?? || data1['created_by']??>,${user_id} </#if>)  </#sep> </#if> <#assign i=i+1> </#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXGa0xwGrLgx",
          "next": {
            "success": "hangup",
            "failure": "PBXsU9fBAbx1k"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXsU9fBAbx1k",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "${output2}",
          "value_type": "ftl",
          "output_variable": "output2",
          "type": "sql-insert",
          "id": "PBXDmplGrmky7",
          "next": {
            "success": "PBXCAlC9EG4m4",
            "failure": "PBXE5ATRvnLeu"
          }
        },
        {
          "output_variable": "Condition",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXIUEKTxdeup",
          "next": {
            "success": "PBXS7pf1lrRkF",
            "failure": "PBXDmplGrmky7"
          }
        },
        {
          "name": "insertfail",
          "value": "Failed  insert",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXE5ATRvnLeu",
          "next": {
            "success": "PBXmSTlFxhz0c",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output2",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXS7pf1lrRkF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\" select1=\"\" table=\"\" schema=\"\"> \r\n<#if app['${key1}']??> <#assign select= app['${key1}']>  \r\n<#if select?contains(\"into\")> <#assign select1=select?keep_after(\"into\")> <#else>\r\n <#assign select1=select?keep_after(\"INTO\")> \r\n<#assign select1=select1?keep_before(\"(\")?replace(\"`\",\"\")>\r\n </#if>\r\n</#if>\r\n\r\n\r\n<#assign table=select1?keep_after(\".\") schema=select1?keep_before(\".\")>\r\n\r\nSELECT concat('{',group_concat( concat('\"',COLUMN_NAME,'\":\"',COLUMN_NAME,'\"')),'}') json FROM information_schema.columns where TABLE_SCHEMA = '${schema?replace(\" \",\"\")?replace(\"`\",\"\")}' and table_name = '${table?replace(\" \",\"\")?replace(\"`\",\"\")}' and  COLUMN_NAME in('${app.id_type}','user_id','created_by');\r\n",
          "value_type": "ftl",
          "output_variable": "schema_data",
          "type": "sql",
          "id": "PBXbLpTV7XcyF",
          "next": {
            "success": "PBXGa0xwGrLgx",
            "failure": "PBXTDtDHayn9F"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXPcqQIbCD23",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "Failed select",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXTDtDHayn9F",
          "next": {
            "success": "PBXPcqQIbCD23",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "schema_data",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXAttatgU3yH",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "json",
          "value": "${output?replace('\"','##$$%%')}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXCIlAtbBzIB",
          "next": {
            "success": "PBXPHy1e4QaDm",
            "failure": "hangup"
          }
        },
        {
          "name": "output2",
          "value": "${output1?replace('##$$%%','\"')}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX1e6XPLhWtu",
          "next": {
            "success": "PBXIUEKTxdeup",
            "failure": "hangup"
          }
        },
        {
          "name": "output",
          "value": "<#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\" select1=\"\" table=\"\" schema=\"\">  <#if app['${key1}']??> <#assign select= app['${key1}']>   <#if select?contains(\"into\")> <#assign select1=select?keep_after(\"into\")> <#else>  <#assign select1=select?keep_after(\"INTO\")>  <#assign select1=select1?keep_before(\"(\")?replace(\"`\",\"\")>  </#if> </#if> <#assign table1=select1?keep_before(\"(\")><#assign table=table1?replace(\" \",\"\")>  <#assign check=1> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1><#if table==v1><#assign check=0></#if></#list></#if>   <#assign key1='custom.query.'+'${request.path.entity_id}' select=\"\">  <#assign select= app['${key1}']>  <#assign i=0> <#list select?split(\")\") as data>  <#if i= 0> ${data}<#if check==1> ,domain_id,created_by</#if>) <#else> ${data} <#sep><#if check==1>,${domain_id},${user_id}</#if>)  </#sep> </#if> <#assign i=i+1> </#list>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX0mTGQasven",
          "next": {
            "success": "PBXCIlAtbBzIB",
            "failure": "PBXM0peNbRA1m"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXM0peNbRA1m",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142199,
      "name": "barchart",
      "trigger": "rest",
      "expression": "/r/bar",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXlUTwRqzGfL"
          }
        },
        {
          "name": "barchart1",
          "value": "Failed d",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX95mObN71m2",
          "next": {
            "success": "PBXlEBsr7HQIa",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXpADXEr488V",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart1",
          "http_response_code": "404",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlEBsr7HQIa",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> select ${request.body.data.x_axis} as name,json_array(${request.body.data.function}(${request.body.data.y_axis})) as data from \r\n<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}> \r\n</#list> </#if>\r\n<#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>\r\n\r\n`${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   \r\n<#if !tables_tenant['${t?keys[0]}']??> and\r\n`${t?values[0]}`.`domain_id`=${domain_id}  </#if>  \r\n</#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>    \r\n\r\n<#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if> \r\n\r\n<#if request.body.data.where??>  <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if> \r\n \r\n  <#assign a += request.body.data.where +\" \"> </#if> \r\n \r\n<#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if>\r\n<#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXLWqvFc1bhP",
          "next": {
            "success": "PBXZzrnfdrD1u",
            "failure": "PBX95mObN71m2"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXHzX5VIVh6y",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "result_set_fail",
          "value": "failed at retrieving table names",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXi3NNsMBQyu",
          "next": {
            "success": "PBX3wfyeEfh31",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result_set_fail",
          "http_response_code": "404",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX3wfyeEfh31",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXlUTwRqzGfL",
          "next": {
            "success": "PBXtX1ySk0VtT",
            "failure": "PBXJ6HyfKXtAz"
          }
        },
        {
          "name": "query",
          "value": "<#compress> select ${request.body.data.x_axis} as name,json_array(${request.body.data.function}(${request.body.data.y_axis})) as data from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>  `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if request.body.data.where??>  <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>      <#assign a += request.body.data.where +\" \"> </#if>    <#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if> <#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXtX1ySk0VtT",
          "next": {
            "success": "PBX9rsbS0oVNR",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "query",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX9rsbS0oVNR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXJ6HyfKXtAz",
          "next": {
            "success": "PBXaR67wozx6H",
            "failure": "PBXLWqvFc1bhP"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> select ${request.body.data.x_axis} as name,json_array(${request.body.data.function}(${request.body.data.y_axis})) as data from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>  `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if request.body.data.where??>  <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>      <#assign a += request.body.data.where +\" \"> </#if>    <#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if> <#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXaR67wozx6H",
          "next": {
            "success": "PBXL0msZlm4do",
            "failure": "PBX9pcEVaKDmA"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX9pcEVaKDmA",
          "next": {
            "success": "PBXoT7QIXuiRw",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWmfqGg7p8O",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXoT7QIXuiRw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "barchart1",
          "value": "{\"count\":\"${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXfhf7fJSqUM",
          "next": {
            "success": "PBXvnNvmJz5WJ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXvnNvmJz5WJ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXZzrnfdrD1u",
          "next": {
            "success": "PBXfhf7fJSqUM",
            "failure": "PBXpADXEr488V"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXL0msZlm4do",
          "next": {
            "success": "PBXWmfqGg7p8O",
            "failure": "PBX027npktNAx"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX027npktNAx",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142200,
      "name": "pie_chart",
      "trigger": "rest",
      "expression": "/r/pie",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXx8aK3d9Gl2"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>\r\n<#assign a = ''>\r\n<#assign o=' '>\r\n<#assign z=' '>\r\n\r\n<#assign dis=''>\r\n<#if request.body.data.distinct?? && request.body.data.distinct=='true'> <#assign dis=\" distinct  ${request.body.data.main_table},\" > </#if>\r\n\r\n<#assign pie_col=request.body.data.pie?keep_after_last('.')>\r\n<#assign values='[\"'+request.body.data['${pie_col}']!?replace(',','\",\"') +'\"]'>\r\n<#assign con=values?eval>\r\nselect cast( concat('{\"total\":\"',${request.body.data.Aggregate}(${dis} ${request.body.data.percentage_by})\r\n<#list con as v>\r\n,'\",\"${v}\":\"',round((${request.body.data.Aggregate}(${dis}  if(name = '${v}','1',null))/${request.body.data.Aggregate}(${dis} ${request.body.data.percentage_by})*100),2)\r\n</#list>\r\n<#assign tables = request.body.data.tables data=\"\"> \r\n<#list 0..request.body.data.tables?size-1 as i>\r\n<#assign data= data + \"${tables[i]?keys[0]} ${tables[i]?values[0]}  \">\r\n<#if request.body.data.join??><#assign join=request.body.data.join><#assign data= data + \"join${i}\"> </#if>\r\n</#list>\r\n\r\n,'\"}') as char) json \r\n FROM \r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if t?index==0>\r\n<#assign a+=\" \"+key+\" \">\r\n<#assign a+=\" \"+value+\" \">\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#if request.body.data.join??>\r\n<#list request.body.data.join as k2><#list k2 as key, value>\r\n<#if key==\"table1\">\r\n<#assign a+=\" ON \"+value>\r\n<#elseif key==\"join_column1\">\r\n<#assign a+=\".\"+value>\r\n<#elseif key==\"table2\">\r\n<#assign a+=\" = \"+value> \r\n<#elseif key==\"join_column2\">\r\n<#assign a+=\".\"+value>\r\n<#assign a+=\" and\">\r\n<#list result_set as a>\r\n<#list a?values as v>\r\n<#list request.body.data.tables as t>\r\n<#list t?keys as k>\r\n<#list t?values as g>\r\n<#if v==k>\r\n<#if k2?index+1==t?index>\r\n<#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\">\r\n<#assign a+=domain_id +\" \">\r\n<#assign a+=\"and\"+\" \">\r\n</#if>\r\n</#if>\r\n</#list></#list></#list></#list></#list>\r\n<#if a?trim?ends_with(\"and\")>\r\n<#assign a=a?substring(0,a?length-4)>\r\n</#if>\r\n<#elseif key?? && key==\"join_type\">\r\n<#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter>\r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if k3?counter==t?index>\r\n<#assign a+=\" \"+key>\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#assign a+=\" \"+value>\r\n</#if></#list></#list>\r\n</#if> \r\n</#list></#list>\r\n</#if>\r\n<#list request.body.data.tables as tab>\r\n<#list tab?keys as k>\r\n<#list tab?values as v>\r\n<#if tab?index==0> \r\n<#list result_set as rs>\r\n<#list rs?values as rsv>\r\n<#if k==rsv>\r\n<#assign z+='1'>\r\n<#assign o=o+v>\r\n<#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id>\r\n</#if>\r\n</#list></#list></#if>\r\n</#list></#list></#list>\r\n<#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if>\r\n<#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if>\r\n<#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if>\r\n<#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if>\r\n${a} where  ${request.body.data.pie} in('${request.body.data.name?replace(',',\"','\")}') <#if z=='1' > and  ${o} </#if><#if request.body.data.where??>and ${request.body.data.where}</#if>\r\n</#compress>\r\n\r\n\r\n\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "join_select",
          "type": "sql",
          "id": "PBXhMFDmDkmJe",
          "next": {
            "success": "PBXHPnbefALcr",
            "failure": "PBXZLZ4KR6g14"
          }
        },
        {
          "name": "joins_preview",
          "value": "<#compress> <#assign a = ''> <#assign o=' '> <#assign z=' '>  <#assign dis=''> <#if request.body.data.distinct?? && request.body.data.distinct=='true'> <#assign dis=\" distinct  ${request.body.data.main_table},\" > </#if>  <#assign pie_col=request.body.data.pie?keep_after_last('.')> <#assign values='[\"'+request.body.data['${pie_col}']!?replace(',','\",\"') +'\"]'> <#assign con=values?eval> select cast( concat('{\"total\":\"',${request.body.data.Aggregate}(${dis} ${request.body.data.percentage_by}) <#list con as v> ,'\",\"${v}\":\"',round((${request.body.data.Aggregate}(${dis}  if(name = '${v}','1',null))/${request.body.data.Aggregate}(${dis} ${request.body.data.percentage_by})*100),2) </#list> <#assign tables = request.body.data.tables data=\"\">  <#list 0..request.body.data.tables?size-1 as i> <#assign data= data + \"${tables[i]?keys[0]} ${tables[i]?values[0]}  \"> <#if request.body.data.join??><#assign join=request.body.data.join><#assign data= data + \"join${i}\"> </#if> </#list>  ,'\"}') as char) json   FROM  <#list request.body.data.tables as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.data.join??> <#list request.body.data.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value> <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.data.tables as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.data.tables as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> <#list request.body.data.tables as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} where  ${request.body.data.pie} in('${request.body.data.name?replace(',',\"','\")}') <#if z=='1' > and  ${o} </#if><#if request.body.data.where??>and ${request.body.data.where}</#if> </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXPyTK6I4gyV",
          "next": {
            "success": "PBXuOZ2qEBuVl",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins_preview",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXuOZ2qEBuVl",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXx8aK3d9Gl2",
          "next": {
            "success": "PBXDLqmXPvEbH",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "join_select",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXL0T3sUoHc1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXDLqmXPvEbH",
          "next": {
            "success": "PBXPyTK6I4gyV",
            "failure": "PBXNMDTo8ZsDT"
          }
        },
        {
          "name": "joins2",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXZLZ4KR6g14",
          "next": {
            "success": "PBXNbPvOwhxCK",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins2",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXNbPvOwhxCK",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "chart",
          "value": "<#if request.body.config??>1 <#else>0 </#if>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXHPnbefALcr",
          "next": {
            "success": "PBXgzBA7Pda8V",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "chart1",
          "if_type": "value",
          "variable1": "${chart}",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXtJZS4T6bQ7",
          "next": {
            "success": "PBXM2RtZeTzLF",
            "failure": "PBXL0T3sUoHc1"
          }
        },
        {
          "exception_handle": "true",
          "workflow_id": "config",
          "type": "execute-workflows",
          "id": "PBXM2RtZeTzLF",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXNMDTo8ZsDT",
          "next": {
            "success": "PBXLJDKlcizi3",
            "failure": "PBXhMFDmDkmJe"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> <#assign a = ''> <#assign o=' '> <#assign z=' '>  <#assign dis=''> <#if request.body.data.distinct?? && request.body.data.distinct=='true'> <#assign dis=\" distinct  ${request.body.data.main_table},\" > </#if>  <#assign pie_col=request.body.data.pie?keep_after_last('.')> <#assign values='[\"'+request.body.data['${pie_col}']!?replace(',','\",\"') +'\"]'> <#assign con=values?eval> select cast( concat('{\"total\":\"',${request.body.data.Aggregate}(${dis} ${request.body.data.percentage_by}) <#list con as v> ,'\",\"${v}\":\"',round((${request.body.data.Aggregate}(${dis}  if(name = '${v}','1',null))/${request.body.data.Aggregate}(${dis} ${request.body.data.percentage_by})*100),2) </#list> <#assign tables = request.body.data.tables join=request.body.data.join data=\"\"> <#list 0..request.body.data.tables?size-1 as i> <#assign data= data + \"${tables[i]?keys[0]} ${tables[i]?values[0]} join${i}\"> </#list> ,'\"}') as char) json   FROM  <#list request.body.data.tables as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.data.join??> <#list request.body.data.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value> <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.data.tables as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.data.tables as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> <#list request.body.data.tables as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#if request.body.data.group_by??><#assign a += \" group by \" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} where  ${request.body.data.pie} in('${request.body.data.name?replace(',',\"','\")}') <#if z=='1' > and  ${o} </#if><#if request.body.data.where??>and ${request.body.data.where}</#if> </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXLJDKlcizi3",
          "next": {
            "success": "PBX67G2IXSoch",
            "failure": "PBXVTFvIC8mwh"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXVTFvIC8mwh",
          "next": {
            "success": "PBXTFOmsCPEoE",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX4NrBNS0GTP",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXTFOmsCPEoE",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXgzBA7Pda8V",
          "next": {
            "success": "PBXJUTCZULsad",
            "failure": "PBXtJZS4T6bQ7"
          }
        },
        {
          "name": "joins2",
          "value": "{\"count\":\"${join_select?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXJUTCZULsad",
          "next": {
            "success": "PBXaF26JG0tCZ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "joins2",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXaF26JG0tCZ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBX67G2IXSoch",
          "next": {
            "success": "PBX4NrBNS0GTP",
            "failure": "PBXkAkFe0oC3S"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkAkFe0oC3S",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142201,
      "name": "funnel_chart",
      "trigger": "rest",
      "expression": "/r/fc",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXHzX5VIVh6y"
          }
        },
        {
          "name": "barchart1",
          "value": "Failed",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX95mObN71m2",
          "next": {
            "success": "PBXlEBsr7HQIa",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart12",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXpADXEr488V",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart1",
          "http_response_code": "404",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlEBsr7HQIa",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "<#compress>\r\n<#assign a = ''>\r\n<#assign o=' '>\r\n<#assign z=' '>\r\nselect ${request.body.data.x_axis} as name,json_array(${request.body.data.y_axis},${request.body.data.function}(${request.body.data.y_axis})) as data\r\n\r\n FROM \r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if t?index==0>\r\n<#assign a+=\" \"+key+\" \">\r\n<#assign a+=\" \"+value+\" \">\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#if request.body.data.join??>\r\n<#list request.body.data.join as k2><#list k2 as key, value>\r\n<#if key==\"table1\">\r\n<#assign a+=\" ON \"+value>\r\n<#elseif key==\"join_column1\">\r\n<#assign a+=\".\"+value>\r\n<#elseif key==\"table2\">\r\n<#assign a+=\" = \"+value> \r\n<#elseif key==\"join_column2\">\r\n<#assign a+=\".\"+value>\r\n<#assign a+=\" and\">\r\n<#list result_set as a>\r\n<#list a?values as v>\r\n<#list request.body.data.tables as t>\r\n<#list t?keys as k>\r\n<#list t?values as g>\r\n<#if v==k>\r\n<#if k2?index+1==t?index>\r\n<#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\">\r\n<#assign a+=domain_id +\" \">\r\n<#assign a+=\"and\"+\" \">\r\n</#if>\r\n</#if>\r\n</#list></#list></#list></#list></#list>\r\n<#if a?trim?ends_with(\"and\")>\r\n<#assign a=a?substring(0,a?length-4)>\r\n</#if>\r\n<#elseif key?? && key==\"join_type\">\r\n<#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter>\r\n<#list request.body.data.tables as t>\r\n<#list t as key, value>\r\n<#if k3?counter==t?index>\r\n<#assign a+=\" \"+key>\r\n</#if>\r\n</#list>\r\n</#list>\r\n<#assign a+=\" \"+value>\r\n</#if></#list></#list>\r\n</#if> \r\n</#list></#list>\r\n</#if>\r\n<#list request.body.data.tables as tab>\r\n<#list tab?keys as k>\r\n<#list tab?values as v>\r\n<#if tab?index==0> \r\n<#list result_set as rs>\r\n<#list rs?values as rsv>\r\n<#if k==rsv>\r\n<#assign z+='1'>\r\n<#assign o=o+v>\r\n<#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id>\r\n</#if>\r\n</#list></#list></#if>\r\n</#list></#list></#list>\r\n<#if z==' 1' || request.body.data.where??>\r\n<#assign a+=\" where\">\r\n<#if z==' 1'>\r\n<#assign a+=o>\r\n<#if request.body.data.where??>\r\n<#assign a+=\" and\">\r\n</#if>\r\n</#if>\r\n<#if request.body.data.where??>\r\n<#assign a+=\" \"+request.body.data.where>\r\n</#if>\r\n</#if>\r\n<#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if>\r\n<#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if>\r\n<#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if>\r\n<#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if>\r\n${a}\r\n</#compress> ",
          "value_type": "ftl",
          "output_variable": "barchart",
          "type": "sql",
          "id": "PBXLWqvFc1bhP",
          "next": {
            "success": "PBXRrxw6L6ksU",
            "failure": "PBX95mObN71m2"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXHzX5VIVh6y",
          "next": {
            "success": "PBXlUTwRqzGfL",
            "failure": "PBXi3NNsMBQyu"
          }
        },
        {
          "name": "result_set_fail",
          "value": "failed at retrieving table names",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXi3NNsMBQyu",
          "next": {
            "success": "PBX3wfyeEfh31",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result_set_fail",
          "http_response_code": "404",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX3wfyeEfh31",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXlUTwRqzGfL",
          "next": {
            "success": "PBXtX1ySk0VtT",
            "failure": "PBXI663S4xwWV"
          }
        },
        {
          "name": "query",
          "value": "<#compress> <#assign a = ''> <#assign o=' '> <#assign z=' '> select ${request.body.data.x_axis} as name,json_array(${request.body.data.y_axis},${request.body.data.function}(${request.body.data.y_axis})) as data   FROM  <#list request.body.data.tables as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.data.join??> <#list request.body.data.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value> <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.data.tables as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.data.tables as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> <#list request.body.data.tables as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#if z==' 1' || request.body.data.where??> <#assign a+=\" where\"> <#if z==' 1'> <#assign a+=o> <#if request.body.data.where??> <#assign a+=\" and\"> </#if> </#if> <#if request.body.data.where??> <#assign a+=\" \"+request.body.data.where> </#if> </#if> <#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if> <#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress> ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXtX1ySk0VtT",
          "next": {
            "success": "PBX9rsbS0oVNR",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "query",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX9rsbS0oVNR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\n var a=map.barchart;\r\n\r\nvar b=[];\r\nvar c={\"name\":\"funnel\",\"data\":[]};\r\n  for(var i=0;i<a.length;i++){\r\n c.data.push(JSON.parse(a[i].data));     \r\n}\r\n \r\n //var d = JSON.stringify(b);\r\n //var e1 = decodeURI(d);\r\nb.push(c);\r\n\r\nmap.put('funnelchart',JSON.stringify(b));\r\n}\r\n\r\ncatch(e){\r\nmap.put('err',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBXm0nyWMxgws",
          "next": {
            "success": "PBXHZKH16TfIy",
            "failure": "hangup"
          }
        },
        {
          "name": "barchart12",
          "value": "{{{funnelchart}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXHZKH16TfIy",
          "next": {
            "success": "PBXpADXEr488V",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXI663S4xwWV",
          "next": {
            "success": "PBXJmA0LXxTUm",
            "failure": "PBXLWqvFc1bhP"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> <#assign a = ''> <#assign o=' '> <#assign z=' '> select ${request.body.data.x_axis} as name,json_array(${request.body.data.y_axis},${request.body.data.function}(${request.body.data.y_axis})) as data   FROM  <#list request.body.data.tables as t> <#list t as key, value> <#if t?index==0> <#assign a+=\" \"+key+\" \"> <#assign a+=\" \"+value+\" \"> </#if> </#list> </#list> <#if request.body.data.join??> <#list request.body.data.join as k2><#list k2 as key, value> <#if key==\"table1\"> <#assign a+=\" ON \"+value> <#elseif key==\"join_column1\"> <#assign a+=\".\"+value> <#elseif key==\"table2\"> <#assign a+=\" = \"+value>  <#elseif key==\"join_column2\"> <#assign a+=\".\"+value> <#assign a+=\" and\"> <#list result_set as a> <#list a?values as v> <#list request.body.data.tables as t> <#list t?keys as k> <#list t?values as g> <#if v==k> <#if k2?index+1==t?index> <#assign a+=\" \"+ g +\".\"+ app.id_type +\"=\"> <#assign a+=domain_id +\" \"> <#assign a+=\"and\"+\" \"> </#if> </#if> </#list></#list></#list></#list></#list> <#if a?trim?ends_with(\"and\")> <#assign a=a?substring(0,a?length-4)> </#if> <#elseif key?? && key==\"join_type\"> <#assign a+=\" \"+value+\" \"> <#list request.body.data.join as k3><#list k3 as key, value><#if key==\"table2\" && k2?counter == k3?counter> <#list request.body.data.tables as t> <#list t as key, value> <#if k3?counter==t?index> <#assign a+=\" \"+key> </#if> </#list> </#list> <#assign a+=\" \"+value> </#if></#list></#list> </#if>  </#list></#list> </#if> <#list request.body.data.tables as tab> <#list tab?keys as k> <#list tab?values as v> <#if tab?index==0>  <#list result_set as rs> <#list rs?values as rsv> <#if k==rsv> <#assign z+='1'> <#assign o=o+v> <#assign o=o+\".\"+ app.id_type+ \"=\" +domain_id> </#if> </#list></#list></#if> </#list></#list></#list> <#if z==' 1' || request.body.data.where??> <#assign a+=\" where\"> <#if z==' 1'> <#assign a+=o> <#if request.body.data.where??> <#assign a+=\" and\"> </#if> </#if> <#if request.body.data.where??> <#assign a+=\" \"+request.body.data.where> </#if> </#if> <#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if> <#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress> ",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXJmA0LXxTUm",
          "next": {
            "success": "PBXtrHxp9Tf18",
            "failure": "PBXIvlbmZdxxe"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXIvlbmZdxxe",
          "next": {
            "success": "PBXytdS44Hmde",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXXsqp5mZyZT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXytdS44Hmde",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXRrxw6L6ksU",
          "next": {
            "success": "PBXXddOcW0Ol7",
            "failure": "PBXm0nyWMxgws"
          }
        },
        {
          "name": "barchart1",
          "value": "{\"count\":\"${barchart?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXXddOcW0Ol7",
          "next": {
            "success": "PBXkaTQTdfPPC",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkaTQTdfPPC",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXtrHxp9Tf18",
          "next": {
            "success": "PBXXsqp5mZyZT",
            "failure": "PBXIrxGwtnyZX"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXIrxGwtnyZX",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142199,
      "name": "barchart",
      "trigger": "rest",
      "expression": "/r/line",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXlUTwRqzGfL"
          }
        },
        {
          "name": "barchart1",
          "value": "Failed d",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX95mObN71m2",
          "next": {
            "success": "PBXlEBsr7HQIa",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "output",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXpADXEr488V",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart1",
          "http_response_code": "404",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXlEBsr7HQIa",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "plugin_name": "db_plugin",
          "value": "<#compress> select ${request.body.data.x_axis} as name,json_array(${request.body.data.function}(${request.body.data.y_axis})) as data from \r\n<#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}> \r\n</#list> </#if>\r\n<#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>\r\n\r\n`${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`   \r\n<#if !tables_tenant['${t?keys[0]}']??> and\r\n`${t?values[0]}`.`domain_id`=${domain_id}  </#if>  \r\n</#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>    \r\n\r\n<#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if> \r\n\r\n<#if request.body.data.where??>  <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if> \r\n \r\n  <#assign a += request.body.data.where +\" \"> </#if> \r\n \r\n<#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if>\r\n<#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "output_variable": "output",
          "type": "sql",
          "id": "PBXLWqvFc1bhP",
          "next": {
            "success": "PBXZzrnfdrD1u",
            "failure": "PBX95mObN71m2"
          }
        },
        {
          "plugin_name": "rd_plugin",
          "value": "SELECT distinct(table_name) as tables\r\nFROM information_schema.columns\r\nwhere column_name='${app.id_type}';\r\n\r\n",
          "value_type": "ftl",
          "output_variable": "result_set",
          "type": "sql",
          "id": "PBXHzX5VIVh6y",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "result_set_fail",
          "value": "failed at retrieving table names",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXi3NNsMBQyu",
          "next": {
            "success": "PBX3wfyeEfh31",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "result_set_fail",
          "http_response_code": "404",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX3wfyeEfh31",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "a",
          "if_type": "value",
          "variable1": "{{request.params.preview}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXlUTwRqzGfL",
          "next": {
            "success": "PBXtX1ySk0VtT",
            "failure": "PBXJ6HyfKXtAz"
          }
        },
        {
          "name": "query",
          "value": "<#compress> select ${request.body.data.x_axis} as name,json_array(${request.body.data.function}(${request.body.data.y_axis})) as data from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>  `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if request.body.data.where??>  <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>      <#assign a += request.body.data.where +\" \"> </#if>    <#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if> <#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXtX1ySk0VtT",
          "next": {
            "success": "PBX9rsbS0oVNR",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "query",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX9rsbS0oVNR",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.export}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXJ6HyfKXtAz",
          "next": {
            "success": "PBXaR67wozx6H",
            "failure": "PBXLWqvFc1bhP"
          }
        },
        {
          "mysql_plugin_name": "db_plugin",
          "value": "<#compress> select ${request.body.data.x_axis} as name,json_array(${request.body.data.function}(${request.body.data.y_axis})) as data from  <#assign tables_tenant={}> <#if app.non_domain_tables??>  <#list app.non_domain_tables?split(\",\") as v1> <#assign str = v1 > <#assign tables_tenant = tables_tenant +{\"${str}\":\"0\"}>  </#list> </#if> <#assign a = '' i=0 join = request.body.data.join> <#list request.body.data.table_name as t> <#if testreferer??> `${testreferer}`.</#if>  `${t?keys[0]}` `${t?values[0]}`<#rt> <#if i != 0>  on `${join[i-1].table1?replace(\"`\",\"\")}`.`${join[i-1].join_column1?replace(\"`\",\"\")}` =`${join[i-1].table2?replace(\"`\",\"\")}`.`${join[i-1].join_column2?replace(\"`\",\"\")}`    <#if !tables_tenant['${t?keys[0]}']??> and `${t?values[0]}`.`domain_id`=${domain_id}  </#if>   </#if> <#sep> ${join[i].join_type} <#sep> <#assign i=i+1> </#list>      <#assign c=0> <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??> where `${request.body.data.table_name[0]? values[0]}`.`domain_id` =${domain_id} <#assign c=1></#if>   <#if request.body.data.where??>  <#if !tables_tenant['${request.body.data.table_name[0]?keys[0]}']??>and <#else>where </#if>      <#assign a += request.body.data.where +\" \"> </#if>    <#if request.body.data.x_axis??><#assign a += \" group by \" +\"name\"+\" \"> </#if> <#if request.body.data.group_by??><#assign a += \",\" + request.body.data.group_by +\" \"> </#if> <#if request.body.data.having??><#assign a += \" having \" + request.body.data.having +\" \"> </#if> <#if request.body.data.order_by??><#assign a += \" order by \" + request.body.data.order_by +\" \"> </#if> <#if request.body.data.order_by_type??><#assign a += request.body.data.order_by_type></#if><#if request.body.data.limit??><#assign a += \" limit \" + request.body.data.limit+\" \"> <#elseif app.limit??><#assign a += \" limit \" + app.limit><#else><#assign a += \" limit 100 \"> </#if> <#if request.body.data.offset??><#assign a += \" offset \" + request.body.data.offset></#if> ${a} </#compress>",
          "value_type": "ftl",
          "bucket_name": "${request.params.bucket_name}",
          "file_name": "${request.params.file_name}",
          "s3_plugin_name": "temp_trash",
          "output_variable": "export",
          "type": "sql-s3-export",
          "id": "PBXaR67wozx6H",
          "next": {
            "success": "PBXL0msZlm4do",
            "failure": "PBX9pcEVaKDmA"
          }
        },
        {
          "name": "export",
          "value": "export fail",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX9pcEVaKDmA",
          "next": {
            "success": "PBXoT7QIXuiRw",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWmfqGg7p8O",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "export",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXoT7QIXuiRw",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "barchart1",
          "value": "{\"count\":\"${output?size}\"}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXfhf7fJSqUM",
          "next": {
            "success": "PBXvnNvmJz5WJ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "barchart1",
          "http_response_code": "200",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXvnNvmJz5WJ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "e",
          "if_type": "value",
          "variable1": "{{request.params.gc}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXZzrnfdrD1u",
          "next": {
            "success": "PBXfhf7fJSqUM",
            "failure": "PBXpADXEr488V"
          }
        },
        {
          "file_name": "${request.params.file_name}",
          "output_variable": "a",
          "expiration_time_in_sec": "9999",
          "bucket_name": "${request.params.bucket_name}",
          "value_type": "ftl",
          "method": "GET",
          "access_level": "PublicReadWrite",
          "plugin_name": "temp_trash",
          "type": "s3-pre-sign-url",
          "id": "PBXL0msZlm4do",
          "next": {
            "success": "PBXWmfqGg7p8O",
            "failure": "PBX027npktNAx"
          }
        },
        {
          "variable_name": "a",
          "http_response_code": "400",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "ftl",
          "type": "send",
          "id": "PBX027npktNAx",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": 142202,
      "name": "email_reports",
      "trigger": "rest",
      "expression": "emailreport",
      "method": "POST",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXbwbh2fZDW6"
          }
        },
        {
          "json_is": "true",
          "json_name": "responce",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "responce",
              "value": "mail sent successfully"
            }
          ],
          "type": "set-var-multi",
          "id": "PBXO4b5pwb8lM",
          "next": {
            "success": "PBXkhrbpP5gAA",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkhrbpP5gAA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "json_is": "true",
          "json_name": "responce",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "responce",
              "value": "fail to sent"
            }
          ],
          "type": "set-var-multi",
          "id": "PBXAgaPn1Tn6k",
          "next": {
            "success": "PBXJfDQDtla2i",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXJfDQDtla2i",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "select",
          "value": "success myoutput ${myoutput!}  strit  ${strit!}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXIEnxzXZldz",
          "next": {
            "success": "PBXEzpJHm8kZ9",
            "failure": "PBXyT9yUMVae1"
          }
        },
        {
          "output_variable": "a1",
          "if_type": "value",
          "variable1": "{{request.params.emailreport}}",
          "comparator": "equal_to",
          "variable2": "true",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXUlDTsTc0XW",
          "next": {
            "success": "PBXgO7qOi5I8v",
            "failure": "PBXS4qEbKHavv"
          }
        },
        {
          "name": "body1",
          "value": "<#assign email='${request.params.emailreport!}'>  <#if email='true'> email <#elseif request.body.id??> <#assign key1='body.template.'+'${request.body.id!}'> <#if app['${key1}']??> ${app['${key1}']}</#if><#elseif request.body.html??> ${request.body.html!} <#elseif request.body.body??> ${request.body.body!} <#else> 0 </#if> ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXS4qEbKHavv",
          "next": {
            "success": "PBXhaERHvB1nw",
            "failure": "hangup"
          }
        },
        {
          "name": "body",
          "value": "${request.body.body}",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXyAL2bJIrMk",
          "next": {
            "success": "PBXBzxWcCJCvK",
            "failure": "PBXWDltic3VON"
          }
        },
        {
          "value": "${body}",
          "value_type": "ftl",
          "output_variable": "body1",
          "type": "template",
          "id": "PBXBzxWcCJCvK",
          "next": {
            "success": "hangup",
            "failure": "PBXk03TF5rRm9"
          }
        },
        {
          "variable_name": "op99",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXWDltic3VON",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value": "${body1!}",
          "value_type": "ftl",
          "output_variable": "body",
          "type": "template",
          "id": "PBXrtVTTdMhdL",
          "next": {
            "success": "PBXevloAaHrAF",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXflWBUtT9qi",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value_type": "ftl",
          "plugin_name": "sendgridkey",
          "from_name": "${request.body.fromname!}",
          "from_email": "${email}",
          "to_email": "${request.body.toemail}",
          "cc_email": "${request.body.cc!}",
          "bcc_email": "${request.body.bcc!}",
          "subject": "${request.body.subject!}",
          "body_type": "text_body",
          "body": "${body!}",
          "type": "sendgrid-email",
          "id": "PBX6EWHcnJ0O1",
          "next": {
            "success": "PBXO4b5pwb8lM",
            "failure": "PBXAgaPn1Tn6k"
          }
        },
        {
          "json_is": "true",
          "json_name": "responce",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "responce",
              "value": "mail sent successfully"
            }
          ],
          "type": "set-var-multi",
          "id": "PBX2ac06CbeFU",
          "next": {
            "success": "PBXzyTC16oEHV",
            "failure": "hangup"
          }
        },
        {
          "json_is": "true",
          "json_name": "responce",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "responce",
              "value": "fail to sent"
            },
            {
              "key": "fromname",
              "value": "${request.params.fromname!}"
            },
            {
              "key": "fromemail",
              "value": "${email}"
            },
            {
              "key": "toemail",
              "value": "${request.params.toemail}"
            },
            {
              "key": "cc",
              "value": "${request.params.cc!}"
            },
            {
              "key": "bcc",
              "value": "${request.params.bcc!}"
            },
            {
              "key": "subject",
              "value": "${request.params.subject!}"
            },
            {
              "key": "body",
              "value": "${select!}"
            }
          ],
          "type": "set-var-multi",
          "id": "PBX7ou95O7wCe",
          "next": {
            "success": "PBXLsdWp0w6SB",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXI8BZxtowlO",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXLsdWp0w6SB",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value_type": "ftl",
          "plugin_name": "sendgridkey",
          "from_name": "${request.body.fromname!}",
          "from_email": "${email}",
          "to_email": "${request.body.toemail}",
          "cc_email": "${request.body.cc!}",
          "bcc_email": "${request.body.bcc!}",
          "subject": "${request.body.subject!}",
          "body_type": "html_body",
          "body": "${body!}",
          "type": "sendgrid-email",
          "id": "PBXEAUTO1O3KU",
          "next": {
            "success": "PBXAbiTFXFQwV",
            "failure": "PBXUwJrgvMO9b"
          }
        },
        {
          "json_is": "true",
          "json_name": "responce",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "responce",
              "value": "mail sent successfully"
            }
          ],
          "type": "set-var-multi",
          "id": "PBXAbiTFXFQwV",
          "next": {
            "success": "PBXRLwquseSlm",
            "failure": "hangup"
          }
        },
        {
          "json_is": "true",
          "json_name": "responce",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "variables": [
            {
              "key": "responce",
              "value": "fail to sent"
            }
          ],
          "type": "set-var-multi",
          "id": "PBXUwJrgvMO9b",
          "next": {
            "success": "PBXcTXGe6nBQQ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXRLwquseSlm",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXcTXGe6nBQQ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "condition",
          "value": "<#if request.body.html??> 1 <#else> 0 </#if> ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXhaERHvB1nw",
          "next": {
            "success": "PBXrtVTTdMhdL",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "html",
          "if_type": "value",
          "variable1": "${condition}",
          "comparator": "equal_to",
          "variable2": "1",
          "value_type": "ftl",
          "type": "if-condition",
          "id": "PBXevloAaHrAF",
          "next": {
            "success": "PBXEAUTO1O3KU",
            "failure": "PBX6EWHcnJ0O1"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXEzpJHm8kZ9",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "email",
          "value": "${request.params.fromemail!}<#if request.body??> ${request.body.fromemail!}</#if>",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXbwbh2fZDW6",
          "next": {
            "success": "PBXUlDTsTc0XW",
            "failure": "hangup"
          }
        },
        {
          "value": "${email}",
          "value_type": "ftl",
          "output_variable": "email1",
          "type": "template",
          "id": "PBXxZv4BQ0IG9",
          "next": {
            "success": "hangup",
            "failure": "PBX6GxbO6zXsE"
          }
        },
        {
          "variable_name": "op99",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXPT0164ZGBA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "set",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXCg7twsWz4s",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "op",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXk03TF5rRm9",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "op",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBX6GxbO6zXsE",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "print(\"js node begin\");\r\nvar a1 = JSON.stringify(map.output);\r\nprint('output');\r\nprint(map.output);\r\nprint('a1');\r\nprint(a1);\r\nprint('myoutput');\r\nmap.myoutput=typeof(a1);\r\nprint(map.myoutput);\r\nprint(\"js node end\");\r\nmap.put('strit',a1);",
          "inline": "true",
          "type": "code-js",
          "id": "PBXwsTtSrkmWZ",
          "next": {
            "success": "PBXIEnxzXZldz",
            "failure": "PBXh0X2yDh2aV"
          }
        },
        {
          "name": "select",
          "value": "js field ",
          "value_type": "ftl",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXh0X2yDh2aV",
          "next": {
            "success": "PBXflWBUtT9qi",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXRGBHC7JGDy",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "401",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBXyT9yUMVae1",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "select",
          "value": "{{{output}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXgO7qOi5I8v",
          "next": {
            "success": "PBX1Xp9zaRei4",
            "failure": "PBXkaiVKA9TFr"
          }
        },
        {
          "name": "select1",
          "value": "${select?replace('=',':')}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXo3BCXEIhWy",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "value_type": "ftl",
          "plugin_name": "sendgridkey",
          "from_name": "<#compress><#if request.params.fromname??>${request.params.fromname!}<#else>${request.body.fromname!}</#if></#compress>",
          "from_email": "${email}",
          "to_email": "<#if request.params.toemail??>${request.params.toemail}<#else>${request.body.toemail}</#if>",
          "cc_email": "<#if request.params.cc??>${request.params.cc!}<#else>${request.body.cc!}</#if>",
          "bcc_email": "<#if request.params.bcc??>${request.params.bcc!}<#else>${request.body.bcc!}</#if>",
          "subject": "<#if request.params.subject??>${request.params.subject!}<#else>${request.body.subject!}</#if>",
          "body_type": "text_body",
          "body": "${select!}",
          "type": "sendgrid-email",
          "id": "PBX1Xp9zaRei4",
          "next": {
            "success": "PBX2ac06CbeFU",
            "failure": "PBX7ou95O7wCe"
          }
        },
        {
          "variable_name": "responce",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXzyTC16oEHV",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "select",
          "http_response_code": "400",
          "response_content_type": "application/json",
          "value_type": "ftl",
          "type": "send",
          "id": "PBXkaiVKA9TFr",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": "default-health",
      "name": "default-health",
      "trigger": "rest",
      "expression": "/_appup/_version",
      "method": "get",
      "steps": [
        {
          "id": "1",
          "type": "get-env-data",
          "action": "env",
          "variable": [
            "SERVER_START_TIME",
            "VERSION",
            "CLOUD_ID",
            "SVC_NAME",
            "IMAGE_TAG"
          ],
          "next": {
            "success": "prepareResponse"
          }
        },
        {
          "id": "prepareResponse",
          "type": "set-var-multi",
          "json_is": true,
          "json_name": "deployInfo",
          "variables": [
            {
              "key": "SERVER_START_TIME",
              "value": "{{SERVER_START_TIME}}"
            },
            {
              "key": "APP_NAME",
              "value": "{{SVC_NAME}}"
            },
            {
              "key": "CLOUD_ID",
              "value": "{{CLOUD_ID}}"
            },
            {
              "key": "VERSION",
              "value": "{{VERSION}}"
            },
            {
              "key": "DI_TAG",
              "value": "{{IMAGE_TAG}}"
            }
          ],
          "next": {
            "success": "send"
          }
        },
        {
          "id": "send",
          "type": "send",
          "variable_name": "deployInfo",
          "http_response_code": "200",
          "value_type": "hb"
        }
      ]
    },
    {
      "id": 144140,
      "name": "appinfo",
      "trigger": "rest",
      "expression": "/_appup/_info",
      "method": "GET",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "getenvdata"
          }
        },
        {
          "id": "getenvdata",
          "type": "get-env-data",
          "action": "env",
          "variable": ["VERSION", "CLOUD_ID", "SVC_NAME", "IMAGE_TAG"],
          "next": {
            "success": "getconfig"
          }
        },
        {
          "url": "https://appup-config.s3.amazonaws.com/{{{CLOUD_ID}}}/{{{SVC_NAME}}}/config.json",
          "method": "get",
          "headers": [],
          "output_variable": "configfile",
          "raw": "",
          "value_type": "hb",
          "query_parameters": [],
          "body_parameters": [],
          "type": "rest-simple",
          "id": "getconfig",
          "next": {
            "success": "jsontostring",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "typearay",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "send",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "info",
          "value": "{{{bytes2string configfile}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "jsontostring",
          "next": {
            "success": "getinfo",
            "failure": "hangup"
          }
        },
        {
          "src": "var workflow = JSON.parse(map.info);var typearry=[];var workflowarray = workflow.workflows;var plugins = workflow.plugins;var pluginsarray =[];var i;for(i=0;i<workflowarray.length;i++){ var w =  workflowarray[i]; var z;for(z in w){ var steps =w.steps; for(var q=0;q<steps.length;q++){ var val =steps[q].type; if(typearry.indexOf(val)===-1){ typearry.push(steps[q].type); } } }}var x;for(x=0;x<plugins.length;x++){pluginsarray.push(plugins[x].type);}var obj = {};obj[\"step-types\"] = typearry;obj[\"plugin-types\"] = pluginsarray;map.typearay = JSON.stringify(obj);",
          "inline": "true",
          "type": "code-js",
          "id": "getinfo",
          "next": {
            "success": "send",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "id": "env_list",
      "name": "env_list",
      "trigger": "rest",
      "expression": "/_appup/_env",
      "method": "get",
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "get-env-list-step"
          }
        },
        {
          "id": "get-env-list-step",
          "action": "env",
          "variable": [],
          "type": "get-env-data",
          "next": {
            "success": "prepareResponse"
          }
        },
        {
          "name": "jsondata",
          "value": "{{{envDataJson}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "",
          "type": "set-var",
          "id": "prepareResponse",
          "next": {
            "success": "jsondata",
            "failure": "hangup"
          }
        },
        {
          "id": "jsondata",
          "type": "send",
          "response_content_type": "application/json",
          "variable_name": "jsondata",
          "http_response_code": "200",
          "value_type": "hb"
        }
      ]
    }
  ],
  "filters": [
    {
      "name": "jwt",
      "id": 3248,
      "type": ["pre-filter"],
      "expression": [
        "/*",
        "/map/*",
        "/filters",
        "/joins",
        "/cf/*",
        "/upsert/*",
        "/version/*",
        "/account/*",
        "/search/*",
        "/cf-cks/*",
        "/cks/*",
        "/sp_proc/*",
        "/li"
      ],
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXibFT71l0l2"
          }
        },
        {
          "name": "JWT Validataion",
          "output_variable": "session",
          "value_type": "hb",
          "plugin_name": "jwt",
          "sourceExpression": [
            {
              "value": "{{{request.cookies.token.value}}}"
            },
            {
              "value": "{{{request.headers.token}}}"
            },
            {
              "value": "{{{app.token}}}"
            },
            {
              "value": "{{{request.headers.Referer}}}"
            }
          ],
          "type": "jwt-validate",
          "id": "PBXa5rHTmhtMG",
          "next": {
            "success": "PBXOLm7TRFuyM",
            "failure": "PBX68Qh3WyHGQ"
          }
        },
        {
          "name": "domain_id",
          "value": "{{{session.tenant_id}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOLm7TRFuyM",
          "next": {
            "success": "PBXAVCdaLZf1D",
            "failure": "hangup"
          }
        },
        {
          "name": "domain_id",
          "value": "unable to set cookie",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX68Qh3WyHGQ",
          "next": {
            "success": "PBXonZ4ILe9pN",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "d",
          "if_type": "strlen",
          "variable1": "{{{request.cookies.token.value}}}",
          "comparator": "equal_to",
          "variable2": "0",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXE7h4ig9ot1",
          "next": {
            "success": "PBXUSKVsfq9rE",
            "failure": "PBXhVvJewHflT"
          }
        },
        {
          "name": "token",
          "value": "{{{request.cookies.token.value}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXUSKVsfq9rE",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "token",
          "value": "{{{request.headers.token}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXhVvJewHflT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "domain_id",
          "http_response_code": "403",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXonZ4ILe9pN",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "user_id",
          "value": "{{{session.user_id}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXAVCdaLZf1D",
          "next": {
            "success": "PBX6SLMv16F4T",
            "failure": "hangup"
          }
        },
        {
          "name": "group_id",
          "value": "{{{session.group_id}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX6SLMv16F4T",
          "next": {
            "success": "PBX5LyPUQVW1R",
            "failure": "hangup"
          }
        },
        {
          "name": "role",
          "value": "{{{session.role}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX5LyPUQVW1R",
          "next": {
            "success": "PBXDoMOa8354F",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\nvar test = map.request;\r\nvar result = test.headers.Referer.split('//')[1].split('.')[0];\r\nmap.put('testreferer',result);\r\nmap.request.path.table_name=result+\"`.`\"+map.request.path.table_name;\r\n}\r\n\r\ncatch(e){\r\nmap.put('error',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBX18oreOa4oA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "Referer",
          "value": "{{{session.testreferer}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXDoMOa8354F",
          "next": {
            "success": "PBXE7h4ig9ot1",
            "failure": "hangup"
          }
        },
        {
          "name": "token12",
          "value": "{{{request.path.table_name}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXVnVtvIQSwm",
          "next": {
            "success": "PBX4eZhgKqIdQ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "token12",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBX4eZhgKqIdQ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\nvar test = map.request;\r\nvar result = test.headers.Referer.split('//')[1].split('.')[0];\r\nmap.put('testreferer',result);\r\n}\r\n\r\ncatch(e){\r\nmap.put('error',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBXibFT71l0l2",
          "next": {
            "success": "PBXa5rHTmhtMG",
            "failure": "hangup"
          }
        }
      ]
    },
    {
      "name": "jwt_copy",
      "id": 3249,
      "type": ["pre-filter"],
      "expression": ["/li/*"],
      "steps": [
        {
          "type": "start",
          "id": 1,
          "next": {
            "start": "PBXibFT71l0l2"
          }
        },
        {
          "name": "JWT Validataion",
          "output_variable": "session",
          "value_type": "hb",
          "plugin_name": "jwt",
          "sourceExpression": [
            {
              "value": "{{{request.cookies.token.value}}}"
            },
            {
              "value": "{{{request.headers.token}}}"
            },
            {
              "value": "{{{app.token}}}"
            },
            {
              "value": "{{{request.headers.Referer}}}"
            }
          ],
          "type": "jwt-validate",
          "id": "PBXa5rHTmhtMG",
          "next": {
            "success": "PBXOLm7TRFuyM",
            "failure": "PBX68Qh3WyHGQ"
          }
        },
        {
          "name": "domain_id",
          "value": "{{{session.tenant_id}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXOLm7TRFuyM",
          "next": {
            "success": "PBXAVCdaLZf1D",
            "failure": "hangup"
          }
        },
        {
          "name": "domain_id",
          "value": "unable to set cookie",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX68Qh3WyHGQ",
          "next": {
            "success": "PBXonZ4ILe9pN",
            "failure": "hangup"
          }
        },
        {
          "output_variable": "d",
          "if_type": "strlen",
          "variable1": "{{{request.cookies.token.value}}}",
          "comparator": "equal_to",
          "variable2": "0",
          "value_type": "hb",
          "type": "if-condition",
          "id": "PBXE7h4ig9ot1",
          "next": {
            "success": "PBXUSKVsfq9rE",
            "failure": "PBXhVvJewHflT"
          }
        },
        {
          "name": "token",
          "value": "{{{request.cookies.token.value}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXUSKVsfq9rE",
          "next": {
            "success": "PBX1M9FelqM9o",
            "failure": "hangup"
          }
        },
        {
          "name": "token",
          "value": "{{{request.headers.token}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXhVvJewHflT",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "dat",
          "http_response_code": "403",
          "response_content_type": "application/json; charset=utf8",
          "value_type": "hb",
          "type": "send",
          "id": "PBXonZ4ILe9pN",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "user_id",
          "value": "{{{session.user_id}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXAVCdaLZf1D",
          "next": {
            "success": "PBX6SLMv16F4T",
            "failure": "hangup"
          }
        },
        {
          "name": "group_id",
          "value": "{{{session.group_id}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX6SLMv16F4T",
          "next": {
            "success": "PBX5LyPUQVW1R",
            "failure": "hangup"
          }
        },
        {
          "name": "role",
          "value": "{{{session.role}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX5LyPUQVW1R",
          "next": {
            "success": "PBXDoMOa8354F",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\nvar test = map.request;\r\nvar result = test.headers.Referer.split('//')[1].split('.')[0];\r\nmap.put('testreferer',result);\r\nmap.request.path.table_name=result+\"`.`\"+map.request.path.table_name;\r\n}\r\n\r\ncatch(e){\r\nmap.put('error',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBX18oreOa4oA",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "name": "Referer",
          "value": "{{{session.testreferer}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXDoMOa8354F",
          "next": {
            "success": "PBXE7h4ig9ot1",
            "failure": "hangup"
          }
        },
        {
          "name": "token12",
          "value": "newdata == {{{json newdata}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXVnVtvIQSwm",
          "next": {
            "success": "PBX4eZhgKqIdQ",
            "failure": "hangup"
          }
        },
        {
          "variable_name": "token12",
          "http_response_code": "200",
          "response_content_type": "application/json",
          "value_type": "hb",
          "type": "send",
          "id": "PBX4eZhgKqIdQ",
          "next": {
            "success": "hangup",
            "failure": "hangup"
          }
        },
        {
          "src": "try{\r\nvar test = map.request;\r\nvar result = test.headers.Referer.split('//')[1].split('.')[0];\r\nmap.put('testreferer',result);\r\n//map.request.path.table_name=result+\".\"+map.request.path.table_name;\r\n//map.request.body.data.tables=result+\".\"+map.request.body.data.tables;\r\nvar newdata=map.dat;\r\nmap.put('newdata',newdata);\r\n\r\n}\r\n\r\ncatch(e){\r\nmap.put('error',e);\r\n}",
          "inline": "true",
          "type": "code-js",
          "id": "PBXibFT71l0l2",
          "next": {
            "success": "PBXa5rHTmhtMG",
            "failure": "hangup"
          }
        },
        {
          "name": "dat",
          "value": "{{{json request.body.data.tables}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBXno7TDtDzw0",
          "next": {
            "success": "PBXibFT71l0l2",
            "failure": "hangup"
          }
        },
        {
          "name": "token12",
          "value": "{{{jsonstr request.body}}}",
          "value_type": "hb",
          "encode_or_decode": "DO_NOTHING",
          "char_set": "ISO-8859-1",
          "type": "set-var",
          "id": "PBX1M9FelqM9o",
          "next": {
            "success": "PBX4eZhgKqIdQ",
            "failure": "hangup"
          }
        }
      ]
    }
  ],
  "server": {
    "idle_timeout": 60000,
    "port": "8080",
    "host": "0.0.0.0",
    "set_time_response": true,
    "set_options": true,
    "options_route_expression": "/*",
    "options_allowed_origins": "*",
    "options_allowed_methods": "GET,PUT,POST,DELETE,OPTIONS",
    "options_allowed_headers": "Content-Type, Authorization, Content-Length, X-Requested-With",
    "static_route_expression": "/",
    "custom.query.1": "select a. total_hrs, a. rate, a. earning, a. email, a.name, a.id, a.user_id, a.hrs ,b.`paid_amount`  from activity_cq act  inner join( select a.id as id2, sum(a.duration) as total_hrs, pm.billing_rateperhour as rate, (round(sum(a.duration)/3600,2)*pm.bill",
    "checks_type": "created_by",
    "sendgridkey": "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",
    "data_order": "{\"subscriber\":\"order_seq\"}",
    "tablename": "filter,flow,message,subscriber,subscriber_message,visit,website",
    "limit": "10",
    "days": "2",
    "trash": "{\"website\":\"is_active\",\"message\":\"is_active\"}",
    "version_tables": "ticket,ticket_version",
    "activity": "  {\"task\":{\"columns\":\"id,name\",\"fk\":{\"entity:project\":\"id,name\"}},\"project\":{\"columns\":\"id,name\"},\"domain_user\":{\"columns\":\"id,name\"},\"domain_user_role\":{\"columns\":\"id,role\",\"fk\":{\"entity:domain_user\":\"id,name\",\"product\":\"id,name\"}},\"ticket\":{\"columns\":\"id,subject\"},\"ticket_note\":{\"columns\":\"group_id,assignee_id\"},\"section\":{\"columns\":\"id,name\"},\"section_copy\":{\"columns\":\"id,requester_name\",\"fk\":{\"entity:section\":\"id,name\"}}}",
    "url": " https://pushly.500apps.com/db-v2",
    "non_domain_tables": "ticket_note,calls,book,sample,contact_tag,odd,contact,basic,attendance",
    "custom.query.2": "insert into  flow(${request.params.fields1}) values(${request.params.fields2});",
    "delete_date": "{\"website\":\"delete_date\",\"message\":\"delete_date\"}",
    "id_type": "domain_id",
    "custom.query.3": "insert into attendance(name) values('Testing')",
    "custom.query.4": "update flow set ${request.params.fields1}='${request.params.fields2}' where id=${request.params.id}",
    "schema": "push_ly",
    "custom.query.5": "select ${request.params.fields} from flow;",
    "temp_access_key": "AKIA5QMVMZUCJEDFHW4B",
    "temp_secret_key": "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",
    "IO_THREADS": 4,
    "WORKER_THREADS": 8
  },
  "properties": {
    "cloud": {},
    "app": {
      "custom.query.1": "select a. total_hrs, a. rate, a. earning, a. email, a.name, a.id, a.user_id, a.hrs ,b.`paid_amount`  from activity_cq act  inner join( select a.id as id2, sum(a.duration) as total_hrs, pm.billing_rateperhour as rate, (round(sum(a.duration)/3600,2)*pm.bill",
      "checks_type": "created_by",
      "sendgridkey": "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",
      "data_order": "{\"subscriber\":\"order_seq\"}",
      "tablename": "filter,flow,message,subscriber,subscriber_message,visit,website",
      "limit": "10",
      "days": "2",
      "trash": "{\"website\":\"is_active\",\"message\":\"is_active\"}",
      "version_tables": "ticket,ticket_version",
      "activity": "  {\"task\":{\"columns\":\"id,name\",\"fk\":{\"entity:project\":\"id,name\"}},\"project\":{\"columns\":\"id,name\"},\"domain_user\":{\"columns\":\"id,name\"},\"domain_user_role\":{\"columns\":\"id,role\",\"fk\":{\"entity:domain_user\":\"id,name\",\"product\":\"id,name\"}},\"ticket\":{\"columns\":\"id,subject\"},\"ticket_note\":{\"columns\":\"group_id,assignee_id\"},\"section\":{\"columns\":\"id,name\"},\"section_copy\":{\"columns\":\"id,requester_name\",\"fk\":{\"entity:section\":\"id,name\"}}}",
      "url": " https://pushly.500apps.com/db-v2",
      "non_domain_tables": "ticket_note,calls,book,sample,contact_tag,odd,contact,basic,attendance",
      "custom.query.2": "insert into  flow(${request.params.fields1}) values(${request.params.fields2});",
      "delete_date": "{\"website\":\"delete_date\",\"message\":\"delete_date\"}",
      "id_type": "domain_id",
      "custom.query.3": "insert into attendance(name) values('Testing')",
      "custom.query.4": "update flow set ${request.params.fields1}='${request.params.fields2}' where id=${request.params.id}",
      "schema": "push_ly",
      "custom.query.5": "select ${request.params.fields} from flow;",
      "temp_access_key": "AKIA5QMVMZUCJEDFHW4B",
      "temp_secret_key": "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"
    }
  },
  "plugins": [
    {
      "id": 20480,
      "name": "jwt",
      "type": "jwt-plugin",
      "version": "1.0",
      "category": "JWT",
      "signKey": "DA693C13E7C5528473D915EB827EC"
    },
    {
      "id": 20481,
      "name": "sendgridkey",
      "type": "sendgrid-plugin",
      "version": "1.0",
      "category": "Event",
      "api_key": "{{app.sendgridkey}}"
    },
    {
      "id": 20482,
      "name": "temp_trash",
      "type": "s3-plugin",
      "version": "1.0",
      "category": "AWS",
      "accessKey": "{{app.temp_access_key}}",
      "secretKey": "{{app.temp_secret_key}}",
      "region": "us-east-1"
    },
    {
      "id": 20483,
      "name": "db_plugin",
      "type": "mysql-custom-plugin",
      "version": "1.0",
      "category": "mysql-database",
      "username": "push_ly",
      "password": "Push_ly@123",
      "server": "appsdb500-1-rd.c2xawm3kje6l.us-west-2.rds.amazonaws.com",
      "schema": "push_ly",
      "minimum_idle": "50",
      "idle_timeout": "5000",
      "max_pool_size": "25"
    },
    {
      "id": 20484,
      "name": "rd_plugin",
      "type": "mysql-custom-plugin",
      "version": "1.0",
      "category": "mysql-database",
      "server": "appsdb500-1-rd.c2xawm3kje6l.us-west-2.rds.amazonaws.com",
      "username": "push_ly",
      "password": "Push_ly@123",
      "schema": "push_ly",
      "minimum_idle": "50",
      "idle_timeout": "5000",
      "max_pool_size": "25"
    }
  ]
}
